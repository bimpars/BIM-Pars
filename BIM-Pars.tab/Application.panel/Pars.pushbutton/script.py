# -*- coding: utf-8 -*-
#__author__ = "Mohammad Sajjad Mortazavi"

###############################################################################
# [APP:DOC:SYSTEM] Imports and References
#
# Handles import of necessary libraries and modules:
# - System libraries
# - Custom modules
###############################################################################

# [APP:SYSTEM:IMPORTS] Import necessary libraries
import clr
clr.AddReference('System.Windows.Forms')
clr.AddReference('System.Drawing')
import threading
from System.Drawing import Graphics
from System import Array, Object, IntPtr
from System.Drawing import Size, Point, Color, Image, ContentAlignment, Font, FontStyle, Icon
from System.Windows.Forms import (
    Application, Form, TabControl, TabPage, Button, Label, Panel, ToolTip, DockStyle, TextImageRelation, 
    ImageList, ToolStrip, ToolStripButton, ToolStripItemDisplayStyle, TreeView, TreeNode, GroupBox, TextBox, 
    DataGridView, DataGridViewAutoSizeColumnsMode, ProgressBar, StatusStrip, ToolStripStatusLabel, Cursors, 
    Padding, ToolStripSeparator, ToolStripProgressBar, Keys, ComboBox, AnchorStyles, DataGridViewAutoSizeRowsMode, 
    MessageBox, Timer, ToolStripDropDownButton, ToolStripMenuItem, DataGridViewTextBoxColumn, 
    DataGridViewColumnHeadersHeightSizeMode, BorderStyle, FormBorderStyle, ToolStripItemImageScaling
)
from System.Windows.Forms import (
    MessageBox, 
    MessageBoxButtons, 
    MessageBoxIcon, 
    DialogResult,
    ColorDialog,
    SaveFileDialog
)
import random
from System.Drawing import KnownColor
import socket
import time
import webbrowser
import os
import sys
import json
from pyrevit import script, forms
sys.path.append(os.path.dirname(__file__))
from sajdmo.pars.license import getInit
from sajdmo.pars.api import to_dotnet_array, create_data_grid, load_config_json
from UI.url import parsweb
from sajdmo.forms.single import single_input
from structure.root import wurl_path, sanyv_icon, lan_path, cuslogo_path, logo_path, sanyv_back, cancel_icon, ok_icon, searchanyvalue_icon
from structure.root import (toolbox_icon, report_icon, settings_icon, select_icon, tool_icon, python_icon, info_icon, element_self_icon, element_parameter_icon, select_elements_icon, 
reduce_selected_elements_icon, delete_app_icon, parameter_self_icon, parameter_value_icon, filter_node_icon, by_parameter_node_icon, all_elements_node_icon, excel_node_icon, search_node_icon, 
check_node_icon, delete_node_icon, search_param_node_icon, compare_check_node_icon, set_node_icon, edit_node_icon, delete_param_node_icon, folder_icon, lab_user_node_icon,
expand_tree_button, close_tree_button, user_manual_button, video_youtube_button, github_button, report_bug_button, local_memory_in_button, local_memory_out_button, save_app_button, download_app_button,
import_app_button, export_app_button, xml_app_button, html_app_button, csv_app_button, deselect_elements_button, isolate_elements_button, deisolate_elements_button, color_elements_button,
decolor_elements_button, pin_button, unpin_button, element_count_app_icon, loading_connection_app_icon, loading_user_app_icon, pyrevit_icon, python_script_node_icon, pylist_path, back_tab_button,
print_app_report_button, clean_button, xlsx_app_button, filter_app_button, find_app_button, edit_app_button, color_app_button, add_bottom_app_button, add_top_app_button, add_right_app_button, 
add_left_app_button, write_app_button, delete_row_app_button, delete_column_app_button, delete_hiden_app_button, similar_item_color_button, similar_item_color_full_sheet_button, numeric_gradient_button,
paint_app_button, bimpars_report_icon, user_app_icon, valid_user_app_icon, unvalid_user_app_icon, online_app_icon, offline_app_icon, find_app_ico_icon, find_app_gif_icon, write_app_ico_icon, dir_path,
general_urls, scripts_node_icon, run_directory_icon, bimparstools_icon, app_logo_name_icon
)
from structure.root import (element_id_app_tool_icon, creator_finder_app_tool_icon, information_app_tool_icon, active_view_app_tool_icon, hierarchy_app_tool_icon, dudul_app_tool_icon, by_type_app_tool_icon,
search_for_value_of_instance_parameters_app_tool_icon, existance_of_parameters_values_app_tool_icon, all_elements_in_selected_categories_app_tool_icon, all_elements_in_selected_views_app_tool_icon,
all_elements_of_selected_levels_app_tool_icon, ownership_of_elements_app_tool_icon, unbound_rooms_app_tool_icon, mirrored_doors_app_tool_icon, ids_from_excel_app_tool_icon, by_id_app_tool_icon,
all_direct_shape_elements_app_tool_icon, search_value_of_parameters_by_filter_app_tool_icon, search_value_of_parameters_by_filter_for_family_document_app_tool_icon, snipe_parameter_value_app_tool_icon,
snipe_parameter_value_for_family_document_app_tool_icon, element_dictionary_app_tool_icon, check_parameter_against_category_app_tool_icon, delete_parameter_completely_from_the_model_app_tool_icon, 
search_for_any_value_app_tool_icon, pair_comparer_app_tool_icon, comparer_of_multiple_elements_app_tool_icon, same_value_for_all_selected_elements_app_tool_icon, copy_from_one_parameter_to_another_parameter_app_tool_icon,
list_makers_of_values_from_excel_app_tool_icon, batch_parameter_set_using_dataset_app_tool_icon, id_generator_app_tool_icon, parameter_value_editor_app_tool_icon, parameter_value_editor_for_special_characters_app_tool_icon,
value_of_parameter_for_selected_elements_app_tool_icon, desired_character_in_value_of_parameter_for_selected_elements_app_tool_icon
)
from structure.root import settings, app_strings, app_logo_icon
from sajdmo.pars.api import app_string
from UI.strings_main import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23
from UI.strings_main import tip_1, tip_2, tip_3, tip_4, tip_5, tip_6, tip_7, tip_8, tip_9, tip_10, tip_11, tip_12, tip_13, tip_14, tip_15, tip_16, tip_17, tip_18, tip_19, tip_20, tip_21, tip_22
from UI.strings_main import str_bar_1, str_bar_2, str_bar_3, str_bar_4, str_bar_5, str_bar_6, str_bar_7, str_bar_8, str_bar_9, str_bar_10, str_bar_11, str_bar_12, str_bar_13, str_bar_14, str_bar_15
from UI.strings_bimpars_tools import (tool_str_1, tool_str_2, tool_str_3, tool_str_4, tool_str_5, tool_str_6, tool_str_7, tool_str_8, tool_str_9, tool_str_10, tool_str_11, tool_str_12, tool_str_13, tool_str_14, 
tool_str_15, tool_str_16, tool_str_17, tool_str_18, tool_str_19, tool_str_20, tool_str_21, tool_str_22, tool_str_23, tool_str_24, tool_str_25, tool_str_26, tool_str_27, tool_str_28, tool_str_29, tool_str_30, 
tool_str_31, tool_str_32, tool_str_33, tool_str_34, tool_str_35, tool_str_36, tool_str_37, tool_str_38, tool_str_39, tool_str_40, tool_str_41, tool_str_42, tool_str_43, tool_str_44, tool_str_45, tool_str_46, 
tool_str_47, tool_str_48, tool_str_49, tool_str_50, tool_str_51, tool_str_52)
from UI.strings_bimpars_tools import (tool_tip_1, tool_tip_2, tool_tip_3, tool_tip_4, tool_tip_5, tool_tip_6, tool_tip_7, tool_tip_8, tool_tip_9, tool_tip_10, tool_tip_11, tool_tip_12, tool_tip_13, tool_tip_14, 
tool_tip_15, tool_tip_16, tool_tip_17, tool_tip_18, tool_tip_19, tool_tip_20, tool_tip_21, tool_tip_22, tool_tip_23, tool_tip_24, tool_tip_25, tool_tip_26, tool_tip_27, tool_tip_28, tool_tip_29, tool_tip_30, 
tool_tip_31, tool_tip_32, tool_tip_33, tool_tip_34, tool_tip_35, tool_tip_36, tool_tip_37, tool_tip_38, tool_tip_39, tool_tip_40, tool_tip_41, tool_tip_42, tool_tip_43, tool_tip_44, tool_tip_45, tool_tip_46, 
tool_tip_47, tool_tip_48, tool_tip_49, tool_tip_50, tool_tip_51, tool_tip_52)

###############################################################################
# [APP:DOC:CONFIGURATION] Path and Settings Initialization
#
# Handles initialization of configuration paths and settings:
# - Web URL
# - Application strings
# - Settings
# - Language 
###############################################################################

wurl= wurl_path()
app_strings = app_strings()
settings = settings()
lan = lan_path()

# [INIT_BIMPARS]
class BIMPARS_APP(Form):

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Main Form Initialization and Setup
    #
    # Handles main form initialization:
    # - Sets up form properties
    # - Initializes UI components
    ###############################################################################
    
    # [APP:UI:INIT] Initialize App
    def __init__(self):
        # [UI:FORM:INIT] Initialize main form properties
        self.message_box_opened = False  
        self.Text = str_1(lan)
        self.Size = Size(720, 635)  
        #self.BackColor = Color.White
        self.KeyPreview = True  
        self.KeyDown += self.on_key_down  
        self.CenterToScreen()
        self.TopMost = True  
        self.Icon = Icon(app_logo_icon())  

        # [DATA:SELECTION:INIT] Initialize selected elements
        self.last_selection_count = 0
        
        # [DATA:URLS:LOAD] Load JSON file containing all URLs
        self.load_urls()

        # [UI:FORM:SETUP] Set up the main UI components
        self.setup_ui()

        # [DATA:SELECTION:CHECK] Perform initial selection check
        self.check_initial_selection()

        # [LICENSE:TIMER:INIT] Initialize timer for license and connection check
        self.setup_timer()

        # [SCRIPT:NODE:CONFIG] Configure script nodes
        self.script_node_configuration()

        # [DATA:SEEDS:LOAD] Load initial seeds
        self.load_seeds()
     
    # [APP:UI:SET] Setup App
    def setup_ui(self):

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Image List and Tab Control Initialization
        #
        # Handles image list and tab control initialization:
        # - Creates and configures image lists
        # - Sets up tab control
        ###############################################################################

        # [UI:IMAGELIST:INIT] Create and configure image lists for tabs and treeview
        self.image_list_tabs = ImageList()
        self.image_list_treeview = ImageList()
        self.image_list_tabs.ImageSize = Size(24, 24)  
        self.image_list_treeview.ImageSize = Size(18, 18)

        # [UI:IMAGELIST:TABS] Add icons for tabs
        tab_icon_paths = [
            toolbox_icon(), #0 
            report_icon(), #1
        ]

        for icon_path in tab_icon_paths:
            icon_image = Image.FromFile(icon_path)
            self.image_list_tabs.Images.Add(icon_image)

        # [UI:IMAGELIST:TREEVIEW] Add icons for treeview elements
        treeview_icon_paths = [
            select_icon(),  # 0
            tool_icon(), #1
            bimparstools_icon(), #2
            scripts_node_icon(), #3
            info_icon(), #4
            element_self_icon(), #5
            element_parameter_icon(), #6
            select_elements_icon(), #7
            reduce_selected_elements_icon(), #8
            delete_app_icon(), #9 
            parameter_self_icon(),    #10
            parameter_value_icon(), #11
            filter_node_icon(), #12
            by_parameter_node_icon(), #13
            all_elements_node_icon(), #14
            excel_node_icon(), #15
            search_node_icon(), #16
            check_node_icon(), #17
            delete_node_icon(), #18
            search_param_node_icon(), #19
            compare_check_node_icon(), #20
            set_node_icon(), #21
            edit_node_icon(), #22
            delete_param_node_icon(), #23
            folder_icon(), #24
            lab_user_node_icon(), #25
        ]

        for icon_path in treeview_icon_paths:
            icon_image = Image.FromFile(icon_path)
            self.image_list_treeview.Images.Add(icon_image)

        # [UI:TABCONTROL:INIT] Create and configure the tab control
        self.tab_control = TabControl()
        self.tab_control.Dock = DockStyle.Fill
        self.tab_control.ImageList = self.image_list_tabs  
        
        # [UI:TAB1:INIT] Initialize the first tab
        self.load_seeds()
        self.tab1 = TabPage(str_2(lan))
        self.tab1.ImageIndex = 0  
        
        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Tree View Structure Initialization
        #
        # Handles tree view structure initialization:
        # - Creates and configures tree nodes
        # - Manages node events and tooltips
        ###############################################################################

        # [UI:TREEVIEW:INIT] Create and configure the treeview structure
        self.group_box = GroupBox()
        self.group_box.Dock = DockStyle.Left  
        self.group_box.Width = 325

        self.tree_view = TreeView()
        self.tree_view.ImageList = self.image_list_treeview  
        self.tree_view.Dock = DockStyle.Fill  
        self.tree_view.Scrollable = True  
        self.tree_view.HideSelection = False

        # [UI:TREEVIEW:NODES] Create and configure tree nodes "BIM Pars Tools"
        node1 = TreeNode(str_3(lan))
        self.load_seeds()
        node1.Expand()
        try:
            node1.Tag = [self.seeds["d526a5s4d6asd4a42sdasdaa526sda"]]
        except:
            from UI.strings_main import str_bar_9, str_bar_16
            MessageBox.Show(str_bar_16(lan), str_bar_9(lan))
            sys.exit()
 
        # [UI:TREEVIEW:INFO] Create the "Info" node
        info_node = TreeNode(str_4(lan))
        info_node.Tag = [self.seeds["2186gfd24g9f8h4fdgbfd68b4df92g"]]
        node1.Nodes.Add(info_node)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Info"
        element_id_tool_node = TreeNode(tool_str_1(lan))
        element_id_tool_node.ForeColor = Color.Blue  
        creator_finder_tool_node = TreeNode(tool_str_2(lan))
        creator_finder_tool_node.ForeColor = Color.Blue  
        information_tool_node = TreeNode(tool_str_46(lan))
        information_tool_node.ForeColor = Color.Blue  
        active_view_tool_node = TreeNode(tool_str_3(lan))
        active_view_tool_node.ForeColor = Color.Blue  
        info_node.Nodes.Add(element_id_tool_node)
        info_node.Nodes.Add(creator_finder_tool_node)
        info_node.Nodes.Add(information_tool_node)
        info_node.Nodes.Add(active_view_tool_node)

        # [UI:TREEVIEW:ELEMENT_SELF] Create "Element Self" node
        sub_node1 = TreeNode(str_5(lan))
        sub_node1.Expand()
        sub_node1.Tag = [self.seeds["weqsd2w6dw6dwe6fd5wx6efw6ewrrd"],self.seeds["werdegrzjuziuifgbcvxcxdd5s54df"],self.seeds["zujfhgnbbxcvnxnjcgdtjvjkgzrzus"],self.seeds["256sds6s265653x3xyxcxvnmmbf882"],self.seeds["mnkfgnbfbjxvgdcfsxc658v6566522"],self.seeds["56562dfv2cx52c2x2yx25625256993"]]

        # [UI:TREEVIEW:SELECT] Create "Select" node under "Element Self"
        sub_node1_1 = TreeNode(str_6(lan))
        sub_node1_1.Expand()
        sub_node1_1.Tag = [self.seeds["weqsd2w6dw6dwe6fd5wx6efw6ewrrd"],self.seeds["werdegrzjuziuifgbcvxcxdd5s54df"],self.seeds["zujfhgnbbxcvnxnjcgdtjvjkgzrzus"],self.seeds["256sds6s265653x3xyxcxvnmmbf882"]]

        # [UI:TREEVIEW:FILTER] Create "Filter" node under "Select"
        filter_node = TreeNode(str_7(lan))
        filter_node.Tag = [self.seeds["weqsd2w6dw6dwe6fd5wx6efw6ewrrd"]]
        sub_node1_1.Nodes.Add(filter_node)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Filter"
        hierarchy_tool_node = TreeNode(tool_str_4(lan))
        hierarchy_tool_node.ForeColor = Color.Blue  
        dudul_tool_node = TreeNode(tool_str_5(lan))
        dudul_tool_node.ForeColor = Color.Blue  
        type_tool_node = TreeNode(tool_str_6(lan))
        type_tool_node.ForeColor = Color.Blue  
        filter_node.Nodes.Add(hierarchy_tool_node)
        filter_node.Nodes.Add(dudul_tool_node)
        filter_node.Nodes.Add(type_tool_node)

        # [UI:TREEVIEW:BY_PARAMETER] Create "By Parameter" node under "Select"
        by_parameter_node = TreeNode(str_8(lan))
        by_parameter_node.Tag = [self.seeds["werdegrzjuziuifgbcvxcxdd5s54df"]]
        sub_node1_1.Nodes.Add(by_parameter_node)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "By Parameter"
        select_by_search_tool_node = TreeNode(tool_str_7(lan))
        select_by_search_tool_node.ForeColor = Color.Blue 
        select_by_existence_tool_node = TreeNode(tool_str_8(lan))
        select_by_existence_tool_node.ForeColor = Color.Blue 
        by_parameter_node.Nodes.Add(select_by_search_tool_node)
        by_parameter_node.Nodes.Add(select_by_existence_tool_node)

        # [UI:TREEVIEW:ALL_ELEMENTS] Create "All Elements" node under "Select"
        all_elements_node = TreeNode(str_9(lan))
        all_elements_node.Tag = [self.seeds["zujfhgnbbxcvnxnjcgdtjvjkgzrzus"]]
        sub_node1_1.Nodes.Add(all_elements_node)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "All Elements"
        select_all_category_tool_node = TreeNode(tool_str_9(lan))
        select_all_category_tool_node.ForeColor = Color.Blue  
        select_all_view_tool_node = TreeNode(tool_str_10(lan))
        select_all_view_tool_node.ForeColor = Color.Blue  
        select_all_level_tool_node = TreeNode(tool_str_11(lan))
        select_all_level_tool_node.ForeColor = Color.Blue  
        select_ownership_tool_node = TreeNode(tool_str_12(lan))
        select_ownership_tool_node.ForeColor = Color.Blue  
        select_unbound_room_tool_node = TreeNode(tool_str_13(lan))
        select_unbound_room_tool_node.ForeColor = Color.Blue  
        select_mirrored_door_tool_node = TreeNode(tool_str_14(lan))
        select_mirrored_door_tool_node.ForeColor = Color.Blue  
        all_elements_node.Nodes.Add(select_all_category_tool_node)
        all_elements_node.Nodes.Add(select_all_view_tool_node)
        all_elements_node.Nodes.Add(select_all_level_tool_node)
        all_elements_node.Nodes.Add(select_ownership_tool_node)
        all_elements_node.Nodes.Add(select_unbound_room_tool_node)
        all_elements_node.Nodes.Add(select_mirrored_door_tool_node )

        # [UI:TREEVIEW:EXCEL] Create "Excel" node under "Select"
        excel_node = TreeNode(str_10(lan))
        excel_node.Tag = [self.seeds["256sds6s265653x3xyxcxvnmmbf882"]]
        sub_node1_1.Nodes.Add(excel_node)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Excel"
        select_excel_tool_node = TreeNode(tool_str_15(lan))
        select_excel_tool_node.ForeColor = Color.Blue  
        excel_node.Nodes.Add(select_excel_tool_node)

        # [UI:TREEVIEW:SELECT] Add "Select" to "Element Self"
        sub_node1.Nodes.Add(sub_node1_1)

        # [UI:TREEVIEW:REDUCE_SELECTED] Create "Reduce Selected" node under "Element Self"
        reduce_selected_node = TreeNode(str_11(lan))
        reduce_selected_node.Tag = [self.seeds["mnkfgnbfbjxvgdcfsxc658v6566522"]]
        sub_node1.Nodes.Add(reduce_selected_node)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Reduce Selected"
        reduce_id_tool_node = TreeNode(tool_str_16(lan))
        reduce_id_tool_node.ForeColor = Color.Blue  
        reduce_category_tool_node = TreeNode(tool_str_17(lan))
        reduce_category_tool_node.ForeColor = Color.Blue  
        reduce_instance_parameter_tool_node = TreeNode(tool_str_18(lan))
        reduce_instance_parameter_tool_node.ForeColor = Color.Blue  
        reduce_existence_tool_node = TreeNode(tool_str_19(lan))
        reduce_existence_tool_node.ForeColor = Color.Blue  
        reduce_selected_node.Nodes.Add(reduce_id_tool_node)
        reduce_selected_node.Nodes.Add(reduce_category_tool_node)
        reduce_selected_node.Nodes.Add(reduce_instance_parameter_tool_node)
        reduce_selected_node.Nodes.Add(reduce_existence_tool_node)

        # [UI:TREEVIEW:DELETE] Create "Delete" node under "Element Self"
        delete_node = TreeNode(str_12(lan))
        delete_node.Tag = [self.seeds["56562dfv2cx52c2x2yx25625256993"]]
        sub_node1.Nodes.Add(delete_node)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Delete"
        delete_id_tool_node = TreeNode(tool_str_20(lan))
        delete_id_tool_node.ForeColor = Color.Blue  
        delete_excel_tool_node = TreeNode(tool_str_21(lan))
        delete_excel_tool_node.ForeColor = Color.Blue  
        delete_type_tool_node = TreeNode(tool_str_22(lan))
        delete_type_tool_node.ForeColor = Color.Blue  
        delete_directshape_tool_node = TreeNode(tool_str_23(lan))
        delete_directshape_tool_node.ForeColor = Color.Blue  
        delete_category_tool_node = TreeNode(tool_str_24(lan))
        delete_category_tool_node.ForeColor = Color.Blue  
        delete_node.Nodes.Add(delete_id_tool_node)
        delete_node.Nodes.Add(delete_excel_tool_node)
        delete_node.Nodes.Add(delete_type_tool_node)
        delete_node.Nodes.Add(delete_directshape_tool_node)
        delete_node.Nodes.Add(delete_category_tool_node)

        # [UI:TREEVIEW:ELEMENT_SELF] Add "Element Self" to "BIM Pars Tools"
        node1.Nodes.Add(sub_node1)

        # [UI:TREEVIEW:ELEMENT_PARAMETER] Create "Element Parameter" node
        sub_node2 = TreeNode(str_13(lan))
        sub_node2.Expand()
        sub_node2.Tag = [self.seeds["svxcbynvxcbyvbyv2asxa2s565ax56"],self.seeds["5y642c56y2xy8csd765x26y46c7rfg"],self.seeds["mghjmnghbhdffvsdcsd2sdc6sds52s"],self.seeds["y2242xcvx8cxysdfgvcvbbn5bn8m2v"],self.seeds["gphokkhmbnvnbcvcsgfd1dsc14d555"],self.seeds["wqdcvcv52b9b8jh89hjhj8f5dscefe"],self.seeds["bnvbnsdcadasc41xcy1xcy1cyy5y5c"],self.seeds["retetztdssddxvxcvxc4x1cvb8vnb1"]]

        # [UI:TREEVIEW:PARAMETER_SELF] Create "Parameter Self" node
        parameter_self_node = TreeNode(str_14(lan))
        parameter_self_node.Expand()
        parameter_self_node.Tag = [self.seeds["svxcbynvxcbyvbyv2asxa2s565ax56"],self.seeds["5y642c56y2xy8csd765x26y46c7rfg"],self.seeds["mghjmnghbhdffvsdcsd2sdc6sds52s"]]

        # [UI:TREEVIEW:SEARCH] Create "Search" node under "Parameter Self"
        search_node_self = TreeNode(str_15(lan))
        search_node_self.Tag = [self.seeds["svxcbynvxcbyvbyv2asxa2s565ax56"]]
        parameter_self_node.Nodes.Add(search_node_self)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Search"
        search_value_by_filter_tool_node = TreeNode(tool_str_25(lan))
        search_value_by_filter_tool_node.ForeColor = Color.Blue  
        search_value_by_filter_family_doc_tool_node = TreeNode(tool_str_26(lan))
        search_value_by_filter_family_doc_tool_node.ForeColor = Color.Blue  
        snipe_value_tool_node = TreeNode(tool_str_27(lan))
        snipe_value_tool_node.ForeColor = Color.Blue  
        snipe_value_family_doc_tool_node = TreeNode(tool_str_28(lan))
        snipe_value_family_doc_tool_node.ForeColor = Color.Blue  
        dictionary_tool_node = TreeNode(tool_str_29(lan))
        dictionary_tool_node.ForeColor = Color.Blue  
        search_node_self.Nodes.Add(search_value_by_filter_tool_node)
        search_node_self.Nodes.Add(search_value_by_filter_family_doc_tool_node)
        search_node_self.Nodes.Add(snipe_value_tool_node)
        search_node_self.Nodes.Add(snipe_value_family_doc_tool_node)
        search_node_self.Nodes.Add(dictionary_tool_node)

        # [UI:TREEVIEW:CHECK] Create "Check" node under "Parameter Self"
        check_node_self = TreeNode(str_16(lan))
        check_node_self.Tag = [self.seeds["5y642c56y2xy8csd765x26y46c7rfg"]]
        parameter_self_node.Nodes.Add(check_node_self)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Check"
        check_existence_tool_node = TreeNode(tool_str_30(lan))
        check_existence_tool_node.ForeColor = Color.Blue  
        check_aganst_category_tool_node = TreeNode(tool_str_31(lan))
        check_aganst_category_tool_node.ForeColor = Color.Blue  
        check_node_self.Nodes.Add(check_existence_tool_node)
        check_node_self.Nodes.Add(check_aganst_category_tool_node)
        
        # [UI:TREEVIEW:DELETE] Create "Delete" node under "Parameter Self"
        delete_node_self = TreeNode(str_12(lan))
        delete_node_self.Tag = [self.seeds["mghjmnghbhdffvsdcsd2sdc6sds52s"]]
        parameter_self_node.Nodes.Add(delete_node_self)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Delete"
        delete_parameter_tool_node = TreeNode(tool_str_32(lan))
        delete_parameter_tool_node.ForeColor = Color.Blue  
        delete_node_self.Nodes.Add(delete_parameter_tool_node)

        # [UI:TREEVIEW:PARAMETER_SELF] Add "Parameter Self" to "Element Parameter"
        sub_node2.Nodes.Add(parameter_self_node)

        # [UI:TREEVIEW:PARAMETER_VALUE] Create "Parameter Value" node
        parameter_value_node = TreeNode(str_17(lan))
        parameter_value_node.Expand()
        parameter_value_node.Tag = [self.seeds["y2242xcvx8cxysdfgvcvbbn5bn8m2v"],self.seeds["gphokkhmbnvnbcvcsgfd1dsc14d555"],self.seeds["wqdcvcv52b9b8jh89hjhj8f5dscefe"],self.seeds["bnvbnsdcadasc41xcy1xcy1cyy5y5c"],self.seeds["retetztdssddxvxcvxc4x1cvb8vnb1"]]

        # [UI:TREEVIEW:SEARCH] Create "Search" node under "Parameter Value"
        search_node_value = TreeNode(str_15(lan))
        search_node_value.Tag = [self.seeds["y2242xcvx8cxysdfgvcvbbn5bn8m2v"]]
        parameter_value_node.Nodes.Add(search_node_value)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Search"
        search_value_of_instance_parameter_tool_node = TreeNode(tool_str_33(lan))
        search_value_of_instance_parameter_tool_node.ForeColor = Color.Blue  
        search_any_value_tool_node = TreeNode(tool_str_34(lan))
        search_any_value_tool_node.ForeColor = Color.Blue  
        search_node_value.Nodes.Add(search_value_of_instance_parameter_tool_node)
        search_node_value.Nodes.Add(search_any_value_tool_node)

        # [UI:TREEVIEW:COMPARISON_CHECK] Create "Comparison Check" node under "Parameter Value"
        comparison_check_node_value = TreeNode(str_18(lan))
        comparison_check_node_value.Tag = [self.seeds["gphokkhmbnvnbcvcsgfd1dsc14d555"]]
        parameter_value_node.Nodes.Add(comparison_check_node_value)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Comparison Check"
        pair_compare_tool_node = TreeNode(tool_str_35(lan))
        pair_compare_tool_node.ForeColor = Color.Blue  
        multi_compare_tool_node = TreeNode(tool_str_36(lan))
        multi_compare_tool_node.ForeColor = Color.Blue  
        comparison_check_node_value.Nodes.Add(pair_compare_tool_node)
        comparison_check_node_value.Nodes.Add(multi_compare_tool_node)

        # [UI:TREEVIEW:SET] Create "Set" node under "Parameter Value"
        set_node_value = TreeNode(str_19(lan))
        set_node_value.Tag = [self.seeds["wqdcvcv52b9b8jh89hjhj8f5dscefe"]]
        parameter_value_node.Nodes.Add(set_node_value)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Set"
        set_same_value_tool_node = TreeNode(tool_str_37(lan))
        set_same_value_tool_node.ForeColor = Color.Blue  
        set_copy_value_tool_node = TreeNode(tool_str_38(lan))
        set_copy_value_tool_node.ForeColor = Color.Blue  
        set_listmaker_tool_node = TreeNode(tool_str_39(lan))
        set_listmaker_tool_node.ForeColor = Color.Blue  
        set_batch_dataset_tool_node = TreeNode(tool_str_40(lan))
        set_batch_dataset_tool_node.ForeColor = Color.Blue  
        id_generator_tool_node = TreeNode(tool_str_41(lan))
        id_generator_tool_node.ForeColor = Color.Blue  
        set_node_value.Nodes.Add(set_same_value_tool_node)
        set_node_value.Nodes.Add(set_copy_value_tool_node)
        set_node_value.Nodes.Add(set_listmaker_tool_node)
        set_node_value.Nodes.Add(set_batch_dataset_tool_node)
        set_node_value.Nodes.Add(id_generator_tool_node)

        # [UI:TREEVIEW:EDIT] Create "Edit" node under "Parameter Value"
        edit_node_value = TreeNode(str_20(lan))
        edit_node_value.Tag = [self.seeds["bnvbnsdcadasc41xcy1xcy1cyy5y5c"]]
        parameter_value_node.Nodes.Add(edit_node_value)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Edit"
        value_editor_tool_node = TreeNode(tool_str_42(lan))
        value_editor_tool_node.ForeColor = Color.Blue  
        specialcharacter_editor_tool_node = TreeNode(tool_str_43(lan))
        specialcharacter_editor_tool_node.ForeColor = Color.Blue  
        edit_node_value.Nodes.Add(value_editor_tool_node)
        edit_node_value.Nodes.Add(specialcharacter_editor_tool_node)

        # [UI:TREEVIEW:DELETE] Create "Delete" node under "Parameter Value"
        delete_node_value = TreeNode(str_12(lan))
        delete_node_value.Tag = [self.seeds["retetztdssddxvxcvxc4x1cvb8vnb1"]]
        parameter_value_node.Nodes.Add(delete_node_value)

        # [UI:TREEVIEW:TOOLS] Create tool nodes under "Delete"
        delete_value_tool_node = TreeNode(tool_str_44(lan))
        delete_value_tool_node.ForeColor = Color.Blue  
        delete_character_in_value_tool_node = TreeNode(tool_str_45(lan))
        delete_character_in_value_tool_node.ForeColor = Color.Blue  
        delete_node_value.Nodes.Add(delete_value_tool_node)
        delete_node_value.Nodes.Add(delete_character_in_value_tool_node)

        # [UI:TREEVIEW:PARAMETER_VALUE] Add "Parameter Value" to "Element Parameter"
        sub_node2.Nodes.Add(parameter_value_node)

        # [UI:TREEVIEW:ELEMENT_PARAMETER] Add "Element Parameter" to "BIM Pars Tools"
        node1.Nodes.Add(sub_node2)

        # [UI:TREEVIEW:SCRIPTS] Create "Scripts" node
        node2 = TreeNode(str_21(lan))
        node2.Tag = [self.seeds["cvxvdgsxdfgrgf51vs4dcs1d5v2sdc"]]
        
        # [UI:TREEVIEW:PACKAGE] Create "Package" node
        node3 = TreeNode(str_22(lan))
        node3.ForeColor = Color.Gray
        self.tree_view.BeforeSelect += self.prevent_package_selection

        # [UI:TREEVIEW:ADD_NODES] Add nodes to the TreeView
        self.tree_view.Nodes.Add(node1)
        self.tree_view.Nodes.Add(node2)
        self.tree_view.Nodes.Add(node3)

        # [UI:TREEVIEW:EVENTS] Attach event handlers for node selection
        self.tree_view.AfterSelect += self.on_node_select
        self.tree_view.AfterSelect += self.load_local_scripts
        
        # [UI:TREEVIEW:ADD_TO_GROUPBOX] Add the TreeView to the GroupBox
        self.group_box.Controls.Add(self.tree_view)
        self.Controls.Add(self.group_box)

        # [UI:TREEVIEW:REFRESH] Refresh the TreeView
        self.tree_view.Refresh()

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Tree View Node Configuration
        #
        # Handles tree view node configuration:
        # - Sets node icons
        ###############################################################################

        # [UI:TREEVIEW:ICONS] Set default and selected icons for the TreeView
        self.tree_view.ImageIndex = 1    
        self.tree_view.SelectedImageIndex = 0  
        
        # [UI:TREEVIEW:NODE_ICONS] Assign specific icons to nodes
        node1.ImageIndex = 2  
        node2.ImageIndex = 3  
        node3.ImageIndex = 24  
        info_node.ImageIndex = 4  
        sub_node1.ImageIndex = 5  
        sub_node2.ImageIndex = 6  
        sub_node1_1.ImageIndex = 7  
        reduce_selected_node.ImageIndex = 8  
        delete_node.ImageIndex = 9  
        parameter_self_node.ImageIndex = 10  
        parameter_value_node.ImageIndex = 11  
        filter_node.ImageIndex = 12  
        by_parameter_node.ImageIndex = 13  
        all_elements_node.ImageIndex = 14  
        excel_node.ImageIndex = 15  
        search_node_self.ImageIndex = 16  
        check_node_self.ImageIndex = 17  
        delete_node_self.ImageIndex = 18  
        search_node_value.ImageIndex = 19  
        comparison_check_node_value.ImageIndex = 20  
        set_node_value.ImageIndex = 21  
        edit_node_value.ImageIndex = 22  
        delete_node_value.ImageIndex = 23  

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Tree Structure Toolstrip Initialization
        #
        # Handles tree structure toolstrip initialization:
        # - Creates and configures toolstrip buttons
        # - Manages button events and tooltips
        ###############################################################################

        # [UI:TOOLSTRIP:INIT] Create and configure the tree structure toolstrip
        self.tree_structure_toolstrip = ToolStrip()
        self.tree_structure_toolstrip.Dock = DockStyle.Left.Bottom  
        
        # [UI:TOOLSTRIP:ICONS] Add icons for the tree structure toolstrip buttons
        tree_structure_toolstrip_icons = [
            expand_tree_button(), #0
            close_tree_button(), #1 
            user_manual_button(), #2  
            video_youtube_button(), #3  
            github_button(), #4 
            report_bug_button(), #5 
        ]

        # [UI:TOOLSTRIP:BUTTONS] Add buttons with icons to the tree structure toolstrip
        for index, icon_path3 in enumerate(tree_structure_toolstrip_icons):
            icon_image3 = Image.FromFile(icon_path3)
            button3 = ToolStripButton()
            button3.Image = icon_image3  
            button3.DisplayStyle = ToolStripItemDisplayStyle.Image  
            button3.Size = Size(40, 40)  
            
            # [UI:TOOLSTRIP:TOOLTIPS] Set tooltips and click events
            if icon_path3 == tree_structure_toolstrip_icons[0]:  
                button3.ToolTipText = tip_1(lan)
                button3.Click += self.expand_tree_view_structure
                self.expand_tree_button = button3  
            elif icon_path3 == tree_structure_toolstrip_icons[1]:  
                button3.ToolTipText = tip_2(lan)
                button3.Click += self.collapse_tree_view_structure
                self.collapse_tree_button = button3  
            elif icon_path3 == tree_structure_toolstrip_icons[2]:  
                button3.ToolTipText = tip_3(lan)
                button3.Click += self.bimpars_documentation
                self.documentation_button = button3  
                button3.Enabled = False
            elif icon_path3 == tree_structure_toolstrip_icons[3]:  
                button3.ToolTipText = tip_4(lan)
                button3.Click += self.bimpars_video
                self.play_video_button = button3  
                button3.Enabled = False
            elif icon_path3 == tree_structure_toolstrip_icons[4]:  
                button3.ToolTipText = tip_5(lan)
                button3.Click += self.bimpars_github
                self.open_github_button = button3  
                button3.Enabled = False
            elif icon_path3 == tree_structure_toolstrip_icons[5]:  
                button3.ToolTipText = tip_6(lan)
                button3.Click += self.bimpars_report_bug
                self.report_bug_button = button3  
                button3.Enabled = False

            self.tree_structure_toolstrip.Items.Add(button3)  

            # [UI:TOOLSTRIP:SEPARATOR] Add a separator after the first two buttons
            if index == 1:  
                self.tree_structure_toolstrip.Items.Add(ToolStripSeparator())  

        # [UI:TOOLSTRIP:EVENTS] Attach event handlers
        self.tree_view.AfterSelect += self.on_treeview_node_select
        
        # [UI:TOOLSTRIP:ADD] Add the TreeView and ToolStrip to the GroupBox
        self.group_box.Controls.Add(self.tree_view)
        self.group_box.Controls.Add(self.tree_structure_toolstrip)

        # [UI:TOOLSTRIP:ADD_TO_TAB] Add the GroupBox to Tab 1
        self.tab1.Controls.Add(self.group_box)

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Main Toolstrip Initialization
        #
        # Handles main toolstrip initialization:
        # - Creates and configures toolstrip buttons
        # - Manages button events and tooltips
        ###############################################################################

        # [UI:TOOLSTRIP:INIT] Create and configure the main toolstrip
        self.tool_strip = ToolStrip()

        # [UI:TOOLSTRIP:ICONS] Add icons for the ToolStrip buttons
        toolbar_icon_paths = [
            local_memory_in_button(), #0
            local_memory_out_button(), #1
            save_app_button(), #2
            download_app_button(), #3
            import_app_button(), #4
            export_app_button(), #5
            select_elements_icon(), #6
            reduce_selected_elements_icon(), #7
            xml_app_button(), #8
            html_app_button(), #9
            csv_app_button(), #10
            python_icon(), #11
            run_directory_icon() #12
        ]

        # [UI:TOOLSTRIP:TOOLTIPS] ToolTip texts for the ToolStrip buttons
        tooltips = [
            tip_7(lan), #0
            tip_8(lan), #1
            tip_9(lan), #2         
            tip_10(lan),#3          
            tip_11(lan),#4         
            tip_12(lan),#5       
            tip_13(lan),#6
            tip_14(lan) #7
        ]

        # [UI:TOOLSTRIP:BUTTONS] Add buttons with icons to the ToolStrip
        for i, icon_path in enumerate(toolbar_icon_paths):
            icon_image = Image.FromFile(icon_path)
            
            if i == 0:
                button = ToolStripButton()
                button.Image = icon_image  
                button.DisplayStyle = ToolStripItemDisplayStyle.Image  
                button.Size = Size(40, 40)  
                self.tool_strip.ImageScalingSize = Size(20, 20)  
                button.Padding = Padding(4)  
                button.ToolTipText = tooltips[i]  
                button.Click += lambda sender, event, idx=i: self.on_toolstrip_button_click(idx)
                self.tool_strip.Items.Add(button)

            elif i == 1:
                load_button = ToolStripDropDownButton()
                load_button.Image = icon_image  
                load_button.DisplayStyle = ToolStripItemDisplayStyle.Image  
                load_button.Size = Size(40, 40)  
                load_button.Padding = Padding(4)  
                load_button.ToolTipText = tooltips[i]  
                
                # [UI:TOOLSTRIP:LOAD_DROPDOWN] Add dropdown items for load actions
                load_item_a = load_button.DropDownItems.Add(tool_str_47(lan), None, self.load_and_select_elements)
                load_item_a.ToolTipText = tool_tip_47(lan)
                load_item_b = load_button.DropDownItems.Add(tool_str_48(lan), None, self.load_and_reduce_selected_elements)
                load_item_b.ToolTipText = tool_tip_48(lan)

                # [UI:TOOLSTRIP:LOAD_ICONS] Set icons for dropdown items
                load_item_a.Image = Image.FromFile(toolbar_icon_paths[6])  
                load_item_b.Image = Image.FromFile(toolbar_icon_paths[7])  

                self.tool_strip.Items.Add(load_button)
                separator = ToolStripSeparator()
                self.tool_strip.Items.Add(separator)

            elif i == 2:
                button = ToolStripButton()
                button.Image = icon_image  
                button.DisplayStyle = ToolStripItemDisplayStyle.Image  
                button.Size = Size(40, 40)  
                button.Padding = Padding(4)  
                button.ToolTipText = tooltips[i]  
                button.Click += lambda sender, event, idx=i: self.on_toolstrip_button_click(idx)
                self.tool_strip.Items.Add(button)

            elif i == 3:
                button = ToolStripButton()
                button.Image = icon_image  
                button.DisplayStyle = ToolStripItemDisplayStyle.Image  
                button.Size = Size(40, 40)  
                button.Padding = Padding(4)  
                button.ToolTipText = tooltips[i]  
                button.Click += lambda sender, event, idx=i: self.on_toolstrip_button_click(idx)
                self.tool_strip.Items.Add(button)
                separator = ToolStripSeparator()
                self.tool_strip.Items.Add(separator)

            elif i == 4:
                import_button = ToolStripDropDownButton()
                import_button.Image = icon_image  
                import_button.DisplayStyle = ToolStripItemDisplayStyle.Image  
                import_button.Size = Size(40, 40)  
                import_button.Padding = Padding(4)  
                import_button.ToolTipText = tooltips[i]  
                
                # [UI:TOOLSTRIP:IMPORT_DROPDOWN] Add dropdown items for import actions
                import_item_xml = import_button.DropDownItems.Add(tool_str_49(lan), None, self.import_seletion_from_xml)
                import_item_xml.ToolTipText = tool_tip_49(lan)
                import_item_html = import_button.DropDownItems.Add(tool_str_50(lan), None, self.import_seletion_from_html)
                import_item_html.ToolTipText = tool_tip_50(lan)

                # [UI:TOOLSTRIP:IMPORT_ICONS] Set icons for dropdown items
                import_item_xml.Image = Image.FromFile(toolbar_icon_paths[8])
                import_item_html.Image = Image.FromFile(toolbar_icon_paths[9])

                self.tool_strip.Items.Add(import_button)

            elif i == 5:
                export_button = ToolStripDropDownButton()
                export_button.Image = icon_image  
                export_button.DisplayStyle = ToolStripItemDisplayStyle.Image  
                export_button.Size = Size(40, 40)  
                export_button.Padding = Padding(4)  
                export_button.ToolTipText = tooltips[i]  
                
                # [UI:TOOLSTRIP:EXPORT_DROPDOWN] Add dropdown items for export actions
                export_item_xml = export_button.DropDownItems.Add(tool_str_51(lan), None, self.export_seletion_to_xml)
                export_item_xml.ToolTipText = tool_tip_51(lan)
                export_item_csv = export_button.DropDownItems.Add(tool_str_52(lan), None, self.export_seletion_to_csv)
                export_item_csv.ToolTipText = tool_tip_52(lan)

                # [UI:TOOLSTRIP:EXPORT_ICONS] Set icons for dropdown items
                export_item_xml.Image = Image.FromFile(toolbar_icon_paths[8])
                export_item_csv.Image = Image.FromFile(toolbar_icon_paths[10])

                self.tool_strip.Items.Add(export_button)

            # [UI:TOOLSTRIP:SEPARATOR] Add separators after every 2 buttons
            #if i % 2 == 1 and i < len(toolbar_icon_paths) - 1:  
                separator = ToolStripSeparator()
                self.tool_strip.Items.Add(separator)

            elif i == 11:
                button = ToolStripButton()
                button.Image = icon_image  
                button.DisplayStyle = ToolStripItemDisplayStyle.Image  
                button.Size = Size(40, 40)  
                button.Padding = Padding(4)  
                button.ToolTipText = tooltips[6] 
                button.Click += lambda sender, event, idx=i: self.on_toolstrip_button_click(idx)
                self.tool_strip.Items.Add(button)

            elif i == 12:
                self.run_directory_button = ToolStripButton()  
                self.run_directory_button.Image = icon_image  
                self.run_directory_button.DisplayStyle = ToolStripItemDisplayStyle.Image  
                self.run_directory_button.Size = Size(40, 40)  
                self.run_directory_button.Padding = Padding(4)  
                self.run_directory_button.ToolTipText = tooltips[7]  
                self.run_directory_button.Click += lambda sender, event, idx=i: self.on_toolstrip_button_click(idx)
                self.tool_strip.Items.Add(self.run_directory_button)

                # [UI:TOOLSTRIP:DIRECTORY_CHECK] Check the directory file to enable/disable the button
                self.check_directory_file()

                separator = ToolStripSeparator()
                self.tool_strip.Items.Add(separator)

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Secondary Toolstrip Initialization
        #
        # Handles secondary toolstrip initialization:
        # - Creates and configures toolstrip buttons
        # - Manages button events and tooltips
        ###############################################################################

        # [UI:TOOLSTRIP:SECONDARY] Create and configure the secondary toolstrip
        self.tool_strip2 = ToolStrip()

        # [UI:TOOLSTRIP:ICONS] Add icons for the secondary toolstrip buttons
        toolbar_icon_paths2 = [
            select_elements_icon(), #0
            deselect_elements_button(), #1 
            isolate_elements_button(), #2
            deisolate_elements_button(), #3
            color_elements_button(), #4
            decolor_elements_button(), #5
            pin_button(), #6
            unpin_button(), #7
        ]

        # [UI:TOOLSTRIP:TOOLTIPS] ToolTip texts for the secondary toolstrip buttons
        tooltips2 = [
            tip_15(lan), #0
            tip_16(lan), #1
            tip_17(lan), #2   
            tip_18(lan), #3  
            tip_19(lan), #4     
            tip_20(lan), #5  
            tip_21(lan), #6    
            tip_22(lan), #7   
        ]

        # [UI:TOOLSTRIP:BUTTONS] Add buttons with icons to the secondary toolstrip
        for i, icon_path in enumerate(toolbar_icon_paths2):
            icon_image = Image.FromFile(icon_path)
            button = ToolStripButton()
            button.Image = icon_image  
            button.DisplayStyle = ToolStripItemDisplayStyle.Image  
            button.Size = Size(40, 40)  
            self.tool_strip2.ImageScalingSize = Size(20, 20)  
            button.Padding = Padding(4) 

            # [UI:TOOLSTRIP:TOOLTIPS] Set the tooltip for each button
            button.ToolTipText = tooltips2[i]

            # [UI:TOOLSTRIP:EVENTS] Assign an event handler for each button (passing button index)
            button.Click += lambda sender, event, idx=i: self.on_toolstrip2_button_click(idx)
            self.tool_strip2.Items.Add(button)

            # [UI:TOOLSTRIP:SEPARATOR] Add separator between buttons, except the last one
            if i == 1 or i == 2 and i == 1 or i == 3 and i == 3 or i == 5: 
                self.tool_strip2.Items.Add(ToolStripSeparator())

        
        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Toolstrip Addition
        #
        # Handles toolstrip addition to the tab:
        # - Adds toolstrips to the tab
        ###############################################################################

        # [UI:TOOLSTRIP:ADD] Add toolstrips to the tab
        self.tab1.Controls.Add(self.tool_strip)
        self.tab1.Controls.Add(self.tool_strip2)

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Icon Group Definition
        #
        # Handles icon group definition:
        # - Organizes icons, tooltips, and labels
        ###############################################################################
        
        # [UI:GROUPBOX:SETUP] Create and configure the GroupBox for tools
        self.action_group_box = GroupBox()
        self.action_group_box.Text = str_23(lan)
        self.action_group_box.Width = 320 
        self.action_group_box.Height = 495  
        self.action_group_box.Location = Point(self.group_box.Right + 10, 35)
        self.action_group_box.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Bottom 

        # [UI:PANEL:SETUP] Create and configure the panel for icons
        self.icon_panel = Panel()
        self.icon_panel.Size = Size(310, 448)  
        self.icon_panel.Location = Point(5, 20)  
        self.icon_panel.AutoScroll = True  

        # [UI:ICON_GROUPS] Initialize icon groups with tool icons, strings, and tooltips
        self.icon_groups = {
            self.seeds["d526a5s4d6asd4a42sdasdaa526sda"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    element_id_app_tool_icon(),
                    creator_finder_app_tool_icon(),
                    information_app_tool_icon(),
                    active_view_app_tool_icon(),

                    hierarchy_app_tool_icon(),
                    dudul_app_tool_icon(),
                    by_type_app_tool_icon(),

                    search_for_value_of_instance_parameters_app_tool_icon(),
                    existance_of_parameters_values_app_tool_icon(),

                    all_elements_in_selected_categories_app_tool_icon(),
                    all_elements_in_selected_views_app_tool_icon(),
                    all_elements_of_selected_levels_app_tool_icon(),
                    ownership_of_elements_app_tool_icon(),
                    unbound_rooms_app_tool_icon(),
                    mirrored_doors_app_tool_icon(),

                    ids_from_excel_app_tool_icon(),

                    by_id_app_tool_icon(),
                    all_elements_in_selected_categories_app_tool_icon(),
                    search_for_value_of_instance_parameters_app_tool_icon(),
                    existance_of_parameters_values_app_tool_icon(),

                    by_id_app_tool_icon(),
                    ids_from_excel_app_tool_icon(),
                    by_type_app_tool_icon(),
                    all_direct_shape_elements_app_tool_icon(),
                    all_elements_in_selected_categories_app_tool_icon(),

                    search_value_of_parameters_by_filter_app_tool_icon(),
                    search_value_of_parameters_by_filter_for_family_document_app_tool_icon(),
                    snipe_parameter_value_app_tool_icon(),
                    snipe_parameter_value_for_family_document_app_tool_icon(),
                    element_dictionary_app_tool_icon(),

                    existance_of_parameters_values_app_tool_icon(),
                    check_parameter_against_category_app_tool_icon(),

                    delete_parameter_completely_from_the_model_app_tool_icon(),

                    search_for_value_of_instance_parameters_app_tool_icon(),
                    search_for_any_value_app_tool_icon(),

                    pair_comparer_app_tool_icon(),
                    comparer_of_multiple_elements_app_tool_icon(),

                    same_value_for_all_selected_elements_app_tool_icon(),
                    copy_from_one_parameter_to_another_parameter_app_tool_icon(),
                    list_makers_of_values_from_excel_app_tool_icon(),
                    batch_parameter_set_using_dataset_app_tool_icon(),
                    id_generator_app_tool_icon(),

                    parameter_value_editor_app_tool_icon(),
                    parameter_value_editor_for_special_characters_app_tool_icon(),

                    value_of_parameter_for_selected_elements_app_tool_icon(),
                    desired_character_in_value_of_parameter_for_selected_elements_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_1(lan),
                    tool_str_2(lan),
                    tool_str_46(lan),
                    tool_str_3(lan),
                    tool_str_4(lan),
                    tool_str_5(lan),
                    tool_str_6(lan),
                    tool_str_7(lan),
                    tool_str_8(lan),
                    tool_str_9(lan),
                    tool_str_10(lan),
                    tool_str_11(lan),
                    tool_str_12(lan),
                    tool_str_13(lan),
                    tool_str_14(lan),
                    tool_str_15(lan),
                    tool_str_16(lan),
                    tool_str_17(lan),
                    tool_str_18(lan),
                    tool_str_19(lan),
                    tool_str_20(lan),
                    tool_str_21(lan),
                    tool_str_22(lan),
                    tool_str_23(lan),
                    tool_str_24(lan),
                    tool_str_25(lan),
                    tool_str_26(lan),
                    tool_str_27(lan),
                    tool_str_28(lan),
                    tool_str_29(lan),
                    tool_str_30(lan),
                    tool_str_31(lan),
                    tool_str_32(lan),
                    tool_str_33(lan),
                    tool_str_34(lan),
                    tool_str_35(lan),
                    tool_str_36(lan),
                    tool_str_37(lan),
                    tool_str_38(lan),
                    tool_str_39(lan),
                    tool_str_40(lan),
                    tool_str_41(lan),
                    tool_str_42(lan),
                    tool_str_43(lan),
                    tool_str_44(lan),
                    tool_str_45(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_1(lan),
                    tool_tip_2(lan),
                    tool_tip_46(lan),
                    tool_tip_3(lan),
                    tool_tip_4(lan),
                    tool_tip_5(lan),
                    tool_tip_6(lan),
                    tool_tip_7(lan),
                    tool_tip_8(lan),
                    tool_tip_9(lan),
                    tool_tip_10(lan),
                    tool_tip_11(lan),
                    tool_tip_12(lan),
                    tool_tip_13(lan),
                    tool_tip_14(lan),
                    tool_tip_15(lan),
                    tool_tip_16(lan),
                    tool_tip_17(lan),
                    tool_tip_18(lan),
                    tool_tip_19(lan),
                    tool_tip_20(lan),
                    tool_tip_21(lan),
                    tool_tip_22(lan),
                    tool_tip_23(lan),
                    tool_tip_24(lan),
                    tool_tip_25(lan),
                    tool_tip_26(lan),
                    tool_tip_27(lan),
                    tool_tip_28(lan),
                    tool_tip_29(lan),
                    tool_tip_30(lan),
                    tool_tip_31(lan),
                    tool_tip_32(lan),
                    tool_tip_33(lan),
                    tool_tip_34(lan),
                    tool_tip_35(lan),
                    tool_tip_36(lan),
                    tool_tip_37(lan),
                    tool_tip_38(lan),
                    tool_tip_39(lan),
                    tool_tip_40(lan),
                    tool_tip_41(lan),
                    tool_tip_42(lan),
                    tool_tip_43(lan),
                    tool_tip_44(lan),
                    tool_tip_45(lan)
                ]
            },
            self.seeds["2186gfd24g9f8h4fdgbfd68b4df92g"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    element_id_app_tool_icon(),
                    creator_finder_app_tool_icon(),
                    information_app_tool_icon(),
                    active_view_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_1(lan),
                    tool_str_2(lan),
                    tool_str_46(lan),
                    tool_str_3(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_1(lan),
                    tool_tip_2(lan),
                    tool_tip_46(lan),
                    tool_tip_3(lan)
                ]
            },
            self.seeds["weqsd2w6dw6dwe6fd5wx6efw6ewrrd"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    hierarchy_app_tool_icon(),
                    dudul_app_tool_icon(),
                    by_type_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_4(lan),
                    tool_str_5(lan),
                    tool_str_6(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_4(lan),
                    tool_tip_5(lan),
                    tool_tip_6(lan)
                ]
            },
            self.seeds["werdegrzjuziuifgbcvxcxdd5s54df"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    search_for_value_of_instance_parameters_app_tool_icon(),
                    existance_of_parameters_values_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_7(lan),
                    tool_str_8(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_7(lan),
                    tool_tip_8(lan)
                ]
            },
            self.seeds["zujfhgnbbxcvnxnjcgdtjvjkgzrzus"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    all_elements_in_selected_categories_app_tool_icon(),
                    all_elements_in_selected_views_app_tool_icon(),
                    all_elements_of_selected_levels_app_tool_icon(),
                    ownership_of_elements_app_tool_icon(),
                    unbound_rooms_app_tool_icon(),
                    mirrored_doors_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_9(lan),
                    tool_str_10(lan),
                    tool_str_11(lan),
                    tool_str_12(lan),
                    tool_str_13(lan),
                    tool_str_14(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_9(lan),
                    tool_tip_10(lan),
                    tool_tip_11(lan),
                    tool_tip_12(lan),
                    tool_tip_13(lan),
                    tool_tip_14(lan)
                ]
            },
            self.seeds["256sds6s265653x3xyxcxvnmmbf882"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    ids_from_excel_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_15(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_15(lan)
                ]
            },
            self.seeds["mnkfgnbfbjxvgdcfsxc658v6566522"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    by_id_app_tool_icon(),
                    all_elements_in_selected_categories_app_tool_icon(),
                    search_for_value_of_instance_parameters_app_tool_icon(),
                    existance_of_parameters_values_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_16(lan),
                    tool_str_17(lan),
                    tool_str_18(lan),
                    tool_str_19(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_16(lan),
                    tool_tip_17(lan),
                    tool_tip_18(lan),
                    tool_tip_19(lan)
                ]
            },
            self.seeds["56562dfv2cx52c2x2yx25625256993"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    by_id_app_tool_icon(),
                    ids_from_excel_app_tool_icon(),
                    by_type_app_tool_icon(),
                    all_direct_shape_elements_app_tool_icon(),
                    all_elements_in_selected_categories_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_20(lan),
                    tool_str_21(lan),
                    tool_str_22(lan),
                    tool_str_23(lan),
                    tool_str_24(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_20(lan),
                    tool_tip_21(lan),
                    tool_tip_22(lan),
                    tool_tip_23(lan),
                    tool_tip_24(lan)
                ]
            },
            self.seeds["svxcbynvxcbyvbyv2asxa2s565ax56"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    search_value_of_parameters_by_filter_app_tool_icon(),
                    search_value_of_parameters_by_filter_for_family_document_app_tool_icon(),
                    snipe_parameter_value_app_tool_icon(),
                    snipe_parameter_value_for_family_document_app_tool_icon(),
                    element_dictionary_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_25(lan),
                    tool_str_26(lan),
                    tool_str_27(lan),
                    tool_str_28(lan),
                    tool_str_29(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_25(lan),
                    tool_tip_26(lan),
                    tool_tip_27(lan),
                    tool_tip_28(lan),
                    tool_tip_29(lan)
                ]
            },
            self.seeds["5y642c56y2xy8csd765x26y46c7rfg"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    existance_of_parameters_values_app_tool_icon(),
                    check_parameter_against_category_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_30(lan),
                    tool_str_31(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_30(lan),
                    tool_tip_31(lan)
                ]
            },
            self.seeds["mghjmnghbhdffvsdcsd2sdc6sds52s"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    delete_parameter_completely_from_the_model_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_32(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_32(lan)
                ]
            },
            self.seeds["y2242xcvx8cxysdfgvcvbbn5bn8m2v"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    search_for_value_of_instance_parameters_app_tool_icon(),
                    search_for_any_value_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_33(lan),
                    tool_str_34(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_33(lan),
                    tool_tip_34(lan)
                ]
            },
            self.seeds["gphokkhmbnvnbcvcsgfd1dsc14d555"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    pair_comparer_app_tool_icon(),
                    comparer_of_multiple_elements_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_35(lan),
                    tool_str_36(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_35(lan),
                    tool_tip_36(lan)
                ]
            },
            self.seeds["wqdcvcv52b9b8jh89hjhj8f5dscefe"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    same_value_for_all_selected_elements_app_tool_icon(),
                    copy_from_one_parameter_to_another_parameter_app_tool_icon(),
                    list_makers_of_values_from_excel_app_tool_icon(),
                    batch_parameter_set_using_dataset_app_tool_icon(),
                    id_generator_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_37(lan),
                    tool_str_38(lan),
                    tool_str_39(lan),
                    tool_str_40(lan),
                    tool_str_41(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_37(lan),
                    tool_tip_38(lan),
                    tool_tip_39(lan),
                    tool_tip_40(lan),
                    tool_tip_41(lan)
                ]
            },
            self.seeds["bnvbnsdcadasc41xcy1xcy1cyy5y5c"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    parameter_value_editor_app_tool_icon(),
                    parameter_value_editor_for_special_characters_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_42(lan),
                    tool_str_43(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_42(lan),
                    tool_tip_43(lan)
                ]
            },
            self.seeds["retetztdssddxvxcvxc4x1cvb8vnb1"]: {
                self.seeds["81894ycycyycsdcs7146264dfsdcxs"]: [
                    value_of_parameter_for_selected_elements_app_tool_icon(),
                    desired_character_in_value_of_parameter_for_selected_elements_app_tool_icon()
                ],
                self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]: [
                    tool_str_44(lan),
                    tool_str_45(lan)
                ],
                self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]: [
                    tool_tip_44(lan),
                    tool_tip_45(lan)
                ]
            }
        }

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Layout Configuration
        #
        # Handles UI layout configuration:
        # - Adds controls to containers
        # - Configures docking and visibility
        ###############################################################################
        
        # [UI:LAYOUT:CONFIG] Add controls to containers and configure layout
        self.action_group_box.Controls.Add(self.icon_panel)
        self.tab1.Controls.Add(self.action_group_box)  
        
        # [UI:TOOLSTRIP:DOCK] Configure docking for toolstrips
        self.tool_strip2.Dock = DockStyle.Right  
        self.tool_strip.Dock = DockStyle.Top  

        # [UI:PANEL:VISIBILITY] Configure panel visibility and scrolling
        self.icon_panel.Visible = True
        self.icon_panel.AutoScroll = True
        self.icon_panel.BorderStyle = BorderStyle.FixedSingle  

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Tab Page Initialization
        #
        # Handles tab page initialization:
        # - Creates and configures tab pages
        ###############################################################################

        # [UI:TAB:INIT] Initialize and configure tab pages
        self.tab2 = TabPage("")
        self.tab3 = TabPage("")

        # [UI:TAB:ADD] Add tab pages to the tab control
        self.tab_control.TabPages.Add(self.tab1)
        #self.tab_control.TabPages.Add(self.tab2)
        #self.tab_control.TabPages.Add(self.tab3)
        self.Controls.Add(self.tab_control)

        ###############################################################################
        # [APP:DOC:UI MANAGEMENT] Status Strip Initialization
        #
        # Handles status strip initialization:
        # - Creates and configures status strip components
        # - Manages progress bar, labels, and buttons
        ###############################################################################

        # [UI:STATUSSTRIP:INIT] Create and configure the status strip
        self.status_strip = StatusStrip()
        self.status_strip.Dock = DockStyle.Bottom  
        self.Controls.Add(self.status_strip) 

        # [UI:STATUSSTRIP:BIM_PARS_LABEL] Add BIM Pars label with icon
        self.bim_pars_label = ToolStripStatusLabel("")
        self.bim_pars_label.ImageAlign = ContentAlignment.MiddleLeft  
        self.bim_pars_label.Dock = DockStyle.Left
        self.status_strip.Items.Add(self.bim_pars_label)  
        bim_icon_image = Image.FromFile(app_logo_name_icon())
        self.bim_pars_label.Image = bim_icon_image  
        self.bim_pars_label.Font = Font("Arial", 10, FontStyle.Bold)  
        self.bim_pars_label.ForeColor = Color.Blue  
        self.bim_pars_label.BackColor = Color.White
        self.bim_pars_label.Padding = Padding(5)  
        self.bim_pars_label.ImageScaling = ToolStripItemImageScaling.None
        self.bim_pars_label.Click += self.open_bim_pars_url
        self.status_strip.Items.Add(ToolStripSeparator())  

        # [UI:STATUSSTRIP:PYREVIT_LABEL] Add pyRevit label with icon
        self.pyRevit_logo_label = ToolStripStatusLabel(str_bar_1(lan))
        self.pyRevit_logo_label.Image = Image.FromFile(pyrevit_icon())  
        self.pyRevit_logo_label.ImageAlign = ContentAlignment.MiddleLeft  
        self.status_strip.Items.Add(self.pyRevit_logo_label)  
        self.pyRevit_logo_label.Click += self.open_pyRevit_url

        # [UI:STATUSSTRIP:PROGRESS_BAR] Add and configure the progress bar
        self.progress_bar = ToolStripProgressBar()
        self.progress_bar.Minimum = 0  
        self.progress_bar.Maximum = 100  
        self.progress_bar.Value = 0  
        self.progress_bar.AutoSize = False
        self.progress_bar.Width = 120  
        self.progress_bar.Height = 20
        self.timer = Timer()
        self.timer.Interval = 50  # Update interval (50 ms)
        self.timer.Tick += self.update_progress  
        self.is_processing = False  
        self.progress_steps = 0  
        self.progress_bar.Visible = False
        self.status_strip.Items.Add(self.progress_bar)
        self.status_strip.Items.Add(ToolStripSeparator())  

        # [UI:STATUSSTRIP:LICENSE_LABEL] Add license status label
        self.license_status_label = ToolStripStatusLabel(str_bar_2(lan)) 
        self.license_status_label.Image = Image.FromFile(loading_user_app_icon())  
        self.license_status_label.ImageAlign = ContentAlignment.MiddleLeft  
        self.status_strip.Items.Add(self.license_status_label)  
        self.check_license_status()  

        # [UI:STATUSSTRIP:STATUS_LABEL] Add connection status label
        self.status_label = ToolStripStatusLabel(str_bar_3(lan))
        self.status_label.Image = Image.FromFile(loading_connection_app_icon())  
        self.status_label.ImageAlign = ContentAlignment.MiddleLeft  
        self.status_strip.Items.Add(self.status_label)  
        self.status_strip.Items.Add(ToolStripSeparator()) 
        self.check_internet_connection()  

        # [UI:STATUSSTRIP:SELECTION_COUNT_LABEL] Add selection count label
        self.selection_count_label = ToolStripStatusLabel(str_bar_4(lan) + str(self.last_selection_count))
        self.selection_count_label.Image = Image.FromFile(element_count_app_icon())  
        self.selection_count_label.ImageAlign = ContentAlignment.MiddleLeft 
        self.selection_count_label.AutoSize = True 
        self.status_strip.Items.Add(self.selection_count_label)  
        self.status_strip.Items.Add(ToolStripSeparator())  

        # [UI:STATUSSTRIP:SETTINGS_BUTTON] Add settings button
        self.window_app_settings_button = ToolStripButton()
        self.window_app_settings_button.Image = Image.FromFile(settings_icon())  
        self.window_app_settings_button.ImageAlign = ContentAlignment.MiddleLeft  
        self.window_app_settings_button.AutoSize = True  
        self.window_app_settings_button.Click += self.window_app_settings_click  
        self.status_strip.Items.Add(self.window_app_settings_button)
        self.status_strip.Items.Add(ToolStripSeparator())  

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Directory File Checker
    #
    # Handles directory file checking:
    # - Enables or disables the run directory button
    ###############################################################################
    
    # [APP:UI:DIRECTORY_CHECK] Check the directory file to enable/disable the run directory button
    def check_directory_file(self):
        """
        Checks the directory file to enable or disable the run directory button based on its content.
        """
        file_path = dir_path()
        try:
            with open(file_path, 'r') as file:
                first_line = file.readline().strip()  
                if first_line == "None":
                    self.run_directory_button.Enabled = False  
                else:
                    self.run_directory_button.Enabled = True  
        except Exception as e:
            self.run_directory_button.Enabled = False  
            
    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Toolstrip Button Handler
    #
    # Handles toolstrip button clicks:
    # - Triggers actions based on button index
    ###############################################################################

    # [APP:UI:TOOLSTRIP:HANDLER] Handle toolstrip button clicks
    def on_toolstrip_button_click(self, button_index):
        """
        Handles button clicks on the top toolstrip, triggering actions based on the button index.
        """
        if button_index == 0:
            self.action_1() 
        elif button_index == 2:
            self.action_2()
        elif button_index == 3:
            self.action_3()
        elif button_index == 11:
            self.action_12()
        elif button_index == 12:
            self.action_13()

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Toolstrip Button Handler
    #
    # Handles toolstrip button clicks:
    # - Triggers actions based on button index
    ###############################################################################

    # [APP:UI:TOOLSTRIP2:HANDLER] Handle right toolstrip button clicks
    def on_toolstrip2_button_click(self, button_index):
        """
        Handles button clicks on the right toolstrip, triggering actions based on the button index.
        """
        if button_index == 0:
            self.action_4()
        elif button_index == 1:
            self.action_5()
        elif button_index == 2:
            self.action_6()
        elif button_index == 3:
            self.action_7()
        elif button_index == 4:
            self.action_8()
        elif button_index == 5:
            self.action_9()
        elif button_index == 6:
            self.action_10()
        elif button_index == 7:
            self.action_11()

    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Element Memory Saver
    #
    # Handles element selection saving in memory:
    # - Collects selected elements
    # - Creates XML file
    # - Manages file storage
    ###############################################################################
    
    # [APP:REVIT:SAVE_MEMORY] Save selected elements to an XML file
    def action_1(self):
        """
        Saves the selected Revit elements to an XML file.
        """
        form.start_process()
        from structure.root import lan_path
        lan = lan_path()
        button_text = tip_7(lan)
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [REVIT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('System.Windows.Forms')
            clr.AddReference('System.Drawing')
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitServices')
            clr.AddReference('System')
            import System.Windows.Forms as WinForms
            from System.Windows.Forms import Form, Button, Label, Cursors, PictureBox
            from System.Drawing import Icon, Point, Color, FontStyle, Size, Font, GraphicsUnit, Image
            from Autodesk.Revit.DB import ElementId
            from System.Collections.Generic import List
            from pyrevit import revit, DB, forms
            import getpass
            from datetime import datetime  
            import os
            import sys
            sys.path.append(os.path.dirname(__file__))
            from structure.root import wurl_path, bank, lan_path
            from UI.strings_storage_selection import str_1, str_2, str_3, str_4, str_5, str_6
            from UI.url import parsweb
            import xml.etree.ElementTree as ET
            import os
            import getpass

            lan = lan_path()
            wurl= wurl_path()

            try:
                # [REVIT:ACTIVE_DOCUMENT] Get active document and selected elements
                doc = __revit__.ActiveUIDocument.Document
                selected_elements = __revit__.ActiveUIDocument.Selection.GetElementIds()
                
                # [REVIT:SELECTION_CHECK] Check if any elements are selected
                if len(selected_elements) == 0:
                    forms.alert(str_5(lan))
                    sys.exit()

                # [REVIT:ELEMENT_IDS] Create a list to store the element IDs
                element_ids = List[ElementId]()
                for element_id in selected_elements:
                    element_ids.Add(element_id)
                
                # [REVIT:NEW_IDS] Get new IDs as a set
                new_ids = set(str(element_id.IntegerValue) for element_id in element_ids)

                # [REVIT:SHOW_ELEMENTS] Show selected elements
                revit.uidoc.ShowElements(element_ids)

                # [REVIT:METADATA] Prepare metadata
                model_path = revit.doc.PathName if revit.doc.PathName else ""
                model_name = revit.doc.Title
                current_user = getpass.getuser()
                file_name = 'MEMORY_' + model_name
                target_folder = bank()
                if target_folder:
                    file_path = os.path.join(target_folder, file_name + '.xml')
                    existing_ids = set()
                    
                    # [XML:READ_EXISTING] Try to read existing XML file if it exists
                    if os.path.exists(file_path):
                        try:
                            tree = ET.parse(file_path)
                            root = tree.getroot()
                            ids_element = root.find(".//IDs")
                            if ids_element is not None and ids_element.text:
                                existing_ids = set(ids_element.text.split('+'))
                        except ET.ParseError:
                            pass
                    
                    # [XML:COMBINE_IDS] Combine existing and new IDs
                    all_ids = existing_ids.union(new_ids)
                    combined_ids = '+'.join(sorted(all_ids))

                    # [XML:CREATE_STRUCTURE] Create new XML Structure
                    root = ET.Element("RevitData")

                    # [XML:ADD_METADATA] Add Metadata to XML
                    ET.SubElement(root, "ModelPath").text = model_path
                    ET.SubElement(root, "ModelName").text = model_name
                    ET.SubElement(root, "User").text = current_user
                    
                    # [XML:ELEMENTS_SECTION] Elements Section
                    elements = ET.SubElement(root, "Elements")
                    ids_element = ET.SubElement(elements, "IDs")
                    ids_element.text = combined_ids

                    # [XML:WRITE_FILE] Write XML to file
                    tree = ET.ElementTree(root)
                    tree.write(file_path, encoding='utf-8', xml_declaration=True)

                    # [UI:STATUS_MESSAGE] Status message
                    message = str_6(lan, model_path, model_name, current_user)
                    MessageBox.Show(message, str_1(lan))

            except StopIteration:
                pass
            except Exception as e:
                pass
            except SystemExit:
                pass
                
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
                
        except Exception as e:
            pass
            self.Show()
        
    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Element Selection Saver
    #
    # Handles element selection saving:
    # - Collects selected elements
    # - Creates XML file
    # - Manages file storage
    ###############################################################################
    
    # [APP:REVIT:SAVE_SELECTION] Save selected elements to an XML file
    def action_2(self):
        """
        Saves the selected Revit elements to an XML file.
        """
        form.start_process()
        
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [REVIT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('RevitAPI')
            clr.AddReference('System')
            from Autodesk.Revit.DB import ElementId
            from System.Collections.Generic import List
            from pyrevit import revit, forms
            import getpass
            from datetime import datetime  
            import os
            import sys
            import xml.etree.ElementTree as ET  
            sys.path.append(os.path.dirname(__file__))
            from sajdmo.forms.text import text_2input
            from structure.root import wurl_path, loadlist, save_back, save_icon, lan_path, cancel_icon, ok_icon
            from UI.strings_save_selection import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12
            from UI.url import parsweb

            lan = lan_path()
            wurl = wurl_path()

            # [XML:INDENT] Recursive function to pretty-print the XML
            def indent_xml(elem, level=0):
                """
                Recursively formats an XML element with indentation for readability.
                """
                indent = "    "  
                i = "\n" + level * indent
                if len(elem):
                    if not elem.text or not elem.text.strip():
                        elem.text = i + indent
                    if not elem.tail or not elem.tail.strip():
                        elem.tail = i
                    for child in elem:
                        indent_xml(child, level + 1)
                    if not child.tail or not child.tail.strip():
                        child.tail = i
                else:
                    if level and (not elem.tail or not elem.tail.strip()):
                        elem.tail = i

            try:
                # [REVIT:ACTIVE_DOCUMENT] Get active document and selected elements
                doc = __revit__.ActiveUIDocument.Document
                selected_elements = __revit__.ActiveUIDocument.Selection.GetElementIds()

                # [REVIT:SELECTION_CHECK] Check if any elements are selected
                if len(selected_elements) == 0:
                    forms.alert(str_1(lan))
                    sys.exit()

                # [REVIT:ELEMENT_IDS] Create a list to store the element IDs
                element_ids = List[ElementId]()
                for element_id in selected_elements:
                    element_ids.Add(element_id)
                integer_ids = [element_id.IntegerValue for element_id in element_ids]

                # [REVIT:SHOW_ELEMENTS] Show selected elements
                revit.uidoc.ShowElements(element_ids)

                # [UI:SAVE_FORM] Open save form for user input
                icon_path = save_icon()
                search_image_path = save_back()
                ok_icon_path = ok_icon()
                cancel_icon_path = cancel_icon()
                parameter_label = str_2(lan)
                parameter_label2 = str_3(lan)
                window_name = str_4(lan)
                url = parsweb(wurl)
                
                with forms.ProgressBar(title='', indeterminate=True):
                    comment, file_name = text_2input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, parameter_label2, window_name, url)
                
                if file_name is None:
                    sys.exit()
                
                # [XML:FILE_PATH] Define file path and name
                model_name = revit.doc.Title
                file_name = file_name + "_" + model_name
                target_folder = loadlist()
                if target_folder:
                    file_path = os.path.join(target_folder, "{}.xml".format(file_name))
                    
                    # [XML:CREATE_STRUCTURE] Create XML structure
                    root = ET.Element("RevitSelection")
                    
                    # [XML:HEADER_SECTION] Add header section to XML
                    header = ET.SubElement(root, "Header")
                    ET.SubElement(header, "Date").text = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    ET.SubElement(header, "User").text = getpass.getuser() or "Unknown User"
                    ET.SubElement(header, "ModelPath").text = revit.doc.PathName
                    ET.SubElement(header, "ModelName").text = model_name
                    ET.SubElement(header, "Comment").text = comment
                    
                    # [XML:ELEMENTS_SECTION] Add elements section to XML
                    elements = ET.SubElement(root, "Elements")
                    for element_id in integer_ids:
                        element = ET.SubElement(elements, "Element")
                        ET.SubElement(element, "ID").text = str(element_id)
                    
                    # [XML:INDENT_XML] Apply indentation to XML
                    indent_xml(root)
                    
                    # [XML:WRITE_FILE] Write XML to file
                    tree = ET.ElementTree(root)
                    tree.write(file_path, encoding='utf-8', xml_declaration=True)
                    
                    # [UI:STATUS_MESSAGE] Show status message
                    MessageBox.Show(str_10(lan), str_11(lan))

            except StopIteration:
                pass
            except Exception as e:
                MessageBox.Show(str(e),str_12(lan))
                pass
            except SystemExit:
                pass

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
                
        except Exception as e:
            pass
            self.Show()
        
    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Element Selection Loader
    #
    # Handles element selection loading:
    # - Loads XML files
    # - Parses element IDs
    # - Displays elements in Revit
    # - Manages file deletion
    ###############################################################################
    
    # [APP:REVIT:LOAD_SELECTION] Loads a selection of Revit elements from an XML file
    def action_3(self):
        """
        Loads a selection of Revit elements and displays them in the Revit view.
        """
        form.start_process()
        from structure.root import lan_path
        lan = lan_path()
        button_text = tip_10(lan)

        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [REVIT:IMPORTS] Import necessary libraries
            import Autodesk.Revit.DB as DB
            from System.Collections.Generic import List
            from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
            from pyrevit import forms, revit, script
            import getpass
            from datetime import datetime  
            import os
            import sys
            import xml.etree.ElementTree as ET  
            sys.path.append(os.path.dirname(__file__))
            from structure.root import loadselection_icon, loadlist, lan_path
            from UI.strings_load_selection import str_1, str_2, str_3, str_4, str_5, str_6, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21

            lan = lan_path()

            try:
                # [XML:LOAD_DIRECTORY] Load directory and list XML files
                target_folder = loadlist()
                file_names = [file for file in os.listdir(target_folder) if file.endswith('.xml')]
                model_name = revit.doc.Title

                # [UI:FILE_GROUPS] Organize files based on the model name
                groups = {
                    str_1(lan): [os.path.splitext(f)[0] for f in file_names if model_name in f],
                    str_2(lan): [os.path.splitext(f)[0] for f in file_names if model_name not in f]
                }

                # [UI:SELECT_FILE] Display selection dialog
                selected_file = forms.SelectFromList.show(
                    groups,
                    title=str_3(lan),
                    group_selector_title=str_4(lan),
                    multiselect=False,
                    button_name=str_5(lan)
                )
                
                # [XML:FILE_PATH] Find the selected file path
                selected_file_path = None
                if selected_file:
                    selected_file_name = selected_file + ".xml"
                    selected_file_path = os.path.join(target_folder, selected_file_name)
                
                if not selected_file_path:
                    MessageBox.Show(str_6(lan))
                    sys.exit()

                # [XML:PARSE] Read the XML file
                tree = ET.parse(selected_file_path)
                root = tree.getroot()

                # [XML:PARSE_HEADER] Parse XML header
                header = root.find("Header")
                element_ids = [int(e.text) for e in root.findall("./Elements/Element/ID")]
                comment = header.find("Comment").text if header.find("Comment") is not None else ""
                model_path = header.find("ModelPath").text if header.find("ModelPath") is not None else ""
                model_name = header.find("ModelName").text if header.find("ModelName") is not None else ""
                user_name = header.find("User").text if header.find("User") is not None else "Unknown User"

                # [XML:PARSE_ELEMENTS] Parse XML elements
                output = script.get_output()
                element_id_objects = List[DB.ElementId]()
                for element_id in element_ids:
                    element_id_obj = DB.ElementId(element_id)
                    element_id_objects.Add(element_id_obj)
                    output.linkify(element_id_obj)  

                # [REVIT:DISPLAY_ELEMENTS] Display the elements in Revit
                revit.uidoc.Selection.SetElementIds(element_id_objects)
                if element_id_objects.Count > 0:
                    revit.uidoc.ShowElements(element_id_objects[0])

                # [REVIT:SET_SELECTION] Set the selection and show elements in the Revit view
                for element_id in element_ids:
                    output.linkify(DB.ElementId(element_id))

                # [UI:DELETE_CONFIRMATION] Display a task dialog for delete confirmation
                title = str_14(lan)
                dialog = TaskDialog(title)
                dialog.MainInstruction = ""
                dialog.MainContent = str_15(lan)
                dialog.TitleAutoPrefix = False
                dialog.AllowCancellation = True
                dialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No
                dialog.DefaultButton = TaskDialogResult.None

                result = dialog.Show()
                if result == TaskDialogResult.No:  
                    os.remove(selected_file_path)
                    MessageBox.Show(str_16(lan), str_14(lan))
                elif result == TaskDialogResult.Cancel:  
                    sys.exit()

            except StopIteration:
                pass
            except Exception as e:
                MessageBox.Show(str_21(lan),str_18(lan))
                pass
            except SystemExit:
                pass

            try:
                # [UI:REPORT_TAB] Create a report tab with loaded data
                headers = [str_19(lan), str_20(lan)]
                data = [
                    [str_9(lan), str_10(lan), str_11(lan), str_12(lan), str_13(lan)],
                    [str(selected_file), str(model_path), str(model_name), str(user_name), str(comment)]
                ]
                editable = [False, False]
                self.create_report_tab(headers, data, editable, title=button_text)
            except:
                pass
                
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
                
        except Exception as e:
            pass
            self.Show()
        
    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Element Selector
    #
    # Handles element selection:
    # - Processes selected cell values
    # - Selects elements in Revit
    # - Zooms to selected elements
    ###############################################################################
    
    # [APP:REVIT:SELECT_ELEMENTS] Selects Revit elements based on selected cell values
    def action_4(self):
        """
        Selects Revit elements based on selected cell values.
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            try:
                from System.Collections.Generic import List
                from pyrevit import revit
                import Autodesk.Revit.DB as DB
                from UI.strings_main import str_29, str_30, str_31, str_32
                from structure.root import lan_path

                lan=lan_path()

                # [UI:FIND_GRID] Find the DataGridView in the current tab
                grid = self.find_data_grid_in_current_tab()
                if not grid:
                    MessageBox.Show(str_30(lan), str_29(lan))
                    pass

                # [UI:CHECK_SELECTION] Check if any cells are selected
                if grid.SelectedCells.Count == 0:
                    MessageBox.Show(str_31(lan), str_29(lan))
                    return

                # [REVIT:INIT_ELEMENT_IDS] Initialize the list to hold element IDs
                element_id_objects = List[DB.ElementId]()

                # [REVIT:PROCESS_CELLS] Process selected cells
                for cell in grid.SelectedCells:
                    element_id = cell.Value  
                    
                    # [REVIT:VALIDATE_ID] Check if the value is valid
                    if element_id and str(element_id).isdigit():
                        try:
                            # [REVIT:CONVERT_ID] Convert the value to an ElementId
                            element_id_object = DB.ElementId(int(element_id))
                            element_id_objects.Add(element_id_object)
                        except ValueError:
                            continue

                # [REVIT:SET_SELECTION] Check if we found any valid IDs
                if element_id_objects.Count > 0:

                    # [REVIT:SET_SELECTION] Set the selection in Revit
                    revit.uidoc.Selection.SetElementIds(element_id_objects)
                    
                    # [REVIT:ZOOM_ELEMENTS] Zoom to selected elements
                    revit.uidoc.ShowElements(element_id_objects)
                else:
                    MessageBox.Show(str_32(lan), str_29(lan))

            except Exception as e:
                pass

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Element Deselector
    #
    # Handles element deselection:
    # - Clears current selection
    ###############################################################################
    
    # [APP:REVIT:DESELECT_ELEMENTS] Deselects all elements in Revit
    def action_5(self):
        """
        Deselects all elements in Revit.
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            try:
                from System.Collections.Generic import List
                from pyrevit import revit
                import Autodesk.Revit.DB as DB

                # [REVIT:EMPTY_SELECTION] Create an empty list of ElementIds
                empty_selection = List[DB.ElementId]()
                
                # [REVIT:GET_SELECTION_COUNT] Get current selection count for feedback
                current_selection_count = len(revit.uidoc.Selection.GetElementIds())
                
                # [REVIT:CLEAR_SELECTION] Clear the selection in Revit
                revit.uidoc.Selection.SetElementIds(empty_selection)
                
                if current_selection_count > 0:
                    pass
                else:
                    pass

            except Exception as e:
                pass
      
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Element Isolator
    #
    # Handles element isolation:
    # - Identifies selected elements
    # - Isolates elements in the view
    # - Manages transactions
    ###############################################################################
    
    # [APP:REVIT:ISOLATE_ELEMENTS] Isolates selected elements in the current view
    def action_6(self):
        """
        Isolates the selected elements in the current view of the Revit document.
        """
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            # [REVIT:IMPORTS] Import necessary libraries
            from Autodesk.Revit.DB import ElementId, Transaction
            from Autodesk.Revit.UI import Selection
            from System.Collections.Generic import List
            from structure.root import lan_path
            from UI.strings_main import str_33
            lan= lan_path()

            # [REVIT:ISOLATE_FUNCTION] Function to isolate selected elements
            def isolate_selected_elements(doc, view, uidoc):
                """
                Isolates the selected elements in the view, temporarily hiding all others.
                """
                # [REVIT:GET_SELECTION] Get the selection object from the active document
                selection = uidoc.Selection

                # [REVIT:GET_SELECTED_IDS] Get the currently selected element IDs
                selected_ids = selection.GetElementIds()

                # [REVIT:CHECK_SELECTION] Check if any elements are selected
                if not selected_ids:
                    raise ValueError(str_33(lan))

                # [REVIT:CONVERT_IDS] Convert the selected ElementIds to ICollection[ElementId]
                selected_id_collection = List[ElementId](selected_ids)

                # [REVIT:ISOLATE_ELEMENTS] Isolate the selected elements in the view
                t = Transaction(doc, "Isolate Selected Elements")  
                t.Start()  # Begin the transaction
                view.IsolateElementsTemporary(selected_id_collection)  
                t.Commit()  

            # [REVIT:GET_DOCUMENT] Get the current document and view
            uidoc = __revit__.ActiveUIDocument
            doc = uidoc.Document
            view = doc.ActiveView

            # [REVIT:CALL_ISOLATE] Call the function to isolate selected elements
            isolate_selected_elements(doc, view, uidoc)
            
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()
        
    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Isolation Resetter
    #
    # Handles isolation reset:
    # - Resets temporary view modes
    # - Manages transactions
    ###############################################################################
    
    # [APP:REVIT:RESET_ISOLATION] Resets the isolation of elements in the current view
    def action_7(self):
        """
        Resets the isolation of elements in the current view of the Revit document.
        """
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            # [REVIT:IMPORTS] Import necessary libraries
            from Autodesk.Revit.DB import Transaction, View3D
            from structure.root import lan_path
            from UI.strings_main import str_34

            lan=lan_path()

            # [REVIT:RESET_FUNCTION] Function to reset isolation
            def reset_isolation(doc, view):
                """
                Resets the isolation of elements in a given view if it's a 3D view.
                """

                if isinstance(view, View3D):
                    # [REVIT:START_TRANSACTION] Start a transaction
                    t = Transaction(doc, "Reset Isolation")
                    t.Start()
                    
                    # [REVIT:DEACTIVATE_MODES] Clear temporary view filters
                    view.TemporaryViewModes.DeactivateAllModes()
                    
                    # [REVIT:COMMIT_TRANSACTION] Commit the transaction
                    t.Commit()
                else:
                    raise TypeError(str_34(lan))

            # [REVIT:GET_DOCUMENT] Get the current document and view
            uidoc = __revit__.ActiveUIDocument
            doc = uidoc.Document
            view = doc.ActiveView

            # [REVIT:CALL_RESET] Call the function to reset isolation
            reset_isolation(doc, view)
            
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()
        
    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Color Override Applier
    #
    # Handles color override application:
    # - Identifies selected elements
    # - Applies color overrides
    # - Manages transactions
    ###############################################################################
    
    # [APP:REVIT:COLOR_ELEMENTS] Applies a color override to selected elements
    def action_8(self): 
        """
        Applies a color override to the selected elements in the Revit document.
        """
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            # [REVIT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitAPIUI')
            from Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color, FillPatternElement, FilteredElementCollector
            from pyrevit import revit
            from System.Windows.Forms import ColorDialog
            from structure.root import lan_path
            from UI.strings_main import str_35, str_36
            lan=lan_path()
            doc = revit.doc
            uidoc = revit.uidoc

            # [REVIT:GET_SOLID_PATTERN] Fetches the solid fill pattern
            def get_solid_fill_pattern(doc):
                """
                Fetches the solid fill pattern used for setting a color fill in Revit. 
                """
                fill_pattern_collector = FilteredElementCollector(doc).OfClass(FillPatternElement)
                for pattern in fill_pattern_collector:
                    if pattern.GetFillPattern().IsSolidFill:
                        return pattern.Id
                return None

            # [REVIT:OVERRIDE_COLOR] Applies a color override to specified elements
            def override_element_color(doc, view, element_ids, color):
                """
                Applies a color override to specified elements in a given view.
                """
                solid_fill = get_solid_fill_pattern(doc)
                if not solid_fill:
                    raise Exception(str_35(lan))

                # [REVIT:CREATE_OVERRIDE] Create an override graphic settings object
                ogs = OverrideGraphicSettings()
                ogs.SetProjectionLineColor(color)
                ogs.SetSurfaceForegroundPatternColor(color)
                ogs.SetCutForegroundPatternColor(color)
                ogs.SetSurfaceForegroundPatternId(solid_fill)
                ogs.SetCutForegroundPatternId(solid_fill)
                ogs.SetSurfaceTransparency(0)

                # [REVIT:APPLY_OVERRIDE] Apply the override for each element
                with Transaction(doc, "Override Element Colors") as t:
                    t.Start()
                    for element_id in element_ids:
                        view.SetElementOverrides(element_id, ogs)
                    t.Commit()

            # [REVIT:GET_SELECTION] Get the selected elements from the active view
            selection = uidoc.Selection.GetElementIds()

            # [REVIT:CHECK_SELECTION] Check if any elements are selected
            if selection:
                # [UI:COLOR_DIALOG] Show color dialog
                color_dialog = ColorDialog()
                color_dialog.FullOpen = True  
                
                if color_dialog.ShowDialog() == DialogResult.OK:
                    # [REVIT:CONVERT_COLOR] Convert System.Drawing.Color to Revit.DB.Color
                    selected_color = color_dialog.Color
                    revit_color = Color(selected_color.R, selected_color.G, selected_color.B)

                    # [REVIT:GET_VIEW] Get the active view
                    view = doc.ActiveView

                    # [REVIT:APPLY_COLOR] Apply the color override to all selected elements
                    override_element_color(doc, view, selection, revit_color)
            else:
                MessageBox.Show(str_36(lan))
            
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Color Override Remover
    #
    # Handles color override removal:
    # - Identifies selected elements
    # - Clears graphic overrides
    # - Manages transactions
    ###############################################################################
    
    # [APP:REVIT:REMOVE_COLOR_OVERRIDE] Removes color overrides from selected elements
    def action_9(self): 
        """
        Removes color overrides from the selected elements in the Revit document.
        """
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            # [REVIT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitAPIUI')
            from Autodesk.Revit.DB import Transaction, OverrideGraphicSettings
            from pyrevit import revit
            from structure.root import lan_path
            from UI.strings_main import str_37

            lan= lan_path()

            doc = revit.doc
            uidoc = revit.uidoc

            # [REVIT:GET_SELECTION] Get the selected elements from the active view
            selection = uidoc.Selection.GetElementIds()

            # [REVIT:CHECK_SELECTION] Check if any elements are selected
            if selection:
                # [REVIT:GET_VIEW] Get the active view
                view = doc.ActiveView

                # [REVIT:CLEAR_OVERRIDE] Create a clean override graphic settings object
                ogs = OverrideGraphicSettings()

                # [REVIT:REMOVE_OVERRIDE] Remove the overrides for each element
                with Transaction(doc, "Remove Element Color Overrides") as t:
                    t.Start()
                    for element_id in selection:
                        view.SetElementOverrides(element_id, ogs)
                    t.Commit()
            else:
                MessageBox.Show(str_37(lan))
            
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()
    
    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Pin Marker Creator
    #
    # Handles pin marker creation:
    # - Identifies selected elements
    # - Creates triangular pyramid shapes
    # - Places shapes at element centers
    # - Manages transactions
    ###############################################################################
    
    # [APP:APP:DOC:REVIT:CREATE_PYRAMID] Creates triangular pyramid shapes at the center of selected elements
    def action_10(self): 
        """
        Creates triangular pyramid shapes at the center of selected elements in the Revit document.
        """
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            # [REVIT:IMPORTS] Import necessary libraries
            from Autodesk.Revit.DB import (
                XYZ, 
                Line, 
                CurveLoop, 
                DirectShape, 
                ElementId, 
                BuiltInCategory,
                Transaction,
                GeometryCreationUtilities
            )
            #from pyrevit import forms
            from System.Windows.Forms import MessageBox
            
            # [REVIT:CREATE_PYRAMID_FUNCTION] Function to create a triangular pyramid solid
            def create_triangular_pyramid(doc, center_point, base_size, height):
                """
                Creates a triangular pyramid solid at a given center point with specified base size and height.
                
                Args:
                    doc: The Revit document.
                    center_point: The center point of the pyramid base (XYZ).
                    base_size: The size of the pyramid base.
                    height: The height of the pyramid.

                Returns:
                    The ID of the created DirectShape (triangular pyramid) in Revit.
                """
                # [REVIT:CALCULATE_VERTICES] Calculate the vertices of the pyramid
                h_triangle = (base_size * (3 ** 0.5)) / 1
                p1 = XYZ(center_point.X, center_point.Y, center_point.Z)  # Center vertex
                p2 = XYZ(center_point.X - base_size / 2, center_point.Y - h_triangle / 2, center_point.Z)  # Left vertex
                p3 = XYZ(center_point.X + base_size / 2, center_point.Y - h_triangle / 2, center_point.Z)  # Right vertex
                apex = XYZ(center_point.X, center_point.Y, center_point.Z + height)

                # [REVIT:CREATE_FACES] Create the triangular faces
                face1 = CurveLoop.Create([
                    Line.CreateBound(p1, p2),
                    Line.CreateBound(p2, apex),
                    Line.CreateBound(apex, p1)
                ])
                face2 = CurveLoop.Create([
                    Line.CreateBound(p2, p3),
                    Line.CreateBound(p3, apex),
                    Line.CreateBound(apex, p2)
                ])
                face3 = CurveLoop.Create([
                    Line.CreateBound(p3, p1),
                    Line.CreateBound(p1, apex),
                    Line.CreateBound(apex, p3)
                ])

                # [REVIT:CREATE_BASE] Create the base profile
                base_profile = CurveLoop.Create([
                    Line.CreateBound(p2, p3),
                    Line.CreateBound(p3, p1),
                    Line.CreateBound(p1, p2)
                ])

                # [REVIT:CREATE_SOLID] Create the pyramid solid using DirectShape
                try:
                    direct_shape = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
                    solid = GeometryCreationUtilities.CreateExtrusionGeometry(
                        [base_profile],
                        XYZ.BasisZ,  
                        height
                    )
                    direct_shape.SetShape([solid])
                    return direct_shape.Id  
                except Exception as e:
                    MessageBox.Show(str(e))
                    return None

            # [REVIT:START_TRANSACTION] Start the script and begin transaction
            doc = __revit__.ActiveUIDocument.Document
            t = Transaction(doc, "Create Triangular Pyramids")
            t.Start()

            # [REVIT:GET_SELECTION] Get selected elements
            uidoc = __revit__.ActiveUIDocument
            selection = uidoc.Selection.GetElementIds()

            # [REVIT:PROCESS_ELEMENTS] Process each selected element
            pyramid_ids = []  
            for element_id in selection:
                element = doc.GetElement(element_id)
                if element is not None:
                    bounding_box = element.get_BoundingBox(None)
                    if bounding_box:
                        min_pt = bounding_box.Min
                        max_pt = bounding_box.Max
                        center_point = XYZ((min_pt.X + max_pt.X) / 2, (min_pt.Y + max_pt.Y) / 2, (min_pt.Z + max_pt.Z) / 2)

                        # [REVIT:CREATE_PYRAMID] Create triangular pyramid at the center
                        pyramid_id = create_triangular_pyramid(doc, center_point, base_size=5.0, height=0.05)
                        if pyramid_id is not None:
                            pyramid_ids.append(pyramid_id)

            # [REVIT:COMMIT_TRANSACTION] Commit the transaction
            t.Commit()

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()
        
    ###############################################################################
    # [APP:DOC:REVIT OPERATIONS] Pin Marker Remover
    #
    # Handles pin marker removal:
    # - Identifies selected elements
    # - Finds intersecting DirectShape elements
    # - Deletes pin markers
    # - Manages transactions
    ###############################################################################
    
    # [APP:REVIT:REMOVE_PIN_MARKERS] Removes pin markers from selected elements
    def action_11(self): 
        """
        Removes pin markers from the selected elements in the Revit document.
        """
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [REVIT:IMPORTS] Import necessary libraries
            from Autodesk.Revit.DB import (
                FilteredElementCollector,
                DirectShape,
                Transaction,
                BoundingBoxIntersectsFilter,
                Outline
            )
            from structure.root import lan_path
            from UI.strings_main import str_29, str_38, str_39

            lan= lan_path()

            # [REVIT:GET_DOCUMENT] Get the current document and UI document
            doc = __revit__.ActiveUIDocument.Document
            uidoc = __revit__.ActiveUIDocument
            
            # [REVIT:GET_SELECTION] Get selected elements
            selection = uidoc.Selection.GetElementIds()
            
            # [REVIT:CHECK_SELECTION] Check if any elements are selected
            if not selection:
                MessageBox.Show(str_38(lan), str_29(lan))
                return
                
            # [REVIT:START_TRANSACTION] Start a transaction
            t = Transaction(doc, "Remove Pin Markers")
            t.Start()
            
            try:
                # [REVIT:PROCESS_ELEMENTS] For each selected element
                for element_id in selection:
                    element = doc.GetElement(element_id)
                    if element is not None:
                        # [REVIT:GET_BOUNDING_BOX] Get the bounding box of the selected element
                        bbox = element.get_BoundingBox(None)
                        if bbox:
                            # [REVIT:CREATE_OUTLINE] Create an outline from the bounding box
                            outline = Outline(bbox.Min, bbox.Max)
                            
                            # [REVIT:CREATE_FILTER] Create a filter to find intersecting DirectShape elements
                            bbox_filter = BoundingBoxIntersectsFilter(outline)
                            
                            # [REVIT:GET_DIRECT_SHAPES] Get all DirectShape elements that intersect with the bounding box
                            direct_shapes = FilteredElementCollector(doc)\
                                .OfClass(DirectShape)\
                                .WherePasses(bbox_filter)\
                                .ToElements()
                            
                            # [REVIT:DELETE_DIRECT_SHAPES] Delete each found DirectShape
                            for direct_shape in direct_shapes:
                                try:
                                    doc.Delete(direct_shape.Id)
                                except Exception as delete_error:
                                    MessageBox.Show(str(delete_error),str_26(lan))

                # [REVIT:COMMIT_TRANSACTION] Commit the transaction
                t.Commit()
                
            except Exception as ex:
                # [REVIT:ROLLBACK_TRANSACTION] Rollback the transaction on error
                t.RollBack()
                MessageBox.Show(str_39(lan).format(str(ex)), str_26(lan))
                
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:SCRIPT MANAGEMENT] Script Manager
    #
    # Handles script management:
    # - Adds, runs, and deletes scripts
    # - Manages script directory
    # - Provides UI for script operations
    ###############################################################################

    # [APP:SCRIPT:MANAGER] Manages scripts by providing a user interface to add, run, and delete scripts
    def action_12(self): 
        """
        Manages scripts by providing a user interface to add, run, and delete scripts including directory set.
        """
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('System.Windows.Forms')
            clr.AddReference('System.Drawing')
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitServices')
            import System.Windows.Forms as WinForms
            from System.Windows.Forms import  Form, Button, Label, PictureBox, Cursors
            from System.Drawing import Point, Size, Bitmap, Color, GraphicsUnit
            from System.Drawing import Font, FontStyle, Icon
            from pyrevit import script, forms
            import webbrowser
            import shutil
            from RevitServices.Persistence import DocumentManager
            import os
            import sys
            sys.path.append(os.path.dirname(__file__))
            from sajdmo.scripts.py import execute_selected_file, pylist_delete, pylist_path_run
            from structure.root import wurl_path, dir_path, py_icon, python_back, py_back, pylist_path, pydir_path, lan_path
            from UI.strings_script_maneger import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_24, str_25
            from UI.dir import detect_directory
            from UI.url import parsweb

            lan = lan_path()
            wurl= wurl_path()

            # [UI:SCRIPT_MANAGER_FORM] Form for managing scripts
            class SCRIPT_MANAGER(Form):
                def __init__(self, doc):
                    """
                    Initializes the form with the provided document and sets up UI elements.
                    """
                    # [UI:FORM_INIT] Initialize the form
                    self.Text = str_1(lan)
                    self.Width = 700
                    self.Height = 700
                    self.BackColor = Color.White
                    self.doc = doc
                    self.CenterToScreen()
                    self.Icon = Icon(py_icon())

                    # [UI:DIRECTORY_GROUP] Create a GroupBox for Directory
                    self.directory_group_box = GroupBox()
                    self.directory_group_box.Text = str_22(lan)
                    self.directory_group_box.Width = 600  
                    self.directory_group_box.Height = 150  
                    self.directory_group_box.Left = 40  
                    self.directory_group_box.Top = 250  
                    self.Controls.Add(self.directory_group_box)  

                    # [UI:SET_DIRECTORY_BUTTON] Add the set directory button
                    self.setdir_button = Button()
                    self.setdir_button.Text = str_5(lan)
                    self.setdir_button.Width = 135
                    self.setdir_button.Height = 30
                    self.setdir_button.Left = 10  
                    self.setdir_button.Top = 20  
                    self.setdir_button.Click += self.setdir_button_clicked
                    self.directory_group_box.Controls.Add(self.setdir_button)  

                    # [UI:RESET_DIRECTORY_BUTTON] Add the reset directory button
                    self.resetdir_button = Button()
                    self.resetdir_button.Text = str_6(lan)
                    self.resetdir_button.Width = 135
                    self.resetdir_button.Height = 30
                    self.resetdir_button.Left = 150
                    self.resetdir_button.Top = 20
                    self.resetdir_button.Click += self.resetdir_button_clicked
                    self.directory_group_box.Controls.Add(self.resetdir_button)

                    # [UI:MY_SCRIPTS_GROUP] Create a GroupBox for My Scripts
                    self.myscripts_group_box = GroupBox()
                    self.myscripts_group_box.Text = str_21(lan)
                    self.myscripts_group_box.Width = 600  
                    self.myscripts_group_box.Height = 90  
                    self.myscripts_group_box.Left = 40  
                    self.myscripts_group_box.Top = 425  
                    self.Controls.Add(self.myscripts_group_box)  

                    # [UI:AI_ASSIST_GROUP] Create a GroupBox for AI Assist
                    self.ai_group_box = GroupBox()
                    self.ai_group_box.Text = str_24(lan)
                    self.ai_group_box.Width = 600  
                    self.ai_group_box.Height = 75 
                    self.ai_group_box.Left = 40  
                    self.ai_group_box.Top = 540
                    self.Controls.Add(self.ai_group_box)

                    # [UI:RUN_BUTTON] Add the run button
                    self.run_button = Button()
                    self.run_button.Text = str_7(lan)
                    self.run_button.Width = 90
                    self.run_button.Height = 30
                    self.run_button.Left = 200
                    self.run_button.Top = 20
                    self.run_button.Click += self.run_button_clicked
                    self.myscripts_group_box.Controls.Add(self.run_button)

                    # [UI:ADD_PY_BUTTON] Add the add Python script button
                    self.addpy_button = Button()
                    self.addpy_button.Text = str_8(lan)
                    self.addpy_button.Width = 90
                    self.addpy_button.Height = 30
                    self.addpy_button.Left = 10
                    self.addpy_button.Top = 20
                    self.addpy_button.Click += self.addpy_button_clicked
                    self.myscripts_group_box.Controls.Add(self.addpy_button)

                    # [UI:DELETE_BUTTON] Add the delete button
                    self.delete_button = Button()
                    self.delete_button.Text = str_9(lan)
                    self.delete_button.Width = 90
                    self.delete_button.Height = 30
                    self.delete_button.Left = 105
                    self.delete_button.Top = 20
                    self.delete_button.Click += self.delete_button_clicked
                    self.myscripts_group_box.Controls.Add(self.delete_button)

                    # [UI:REVIT_API_AI_BUTTON] Add the revit API doc AI button
                    self.revit_apidoc_ai_button = Button()
                    self.revit_apidoc_ai_button.Text = str_25(lan)
                    self.revit_apidoc_ai_button.BackColor = Color.LightYellow
                    self.revit_apidoc_ai_button.Width = 280
                    self.revit_apidoc_ai_button.Height = 30
                    self.revit_apidoc_ai_button.Left = 10
                    self.revit_apidoc_ai_button.Top = 20
                    self.revit_apidoc_ai_button.Click += self.revit_apidoc_ai_button_clicked
                    self.ai_group_box.Controls.Add(self.revit_apidoc_ai_button)

                    # [UI:LINE_LABELS] Add line labels for visual separation
                    self.line2Label = Label()
                    self.line2Label.Location = Point(450, 0)
                    self.line2Label.Size = Size(2, 450)
                    self.line2Label.BackColor = Color.White
                    self.line2Label.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                    self.line3Label = Label()
                    self.line3Label.Location = Point(0, 450)
                    self.line3Label.Size = Size(900, 2)
                    self.line3Label.BackColor = Color.White
                    self.line3Label.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    # [UI:PYTHON_PICTUREBOX] Add Python logo picture box
                    self.PYpictureBox = PictureBox()
                    self.PYpictureBox.Location = Point(50, 50)
                    self.PYpictureBox.Size = Size(250, 250)  
                    icon_path = python_back()
                    image = Bitmap(icon_path)
                    self.PYpictureBox.Image = image
                    self.PYpictureBox.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                    self.Controls.Add(self.PYpictureBox)

                    # [UI:PYTHON_BACK_PICTUREBOX] Add Python background picture box
                    self.DYpictureBox = PictureBox()
                    self.DYpictureBox.Location = Point(400, 50)
                    self.DYpictureBox.Size = Size(350, 200)  
                    icon2_path = py_back()
                    image2 = Bitmap(icon2_path)
                    self.DYpictureBox.Image = image2
                    self.DYpictureBox.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                    self.Controls.Add(self.DYpictureBox)
            
                    # [UI:CREATED_BY_LABEL] Add "Created by" label
                    self.created_by_label = Label()
                    self.created_by_label.AutoSize = True
                    self.created_by_label.Text = "BIM Pars"
                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                    self.created_by_label.ForeColor = Color.Blue
                    self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                    self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                    self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                    self.created_by_label.Cursor = Cursors.Hand  
                    self.created_by_label.Click += self.Label_Click
                    self.Controls.Add(self.created_by_label)

                    # [UI:SCROLL_PANEL] Create a panel for scrolling
                    self.scroll_panel = Panel()
                    self.scroll_panel.AutoScroll = True  
                    self.scroll_panel.Location = Point(10, 60)  
                    self.scroll_panel.Size = Size(580, 50)  
                    self.directory_group_box.Controls.Add(self.scroll_panel)  

                    # [UI:DIRECTORY_LABEL] Add the directory label
                    self.Directorlabel = Label()
                    self.Directorlabel.Text = ""
                    self.Directorlabel.MaximumSize = Size(575, 50)  
                    self.Directorlabel.AutoSize = True
                    self.Directorlabel.ForeColor = Color.Black
                    self.scroll_panel.Controls.Add(self.Directorlabel)  

                    # [UI:CHECK_DIRECTORY] Check if the directory is set
                    if dir_path:
                        dir= dir_path()
                        if detect_directory(dir) == "None":
                            self.Directorlabel.Text = str_10(lan)
                        else:
                            self.Directorlabel.Text = str_11(lan)+ detect_directory(dir)
                
                # [UI:FORM_CLOSE] Dispose of the form when closed
                def OnClosed(self, e):
                    """
                    Disposes of the form when closed.
                    """
                    self.Dispose() 
                
                # [UI:LABEL_CLICK] Open a URL when the label is clicked
                def Label_Click(self, sender, event):
                    """
                    Opens a URL when the label is clicked.
                    """
                    url = parsweb(wurl)
                    webbrowser.open(url)
                
                # [SCRIPT:RESET_DIRECTORY] Reset the directory path to "None"
                def resetdir_button_clicked(self, sender, e):  
                    """
                    Resets the directory path to "None" and updates the UI.
                    """ 
                    self.Hide()

                    # [SCRIPT:GENERATE_TEXT_FILE] Generate a text file to store content
                    def generate_text_file(folder_path, filename, content):
                        """
                        Stores content.
                        """
                        file_path = os.path.join(folder_path, filename)
                        with open(file_path, 'w') as file:
                            file.write(content)
                        return file_path
                    
                    # [SCRIPT:SAVE_DIRECTORY] Save the directory path as "None"
                    save_location = pydir_path()
                    filename = "dir.txt"
                    content = "None"  
                    generate_text_file(save_location, filename, content)

                    # [UI:UPDATE_DIRECTORY_LABEL] Update the directory label
                    self.Directorlabel.Text = str_10(lan)
                    self.Show()

                # [SCRIPT:SET_DIRECTORY] Set a directory path
                def setdir_button_clicked(self, sender, e):
                    """
                    Allows the user to set a directory path and updates the UI.
                    """
                    self.Hide()
                    try:
                        # [UI:PICK_FOLDER] Allow the user to pick a folder
                        target_folder = forms.pick_folder()
                        if target_folder is None:
                            sys.exit()

                        if target_folder:
                            import os
                            # [SCRIPT:GENERATE_TEXT_FILE] Generate a text file to store content
                            def generate_text_file(folder_path, filename, content):
                                """
                                Stores content.
                                """
                                file_path = os.path.join(folder_path, filename)
                                with open(file_path, 'w') as file:
                                    file.write(content)
                                return file_path

                            # [SCRIPT:SAVE_DIRECTORY] Save the selected directory path  
                            save_location = pydir_path()
                            filename = "dir.txt"
                            content = target_folder  
                            generate_text_file(save_location, filename, content)

                            # [UI:UPDATE_DIRECTORY_LABEL] Update the directory label
                            self.Directorlabel.Text = str_11(lan)+target_folder

                        # [UI:ALERT] Show a success message
                        forms.alert(str_12(lan))   
                    except: 
                        pass 
                    self.Show()

                # [SCRIPT:ADD_PY_SCRIPT] Add a Python script to the list
                def addpy_button_clicked(self, sender, e):
                    """
                    Adds a Python script to the list by copying the selected file.
                    """
                    self.Hide()
                    try:
                        pylist_path_value = pylist_path()
                        source_filePY = forms.pick_file(file_ext='py')
                        if source_filePY is None:
                            forms.alert(str_15(lan))
                            sys.exit()
                        if source_filePY:
                            destination_directoryPY = os.path.dirname(pylist_path_value)
                            if not os.path.exists(destination_directoryPY):
                                os.makedirs(destination_directoryPY)
                            shutil.copy(source_filePY, pylist_path_value)
                            forms.alert(str_16(lan))
                        else:
                            forms.alert(str_17(lan))
                    except:
                        pass
                    self.Show()
                
                # [SCRIPT:RUN_SCRIPT] Run the selected Python script
                def run_button_clicked(self, sender, e):
                    """
                    Runs the selected Python script from the list.
                    """
                    try:
                        title =str_20(lan)
                        button_name =str_13(lan)
                        output = script.get_output()
                        selected_file = pylist_path_run(title, button_name)
                        if selected_file is None:
                            sys.exit()
                        output.set_title(str_21(lan))
                        output.set_icon(py_icon())
                        output.print_code(str_18(lan).format(selected_file))
                        description = execute_selected_file(selected_file)
                        if description:
                            self.Descriptlabel.Text = ""
                            self.Descriptlabel.Text = str_19(lan).format(description)     
                        else:
                            pass
                    except:
                        pass
                    self.Close()
                    form.Close()

                # [SCRIPT:DELETE_SCRIPT] Delete the selected Python script
                def delete_button_clicked(self, sender, e):
                    """
                    Deletes the selected Python script from the list.
                    """
                    self.Hide()
                    try:
                        title =str_20(lan)
                        button_name =str_13(lan)
                        selected_file = pylist_delete(title, button_name)
                        if os.path.exists(selected_file):
                            os.remove(selected_file)
                        else:
                            pass
                    except Exception as e:
                        pass
                    self.Show()

                # [SCRIPT:REVIT_API_AI_BUTTON] Open the revit API do AI URL
                def revit_apidoc_ai_button_clicked(self, sender, e):
                    """
                    Opens a URL when the button is clicked.
                    """
                    url = "https://www.revitapidocs.com/code/"
                    webbrowser.open(url)

            # [SCRIPT:INIT_FORM] Initialize and show the form
            doc = DocumentManager.Instance.CurrentDBDocument
            if 'form' not in globals():
                pass
            else:
                pyform = SCRIPT_MANAGER(doc)
                pyform.ShowDialog()

            # [SCRIPT:CHECK_DIRECTORY] Check the directory file
            self.check_directory_file()
            
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
 
        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:SCRIPT EXECUTION] Directory Script Executor
    #
    # Handles script execution from directory:
    # - Detects target directory
    # - Lists and selects Python files
    # - Executes selected script
    # - Manages form visibility
    ###############################################################################

    # [APP:SCRIPT:EXECUTE_DIRECTORY] Executes a Python script from a specified directory
    def action_13(self): 
        """
        Executes a Python script from a specified directory.
        """
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            # [SCRIPT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitServices')
            from pyrevit import forms
            import os
            import sys
            sys.path.append(os.path.dirname(__file__))
            from structure.root import dir_path, lan_path
            from UI.strings_run_directory import str_1, str_2,str_3,str_4
            from UI.dir import detect_directory

            lan = lan_path()  
            exec_globals = {}
            dir_path = dir_path() 

            # [SCRIPT:CHECK_DIRECTORY] Check if the directory is valid 
            if dir_path:
                if detect_directory(dir_path) == "None":
                    forms.alert(str_1(lan))
                    sys.exit()
            
            # [SCRIPT:GET_PY_FILES] Get Python files from the target directory
            target_folder = detect_directory(dir_path)
            py_files = [file for file in os.listdir(target_folder) if file.endswith('.py')]
            
            # [SCRIPT:CHECK_SCRIPTS] Check the number of scripts
            if len(py_files) == 0:
                forms.alert(str_2(lan))
                sys.exit()
            if len(py_files) == 1:
                source_file = os.path.join(target_folder, py_files[0])  
            if len(py_files) > 1:
                # [UI:SELECT_SCRIPT] Show a dialog to select a script
                items = [file for file in py_files]
                selected_item = forms.SelectFromList.show(items, title=str_4(lan), button_name=str_3(lan))
                source_file = os.path.join(target_folder, selected_item) if selected_item else None
            
            # [SCRIPT:EXECUTE] Execute the selected script
            if source_file:
                with open(source_file, 'r') as file:
                    code = file.read()          
                    exec(code, exec_globals)  

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Local Script Loader
    #
    # Handles loading local scripts:
    # - Creates buttons for scripts
    # - Manages script metadata
    # - Handles group filtering
    # - Manages UI refresh
    ###############################################################################

    # [APP:UI:LOAD_LOCAL_SCRIPTS] Loads local scripts and creates buttons for them
    def load_local_scripts(self, sender, event):
        """
        Creates buttons for local Python scripts based on node selection.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path
        from UI.strings_main import str_26, str_40, str_41, str_42
        
        lan= lan_path()

        # [UI:GET_SELECTED_NODE] Get the selected node from the tree view
        selected_node = self.tree_view.SelectedNode
        
        # [UI:FIND_SCRIPTS_NODE] Find the "Scripts" node in the tree view
        scripts_node = None
        for node in self.tree_view.Nodes:
            if node.Text == str_21(lan):
                scripts_node = node
                break
        
        # [UI:VALIDATE_NODE] Return if the selected node is invalid
        if (scripts_node is None or 
            selected_node is None or 
            (selected_node != scripts_node and selected_node.Parent != scripts_node)):
            return
            
        try:
            # [UI:CLEAR_BUTTONS] Clear existing buttons from the panel
            self.icon_panel.Controls.Clear()
            
            # [SCRIPT:GET_SCRIPTS_DIR] Get the directory for scripts
            scripts_dir = pylist_path()
            default_icon = python_script_node_icon()
            json_path = os.path.join(scripts_dir, "script_metadata.json")
            
            # [SCRIPT:LOAD_METADATA] Load script metadata from JSON
            if not os.path.exists(json_path):
                MessageBox.Show(str_41(lan), str_40(lan))
                return
                
            with open(json_path, 'r') as f:
                metadata = json.load(f).get("scripts", {})
            
            # [UI:GET_SELECTED_NODE_TEXT] Get the text of the selected node
            selected_text = selected_node.Text
            
            # [UI:CREATE_BUTTONS] Create buttons for scripts
            if metadata:
                y_offset = 10
                
                # [UI:SHOW_ALL_SCRIPTS] Show all scripts if "Scripts" node is selected
                if selected_text == str_21(lan):
                    for script_name, script_data in metadata.items():
                        script_path = os.path.join(scripts_dir, script_name + ".py")
                        if os.path.exists(script_path):
                            button = Button()
                            button.Text = script_name
                            button.Size = Size(285, 48)
                            button.Image = self.resize_image(default_icon, 40, 40)
                            button.TextImageRelation = TextImageRelation.ImageBeforeText
                            button.TextAlign = ContentAlignment.MiddleLeft
                            button.ImageAlign = ContentAlignment.MiddleLeft
                            button.Location = Point(5, y_offset)
                            button.Tag = script_path
                            button.Click += self.execute_local_script
                            
                            # [UI:ADD_TOOLTIP] Add tooltip for the button
                            tooltip = ToolTip()
                            tooltip.SetToolTip(button, script_data["tooltip"])
                            
                            self.icon_panel.Controls.Add(button)
                            y_offset += 53
                
                # [UI:SHOW_GROUP_SCRIPTS] Show group-specific scripts if a group node is selected
                elif selected_node.Parent == scripts_node:
                    for script_name, script_data in metadata.items():
                        if script_data["group"] == selected_text:
                            script_path = os.path.join(scripts_dir, script_name + ".py")
                            if os.path.exists(script_path):
                                button = Button()
                                button.Text = script_name
                                button.Size = Size(285, 48)
                                button.Image = self.resize_image(default_icon, 40, 40)
                                button.TextImageRelation = TextImageRelation.ImageBeforeText
                                button.TextAlign = ContentAlignment.MiddleLeft
                                button.ImageAlign = ContentAlignment.MiddleLeft
                                button.Location = Point(5, y_offset)
                                button.Tag = script_path
                                button.Click += self.execute_local_script
                                
                                # [UI:ADD_TOOLTIP] Add tooltip for the button
                                tooltip = ToolTip()
                                tooltip.SetToolTip(button, script_data["tooltip"])
                                
                                self.icon_panel.Controls.Add(button)
                                y_offset += 53

                # [UI:REFRESH_PANEL] Refresh the panel to update the UI
                self.icon_panel.PerformLayout()
                self.icon_panel.Refresh()
                self.action_group_box.PerformLayout()
                self.action_group_box.Refresh()
                
        except Exception as e:
            MessageBox.Show(str_42(lan) + str(e), str_26(lan))

    ###############################################################################
    # [APP:DOC:SCRIPT EXECUTION] Local Script Executor
    #
    # Handles local script execution:
    # - Validates script path
    # - Manages progress bar
    # - Executes script content
    # - Handles errors
    ###############################################################################

    # [APP:SCRIPT:EXECUTE_LOCAL_SCRIPT] Executes the selected Python script
    def execute_local_script(self, sender, event):
        """
        Executes the selected Python script.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path
        from UI.strings_main import str_43, str_44, str_45, str_46
        lan= lan_path()
        try:
            # [SCRIPT:GET_SCRIPT_PATH] Get the script path from the sender's tag
            script_path = sender.Tag

            # [SCRIPT:VALIDATE_PATH] Check if the script path exists
            if not os.path.exists(script_path):
                MessageBox.Show(str_44(lan), str_43(lan))
                return

            # [UI:SHOW_PROGRESS_BAR] Show and initialize the progress bar
            self.progress_bar.Visible = True
            self.progress_bar.Value = 0
            
            try:
                # [SCRIPT:READ_SCRIPT] Read the script content
                with open(script_path, 'r') as file:
                    script_content = file.read()
                    
                # [UI:UPDATE_PROGRESS] Update the progress bar to 50%
                self.progress_bar.Value = 50
                
                # [SCRIPT:EXECUTE_SCRIPT] Execute the script in the current context
                exec(script_content)
                
                # [UI:COMPLETE_PROGRESS] Update the progress bar to 100%
                self.progress_bar.Value = 100
                
            finally:
                # [UI:HIDE_PROGRESS_BAR] Hide the progress bar after execution
                self.progress_bar.Visible = False
                
        except Exception as e:
            # [UI:SHOW_ERROR] Show an error message if execution fails
            error_message = str_45(lan) + str(e)
            MessageBox.Show(error_message, str_46(lan))
            self.progress_bar.Visible = False

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Script Node Configuration
    #
    # Handles script node configuration:
    # - Loads script metadata
    # - Creates group and script nodes
    # - Manages node hierarchy
    # - Handles errors
    ###############################################################################

    # [APP:UI:SCRIPT_NODE_CONFIGURATION] Configures script nodes and their metadata
    def script_node_configuration(self):
        """
        Configures script nodes and their metadata from a JSON file.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path
        from UI.strings_main import str_40, str_47, str_48, str_49

        lan= lan_path()

        try:
            # [SCRIPT:GET_SCRIPTS_DIR] Get the directory for scripts
            scripts_dir = pylist_path()
            json_path = os.path.join(scripts_dir, "script_metadata.json")
            
            # [SCRIPT:LOAD_METADATA] Load script metadata from JSON
            if not os.path.exists(json_path):
                MessageBox.Show(str_47(lan) + json_path, str_40(lan))
                return
                
            with open(json_path, 'r') as f:
                metadata = json.load(f)
            
            # [UI:FIND_SCRIPTS_NODE] Find or create the "Scripts" node
            scripts_node = None
            for node in self.tree_view.Nodes:
                if node.Text == str_21(lan):
                    scripts_node = node
                    break
            
            if scripts_node is None:
                scripts_node = TreeNode(str_21(lan))
                self.tree_view.Nodes.Add(scripts_node)
            
            # [UI:CREATE_GROUP_NODES] Create a dictionary to hold group nodes
            group_nodes = {}
            
            # [UI:PROCESS_SCRIPTS] Process each script in the metadata
            for script_name, script_data in metadata["scripts"].items():
                group_name = script_data["group"]
                
                # [UI:CREATE_GROUP_NODE] Create group node if it doesn't exist
                if group_name not in group_nodes:
                    group_node = TreeNode(group_name)
                    group_node.ImageIndex = 25  
                    group_nodes[group_name] = group_node
                    scripts_node.Nodes.Add(group_node)
                
                # [UI:CREATE_SCRIPT_NODE] Create script node
                script_node = TreeNode(script_name)
                script_node.ForeColor = Color.Blue
                script_node.Tag = {
                    "path": os.path.join(scripts_dir, script_name + ".py"),
                    "tooltip": script_data["tooltip"],
                    "video_url": script_data["video_url"],
                    "documentation_url": script_data["documentation_url"],
                    "github_url": script_data["github_url"]
                }
                
                # [UI:ADD_SCRIPT_NODE] Add script node to its group
                group_nodes[group_name].Nodes.Add(script_node)
            
            # [UI:REFRESH_TREE_VIEW] Refresh the tree view
            self.tree_view.PerformLayout()
            self.tree_view.Refresh()

        except Exception as e:
            MessageBox.Show(str_49(lan)+ str(e), str_48(lan))
    
    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] TreeView Expand Handler
    #
    # Handles expanding TreeView nodes:
    # - Recursively expands all nodes
    # - Manages node hierarchy
    ###############################################################################

    # [APP:UI:EXPAND_TREE_VIEW] Expands all nodes in the TreeView
    def expand_tree_view_structure(self, sender, e):
        """
        Expands all nodes in the TreeView when the 'Expand Tree' button is clicked.
        """
        # [UI:EXPAND_ALL_NODES] Recursively expand all child nodes
        def expand_all_nodes(node):
            """
            Recursively expand all child nodes.
            """
            node.Expand()  
            for child in node.Nodes:
                expand_all_nodes(child)  
        
        # [UI:EXPAND_ROOT_NODES] Loop through the root nodes and expand each
        for root_node in self.tree_view.Nodes:
            expand_all_nodes(root_node)

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] TreeView Collapse Handler
    #
    # Handles collapsing TreeView nodes:
    # - Recursively collapses all nodes
    # - Manages node hierarchy
    ###############################################################################

    # [APP:UI:COLLAPSE_TREE_VIEW] Collapses all nodes in the TreeView
    def collapse_tree_view_structure(self, sender, e):
        """
        Collapses all nodes in the TreeView when the 'Collapse Tree' button is clicked.
        """
        # [UI:COLLAPSE_ALL_NODES] Recursively collapse all child nodes
        def collapse_all_nodes(node):
            """
            Recursively collapse all child nodes.
            """
            node.Collapse()  
            for child in node.Nodes:
                collapse_all_nodes(child)  
        
        # [UI:COLLAPSE_ROOT_NODES] Loop through the root nodes and collapse each
        for root_node in self.tree_view.Nodes:
            collapse_all_nodes(root_node)

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Node Selection Handler
    #
    # Handles TreeView node selection:
    # - Creates buttons for selected node's groups
    # - Manages button layout and appearance
    # - Sets initial button states
    # - Attaches event handlers
    ###############################################################################

    # [APP:UI:NODE_SELECTION_HANDLER] Handles TreeView node selection and creates buttons
    def on_node_select(self, sender, event):  
        """
        Handles the selection of a node in the TreeView and creates buttons based on the selected node's groups.
        """
        # [UI:GET_SELECTED_NODE] Get the selected node
        selected_node = self.tree_view.SelectedNode

        # [UI:VALIDATE_NODE] Return if no node or tag is selected
        if selected_node is None or selected_node.Tag is None:
            return  

        # [REVIT:GET_SELECTION_COUNT] Get the current selection count
        uidoc = __revit__.ActiveUIDocument
        doc = __revit__.ActiveUIDocument.Document
        selection_count = len([doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()])

        # [UI:GET_SELECTED_GROUPS] Get the selected node's group
        selected_groups = selected_node.Tag

        # [UI:CLEAR_BUTTONS] Clear existing buttons in the panel
        self.icon_panel.Controls.Clear() 

        # [UI:CREATE_BUTTONS] Create buttons for each group
        y_offset = 10  
        for group_name in selected_groups:
            if group_name in self.icon_groups:
                icon_data = self.icon_groups[group_name]

                # [UI:CREATE_BUTTON] Create buttons for each icon in the group
                for i in range(len(icon_data[self.seeds["81894ycycyycsdcs7146264dfsdcxs"]])):
                    button = Button()
                    button.Text = icon_data[self.seeds["sbfmlkgfdf54d5fgdffvghesrgfst4"]][i]  
                    button.Size = Size(285, 48) 
                    button.Image = self.resize_image(icon_data[self.seeds["81894ycycyycsdcs7146264dfsdcxs"]][i], 40, 40)  
                    button.TextImageRelation = TextImageRelation.ImageBeforeText 
                    button.TextAlign = ContentAlignment.MiddleLeft  
                    button.ImageAlign = ContentAlignment.MiddleLeft  
                    button.Location = Point(5, y_offset)
                    y_offset += 53  

                    # [UI:SET_BUTTON_STATE] Set initial enabled state for specific buttons
                    if button.Text in [tool_str_29(lan), tool_str_27(lan), 
                                    tool_str_28(lan)]:
                        button.Enabled = (selection_count == 1)
                    elif button.Text in [tool_str_1(lan), tool_str_2(lan), tool_str_45(lan), tool_str_44(lan), tool_str_43(lan), tool_str_42(lan), tool_str_37(lan), tool_str_38(lan), tool_str_39(lan), tool_str_41(lan), tool_str_36(lan), tool_str_34(lan), tool_str_16(lan), tool_str_17(lan), tool_str_18(lan), tool_str_19(lan)]:
                        button.Enabled = (selection_count >= 1)

                    # [UI:ATTACH_EVENT_HANDLER] Attach event handler for button click
                    button.Click += self.on_action_click

                    # [UI:ADD_BUTTON] Add button to the panel
                    self.icon_panel.Controls.Add(button)

                    # [UI:ASSIGN_TOOLTIP] Assign a tooltip to the button
                    self.assign_tooltip(button, icon_data[self.seeds["weervbvcbbnghjh5dg8s5csdcsd5s9"]][i])  
       
    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Image Resizer
    #
    # Handles image resizing for UI consistency:
    # - Loads original image
    # - Resizes to specified dimensions
    # - Returns resized image
    ###############################################################################

    # [APP:UI:RESIZE_IMAGE] Resizes an image for consistent UI appearance
    def resize_image(self, image_path, width, height):
        """
        Resizes the image to maintain consistent button appearance.
        """
        # [UI:LOAD_IMAGE] Load the original image
        original_image = Image.FromFile(image_path)

        # [UI:RESIZE_IMAGE] Resize the image to the specified dimensions
        resized_image = original_image.GetThumbnailImage(width, height, None, IntPtr.Zero)

        # [UI:RETURN_IMAGE] Return the resized image
        return resized_image

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] TreeView Width Adjuster
    #
    # Handles TreeView width adjustment:
    # - Measures node text width
    # - Calculates maximum width
    # - Sets TreeView width with padding
    ###############################################################################

    # [APP:UI:ADJUST_TREE_VIEW_WIDTH] Adjusts the width of the TreeView
    def adjust_tree_view_width(self):
        """
        Adjusts the width of the TreeView based on the longest node text.
        """
        # [UI:MEASURE_NODE_WIDTH] Measure the width of the longest node text
        max_width = 0
        with Graphics.FromHwnd(self.tree_view.Handle) as g:
            for node in self.tree_view.Nodes:
                node_width = g.MeasureString(node.Text, self.tree_view.Font).Width
                max_width = max(max_width, node_width)
                
                # [UI:MEASURE_CHILD_NODES] Measure child nodes if necessary
                for child_node in node.Nodes:
                    child_node_width = g.MeasureString(child_node.Text, self.tree_view.Font).Width
                    max_width = max(max_width, child_node_width)
        
        # [UI:SET_TREE_VIEW_WIDTH] Set the TreeView width with padding
        self.tree_view.Width = int(max_width + 20)  

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] TreeView Node Selection Handler
    #
    # Handles TreeView node selection:
    # - Updates button states
    # - Loads configuration from JSON
    # - Manages script metadata
    # - Handles node-specific actions
    ###############################################################################

    # [APP:UI:TREEVIEW_NODE_SELECTION] Handles TreeView node selection and updates button states
    def on_treeview_node_select(self, sender, e):
        """
        Handles the selection of a node in the TreeView and updates button states based on the selected node.
        """
        # [UI:GET_SELECTED_NODE] Get the selected node
        selected_node = self.tree_view.SelectedNode
        
        # [SCRIPT:LOAD_GENERAL_URLS] Load general URLs for configuration
        self.load_general_urls()
        json_url = self.general_urls["BIM_Pars_Documentation_config"]

        # [UI:VALIDATE_NODE] Proceed if a node is selected
        if selected_node:
            # [SCRIPT:LOAD_BUTTON_STATES] Load button states from JSON
            button_states = load_config_json(json_url)

            # [UI:SET_SELECTED_NODE_NAME] Set the selected node name based on the node text
            if selected_node.Text == tool_str_1(lan):
                self.selected_node_name = "Element ID"
            elif selected_node.Text == tool_str_2(lan):
                self.selected_node_name = "Creator Finder"
            elif selected_node.Text == tool_str_3(lan):
                self.selected_node_name = "Active View"
            elif selected_node.Text == tool_str_4(lan):
                self.selected_node_name = "Hierarchy"
            elif selected_node.Text == tool_str_5(lan):
                self.selected_node_name = "DUDUL"
            elif selected_node.Text == tool_str_6(lan):
                self.selected_node_name = "Type"
            elif selected_node.Text == tool_str_7(lan):
                self.selected_node_name = "Select by Search for Value of Instance Parameters"
            elif selected_node.Text == tool_str_8(lan):
                self.selected_node_name = "Select based on Existence of Parameters Values"
            elif selected_node.Text == tool_str_9(lan):
                self.selected_node_name = "All Elements in Selected Categories"
            elif selected_node.Text == tool_str_10(lan):
                self.selected_node_name = "All Elements in Selected Views"
            elif selected_node.Text == tool_str_11(lan):
                self.selected_node_name = "All Elements on Selected Levels"
            elif selected_node.Text == tool_str_12(lan):
                self.selected_node_name = "Ownership of Elements"
            elif selected_node.Text == tool_str_13(lan):
                self.selected_node_name = "Unbound Rooms"
            elif selected_node.Text == tool_str_14(lan):
                self.selected_node_name = "Mirrored Doors"
            elif selected_node.Text == tool_str_15(lan):
                self.selected_node_name = "IDs from Excel"
            elif selected_node.Text == tool_str_16(lan):
                self.selected_node_name = "Reduce Selection by ID"
            elif selected_node.Text == tool_str_17(lan):
                self.selected_node_name = "Reduce Selection by OST Categories"
            elif selected_node.Text == tool_str_18(lan):
                self.selected_node_name = "Reduce Selection by Searching Value of Instance Parameters"
            elif selected_node.Text == tool_str_19(lan):
                self.selected_node_name = "Reduce Selection by Existence of Parameters Values"
            elif selected_node.Text == tool_str_20(lan):
                self.selected_node_name = "Delete Elements by ID"
            elif selected_node.Text == tool_str_21(lan):
                self.selected_node_name = "Delete Elements by IDs from Excel"
            elif selected_node.Text == tool_str_22(lan):
                self.selected_node_name = "Delete Elements by Type Filter"
            elif selected_node.Text == tool_str_23(lan):
                self.selected_node_name = "Delete All DirectShape Elements"
            elif selected_node.Text == tool_str_24(lan):
                self.selected_node_name = "Delete All Elements of OST Category"
            elif selected_node.Text == tool_str_25(lan):
                self.selected_node_name = "Search Values of Parameters by Filter"
            elif selected_node.Text == tool_str_26(lan):
                self.selected_node_name = "Search Values of Parameters by Filter for Family Document"
            elif selected_node.Text == tool_str_27(lan):
                self.selected_node_name = "Snipe Parameter Value"
            elif selected_node.Text == tool_str_28(lan):
                self.selected_node_name = "Snipe Parameter Value for Family Document"
            elif selected_node.Text == tool_str_29(lan):
                self.selected_node_name = "Dictionary"
            elif selected_node.Text == tool_str_30(lan):
                self.selected_node_name = "Check Existence of Parameters Values"
            elif selected_node.Text == tool_str_31(lan):
                self.selected_node_name = "Check Parameter Against Category"
            elif selected_node.Text == tool_str_32(lan):
                self.selected_node_name = "Delete Parameter Completely from Model"
            elif selected_node.Text == tool_str_33(lan):
                self.selected_node_name = "Search for Value of Instance Parameters"
            elif selected_node.Text == tool_str_34(lan):
                self.selected_node_name = "Search for Any Value"
            elif selected_node.Text == tool_str_35(lan):
                self.selected_node_name = "Pair Comparer"
            elif selected_node.Text == tool_str_36(lan):
                self.selected_node_name = "Comparer of Multiple Elements"
            elif selected_node.Text == tool_str_37(lan):
                self.selected_node_name = "Same Value for All Selected Elements"
            elif selected_node.Text == tool_str_38(lan):
                self.selected_node_name = "Copy from One Parameter to Another Parameter"
            elif selected_node.Text == tool_str_39(lan):
                self.selected_node_name = "List Makers of Values from Excel"
            elif selected_node.Text == tool_str_40(lan):
                self.selected_node_name = "Batch Parameter Set using Dataset"
            elif selected_node.Text == tool_str_41(lan):
                self.selected_node_name = "ID Generator"
            elif selected_node.Text == tool_str_42(lan):
                self.selected_node_name = "Parameter Value Editor"
            elif selected_node.Text == tool_str_43(lan):
                self.selected_node_name = "Parameter Value Editor for Special Characters"
            elif selected_node.Text == tool_str_44(lan):
                self.selected_node_name = "Value of Parameter for Selected Elements"
            elif selected_node.Text == tool_str_45(lan):
                self.selected_node_name = "Desired Character in Value of Parameter for Selected Elements"
            elif selected_node.Text == tool_str_46(lan):
                self.selected_node_name = "Information"
            else:
                self.selected_node_name=selected_node.Text

            # [UI:GET_BUTTON_STATES] Get the button states for the selected node
            states = button_states.get(self.selected_node_name, {})
            
            # [UI:SET_BUTTON_STATES] Set button states based on the JSON data
            self.documentation_button.Enabled = states.get("documentation", False)
            self.play_video_button.Enabled = states.get("play_video", False)
            self.open_github_button.Enabled = states.get("open_github", False)
            self.report_bug_button.Enabled = states.get("report_bug", False)

            # [SCRIPT:CHECK_SCRIPT_METADATA] If the node is not found in the JSON, check script metadata
            if not states:
                if selected_node.Text in self.load_script_metadata().get("scripts", {}):
                    script_data = self.load_script_metadata()["scripts"][selected_node.Text]
                    self.documentation_button.Enabled = script_data.get("documentation_url") not in [None, "None", ""]
                    self.play_video_button.Enabled = script_data.get("video_url") not in [None, "None", ""]
                    self.open_github_button.Enabled = script_data.get("github_url") not in [None, "None", ""]
                    self.report_bug_button.Enabled = False
                else:
                    # [UI:DISABLE_BUTTONS] Disable all buttons if no match is found
                    self.documentation_button.Enabled = False
                    self.play_video_button.Enabled = False
                    self.open_github_button.Enabled = False
                    self.report_bug_button.Enabled = False
        else:
            # [UI:DISABLE_BUTTONS] Disable the buttons if no node is selected
            self.documentation_button.Enabled = False
            self.play_video_button.Enabled = False
            self.open_github_button.Enabled = False
            self.report_bug_button.Enabled = False

    ###############################################################################
    # [APP:DOC:DATA LOADING] Script Metadata Loader
    #
    # Handles loading script metadata from JSON:
    # - Manages file path
    # - Reads JSON data
    # - Handles file errors
    ###############################################################################

    # [APP:SCRIPT:LOAD_METADATA] Loads script metadata from a JSON file
    def load_script_metadata(self): 
        """
        Loads script metadata from a specified JSON file.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path
        from UI.strings_main import str_26, str_50, str_51

        lan= lan_path()

        try:
            # [SCRIPT:GET_JSON_PATH] Get the path to the script metadata JSON file
            current_dir = os.path.dirname(__file__)
            json_path = os.path.join(current_dir, "..", "..", "data", "pylist", "script_metadata.json")
            
            # [SCRIPT:LOAD_JSON] Load the JSON file if it exists
            if os.path.exists(json_path):
                with open(json_path, 'r') as f:
                    return json.load(f)
            else:
                # [UI:SHOW_ERROR] Show an error if the JSON file is not found
                MessageBox.Show(str_50(lan).format(json_path), str_26(lan))
                return {"scripts": {}}

        except Exception as e:
            # [UI:SHOW_ERROR] Show an error if loading fails
            MessageBox.Show(str_51(lan).format(str(e)), str_26(lan))
            return {"scripts": {}}

    ###############################################################################
    # [APP:DOC:DATA LOADING] General URL Loader
    #
    # Handles loading general URLs from JSON:
    # - Manages file path
    # - Reads JSON data
    # - Handles file errors
    ###############################################################################

    # [APP:SCRIPT:LOAD_GENERAL_URLS] Loads general URLs from a JSON file
    def load_general_urls(self):
        """
        Loads general URLs from a specified JSON file.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path
        from UI.strings_main import str_26, str_53

        lan= lan_path()
        
        # [SCRIPT:GET_JSON_PATH] Get the path to the general URLs JSON file
        json_file_path = os.path.join(general_urls(), "bimpars_urls.json")  
        try:
            # [SCRIPT:LOAD_JSON] Load the JSON file
            with open(json_file_path, 'r') as file:
                self.general_urls = json.load(file)
        except IOError as e:
            # [UI:SHOW_ERROR] Show an error if loading fails
            MessageBox.Show(str_53(lan), str_26(lan))  

    ###############################################################################
    # [APP:DOC:DATA LOADING] URL Loader
    #
    # Handles loading URLs from JSON:
    # - Configures HTTP client
    # - Fetches JSON data
    # - Processes response
    # - Manages error states
    ###############################################################################

    # [APP:SCRIPT:LOAD_URLS] Loads URLs from a specified JSON file
    def load_urls(self):
        """
        Loads URLs from a specified JSON file.
        """
        # [SCRIPT:LOAD_GENERAL_URLS] Load general URLs first
        self.load_general_urls()
        url = self.general_urls["BIM_Pars_Documentation"]

        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('System.Net.Http')
            from System.Net.Http import HttpClient
            from System.IO import StreamReader
            import json

            # [SCRIPT:CREATE_HTTP_CLIENT] Create an instance of HttpClient
            client = HttpClient()

            # [SCRIPT:FETCH_JSON] Send a GET request to fetch the JSON
            response = client.GetAsync(url).Result  

            # [SCRIPT:PROCESS_RESPONSE] Process the response
            if response.IsSuccessStatusCode:
                content = response.Content.ReadAsStringAsync().Result
                self.urls = json.loads(content) 
            else:
                # [UI:DISABLE_BUTTONS] Disable buttons if the request fails
                self.documentation_button.Enabled = False
                self.play_video_button.Enabled = False
                self.open_github_button.Enabled = False
                self.report_bug_button.Enabled = False

        except Exception as e:
            # [SCRIPT:HANDLE_ERROR] Handle any exceptions silently
            pass
    
    ###############################################################################
    # [APP:DOC:DATA LOADING] Seed Data Loader
    #
    # Handles loading seed data from API:
    # - Manages license key validation
    # - Configures HTTP client
    # - Handles SSL/TLS bypass
    # - Processes API response
    # - Manages error states
    ###############################################################################

    # [APP:SCRIPT:LOAD_SEEDS] Loads seed data from a specified URL
    def load_seeds(self): 
        """
        Loads seed data from a specified URL.
        """
        # [SCRIPT:LOAD_GENERAL_URLS] Load general URLs first
        self.load_general_urls()
        
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('System.Net.Http')
            from System.Net.Http import HttpClient, HttpRequestMessage, HttpMethod
            from System.Net.Http.Headers import HttpHeaders
            from System.Net import ServicePointManager, SecurityProtocolType
            from System.Net.Security import RemoteCertificateValidationCallback
            from structure.root import key_path, lan_path
            from sajdmo.pars.api import check_key 
            from UI.strings_main import str_bar_9, str_bar_16

            lan = lan_path()

            # [SCRIPT:GET_LICENSE_KEY] Get the license key
            path = key_path()
            license_key =check_key(path)

            # [SCRIPT:BYPASS_SSL] Ignore SSL/TLS certificate validation
            def bypass_certificate_validation(sender, certificate, chain, ssl_policy_errors):
                """
                Ignores SSL/TLS certificate validation.
                """
                return True

            ServicePointManager.ServerCertificateValidationCallback = RemoteCertificateValidationCallback(bypass_certificate_validation)
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls

            # [SCRIPT:CREATE_HTTP_CLIENT] Initialize the HttpClient
            client = HttpClient()
            
            # [SCRIPT:FORMAT_URL] Format the URL with the license key
            base_url = self.general_urls["BIM_Pars_Seeds"]
            url = base_url.format(license_key)

            # [SCRIPT:CREATE_REQUEST] Create the HttpRequestMessage with the POST method
            request = HttpRequestMessage(HttpMethod.Post, url)
            request.Headers.Add("Accept", "*/*")
            request.Content = None

            # [SCRIPT:SEND_REQUEST] Send the request and get the response
            response = client.SendAsync(request).Result

            # [SCRIPT:PROCESS_RESPONSE] Process the response
            if response.IsSuccessStatusCode:
                content = response.Content.ReadAsStringAsync().Result
                self.seeds = json.loads(content) 
            else:
                # [UI:ASK_FOR_LICENSE] Ask the user if they have a key
                if not self.message_box_opened:  
                    result = MessageBox.Show(str_bar_8(lan), str_bar_9(lan), MessageBoxButtons.YesNo)  
                    self.message_box_opened = True 
                    if result == DialogResult.Yes:
                        self.key_form_window()
                    elif result == DialogResult.No:
                        import sys
                        sys.exit()
                else:
                    self.Close()  

            # [SCRIPT:CLEANUP] Clean up resources
            client.Dispose()
        
        except Exception as e:
            # [SCRIPT:HANDLE_ERROR] Handle any exceptions silently
            pass

    ###############################################################################
    # [APP:DOC:DOCUMENTATION] Documentation URL Handler
    #
    # Handles opening documentation URLs:
    # - Identifies selected node
    # - Maps node to specific documentation URL
    # - Opens URL in browser
    ###############################################################################

    # [APP:UI:DOCUMENTATION_HANDLER] Opens documentation URL based on the selected node
    def bimpars_documentation(self, sender, e):
        """
        Opens the documentation URL based on the selected node in the TreeView.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path

        lan = lan_path()
        
        # [UI:GET_SELECTED_NODE] Get the selected node from the TreeView
        selected_node = self.tree_view.SelectedNode
        # [UI:VALIDATE_NODE] Proceed if a node is selected
        if selected_node:
            # [UI:MAP_NODE_TO_URL] Map the selected node to its documentation URL
            if selected_node.Text == tool_str_1(lan):
                url = self.urls["Element ID_doc"]  
                webbrowser.open(url)  
            elif selected_node.Text == tool_str_2(lan):
                url = self.urls["Creator Finder_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_46(lan):
                url = self.urls["Information_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_3(lan):
                url = self.urls["Active View_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_4(lan):
                url = self.urls["Hierarchy_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_5(lan):
                url = self.urls["DUDUL_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_6(lan):
                url = self.urls["Type_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_7(lan):
                url = self.urls["Select by Search for Value of Instance Parameters_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_8(lan):
                url = self.urls["Select based on Existence of Parameters Values_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_9(lan):
                url = self.urls["All Elements in Selected Categories_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_10(lan):
                url = self.urls["All Elements in Selected Views_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_11(lan):
                url = self.urls["All Elements on Selected Levels_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_12(lan):
                url = self.urls["Ownership of Elements_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_13(lan):
                url = self.urls["Unbound Rooms_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_14(lan):
                url = self.urls["Mirrored Doors_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_15(lan):
                url = self.urls["IDs from Excel_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_16(lan):
                url = self.urls["Reduce Selection by ID_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_17(lan):
                url = self.urls["Reduce Selection by OST Categories_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_18(lan):
                url = self.urls["Reduce Selection by Searching Value of Instance Parameters_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_19(lan):
                url = self.urls["Reduce Selection by Existence of Parameters Values_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_20(lan):
                url = self.urls["Delete Elements by ID_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_21(lan):
                url = self.urls["Delete Elements by IDs from Excel_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_22(lan):
                url = self.urls["Delete Elements by Type Filter_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_23(lan):
                url = self.urls["Delete All DirectShape Elements_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_24(lan):
                url = self.urls["Delete All Elements of OST Category_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_25(lan):
                url = self.urls["Search Values of Parameters by Filter_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_26(lan):
                url = self.urls["Search Values of Parameters by Filter for Family Document_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_27(lan):
                url = self.urls["Snipe Parameter Value_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_28(lan):
                url = self.urls["Snipe Parameter Value for Family Document_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_29(lan):
                url = self.urls["Dictionary_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_30(lan):
                url = self.urls["Check Existence of Parameters Values_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_31(lan):
                url = self.urls["Check Parameter Against Category_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_32(lan):
                url = self.urls["Delete Parameter Completely from Model_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_33(lan):
                url = self.urls["Search for Value of Instance Parameters_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_34(lan):
                url = self.urls["Search for Any Value_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_35(lan):
                url = self.urls["Pair Comparer_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_36(lan):
                url = self.urls["Comparer of Multiple Elements_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_37(lan):
                url = self.urls["Same Value for All Selected Elements_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_38(lan):
                url = self.urls["Copy from One Parameter to Another Parameter_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_39(lan):
                url = self.urls["List Makers of Values from Excel_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_40(lan):
                url = self.urls["Batch Parameter Set using Dataset_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_41(lan):
                url = self.urls["ID Generator_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_42(lan):
                url = self.urls["Parameter Value Editor_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_43(lan):
                url = self.urls["Parameter Value Editor for Special Characters_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_44(lan):
                url = self.urls["Value of Parameter for Selected Elements_doc"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_45(lan):
                url = self.urls["Desired Character in Value of Parameter for Selected Elements_doc"]
                webbrowser.open(url)
            # [SCRIPT:CHECK_SCRIPT_METADATA] Check if the selected node has a documentation URL in script metadata
            elif selected_node.Text in self.load_script_metadata().get("scripts", {}):
                script_data = self.load_script_metadata()["scripts"][selected_node.Text]
                doc_url = script_data.get("documentation_url")
                if doc_url and doc_url not in ["None", ""]:
                    webbrowser.open(doc_url)
            else:
                pass
        else:
            pass

    ###############################################################################
    # [APP:DOC:VIDEO INTEGRATION] Video URL Handler
    #
    # Handles opening video URLs:
    # - Identifies selected node
    # - Maps node to specific video URL
    # - Opens URL in browser
    ###############################################################################

    # [APP:UI:VIDEO_HANDLER] Opens video URL based on the selected node
    def bimpars_video(self, sender, e):
        """
        Opens the video URL based on the selected node in the TreeView.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path

        lan = lan_path()
        
        # [UI:GET_SELECTED_NODE] Get the selected node from the TreeView
        selected_node = self.tree_view.SelectedNode

        # [UI:VALIDATE_NODE] Proceed if a node is selected
        if selected_node:
            # [UI:MAP_NODE_TO_URL] Map the selected node to its video URL
            if selected_node.Text == tool_str_1(lan):
                url = self.urls["Element ID_video"]  
                webbrowser.open(url)  
            elif selected_node.Text == tool_str_2(lan):
                url = self.urls["Creator Finder_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_46(lan):
                url = self.urls["Information_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_3(lan):
                url = self.urls["Active View_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_4(lan):
                url = self.urls["Hierarchy_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_5(lan):
                url = self.urls["DUDUL_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_6(lan):
                url = self.urls["Type_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_7(lan):
                url = self.urls["Select by Search for Value of Instance Parameters_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_8(lan):
                url = self.urls["Select based on Existence of Parameters Values_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_9(lan):
                url = self.urls["All Elements in Selected Categories_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_10(lan):
                url = self.urls["All Elements in Selected Views_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_11(lan):
                url = self.urls["All Elements on Selected Levels_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_12(lan):
                url = self.urls["Ownership of Elements_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_13(lan):
                url = self.urls["Unbound Rooms_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_14(lan):
                url = self.urls["Mirrored Doors_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_15(lan):
                url = self.urls["IDs from Excel_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_16(lan):
                url = self.urls["Reduce Selection by ID_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_17(lan):
                url = self.urls["Reduce Selection by OST Categories_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_18(lan):
                url = self.urls["Reduce Selection by Searching Value of Instance Parameters_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_19(lan):
                url = self.urls["Reduce Selection by Existence of Parameters Values_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_20(lan):
                url = self.urls["Delete Elements by ID_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_21(lan):
                url = self.urls["Delete Elements by IDs from Excel_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_22(lan):
                url = self.urls["Delete Elements by Type Filter_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_23(lan):
                url = self.urls["Delete All DirectShape Elements_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_24(lan):
                url = self.urls["Delete All Elements of OST Category_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_25(lan):
                url = self.urls["Search Values of Parameters by Filter_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_26(lan):
                url = self.urls["Search Values of Parameters by Filter for Family Document_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_27(lan):
                url = self.urls["Snipe Parameter Value_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_28(lan):
                url = self.urls["Snipe Parameter Value for Family Document_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_29(lan):
                url = self.urls["Dictionary_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_30(lan):
                url = self.urls["Check Existence of Parameters Values_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_31(lan):
                url = self.urls["Check Parameter Against Category_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_32(lan):
                url = self.urls["Delete Parameter Completely from Model_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_33(lan):
                url = self.urls["Search for Value of Instance Parameters_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_34(lan):
                url = self.urls["Search for Any Value_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_35(lan):
                url = self.urls["Pair Comparer_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_36(lan):
                url = self.urls["Comparer of Multiple Elements_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_37(lan):
                url = self.urls["Same Value for All Selected Elements_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_38(lan):
                url = self.urls["Copy from One Parameter to Another Parameter_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_39(lan):
                url = self.urls["List Makers of Values from Excel_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_40(lan):
                url = self.urls["Batch Parameter Set using Dataset_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_41(lan):
                url = self.urls["ID Generator_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_42(lan):
                url = self.urls["Parameter Value Editor_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_43(lan):
                url = self.urls["Parameter Value Editor for Special Characters_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_44(lan):
                url = self.urls["Value of Parameter for Selected Elements_video"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_45(lan):
                url = self.urls["Desired Character in Value of Parameter for Selected Elements_video"]
                webbrowser.open(url)
            # [SCRIPT:CHECK_SCRIPT_METADATA] Check if the selected node has a video URL in script metadata
            elif selected_node.Text in self.load_script_metadata().get("scripts", {}):
                script_data = self.load_script_metadata()["scripts"][selected_node.Text]
                video_url = script_data.get("video_url")
                if video_url and video_url not in ["None", ""]:
                    webbrowser.open(video_url)
            else:
                pass
        else:
            pass

    ###############################################################################
    # [APP:DOC:GITHUB INTEGRATION] GitHub URL Handler
    #
    # Handles opening GitHub URLs:
    # - Identifies selected node
    # - Maps node to specific GitHub URL
    # - Opens URL in browser
    ###############################################################################
    
    # [APP:UI:GITHUB_HANDLER] Opens GitHub URL based on the selected node
    def bimpars_github(self, sender, e):
        """
        Opens the GitHub URL based on the selected node in the TreeView.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path

        lan = lan_path()
        
        # [UI:GET_SELECTED_NODE] Get the selected node from the TreeView
        selected_node = self.tree_view.SelectedNode

        # [UI:VALIDATE_NODE] Proceed if a node is selected
        if selected_node:
            # [UI:MAP_NODE_TO_URL] Map the selected node to its GitHub URL
            if selected_node.Text == tool_str_1(lan):
                url = self.urls["Element ID_git"]  
                webbrowser.open(url)  
            elif selected_node.Text == tool_str_2(lan):
                url = self.urls["Creator Finder_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_46(lan):
                url = self.urls["Information_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_3(lan):
                url = self.urls["Active View_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_4(lan):
                url = self.urls["Hierarchy_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_5(lan):
                url = self.urls["DUDUL_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_6(lan):
                url = self.urls["Type_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_7(lan):
                url = self.urls["Select by Search for Value of Instance Parameters_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_8(lan):
                url = self.urls["Select based on Existence of Parameters Values_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_9(lan):
                url = self.urls["All Elements in Selected Categories_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_10(lan):
                url = self.urls["All Elements in Selected Views_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_11(lan):
                url = self.urls["All Elements on Selected Levels_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_12(lan):
                url = self.urls["Ownership of Elements_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_13(lan):
                url = self.urls["Unbound Rooms_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_14(lan):
                url = self.urls["Mirrored Doors_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_15(lan):
                url = self.urls["IDs from Excel_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_16(lan):
                url = self.urls["Reduce Selection by ID_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_17(lan):
                url = self.urls["Reduce Selection by OST Categories_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_18(lan):
                url = self.urls["Reduce Selection by Searching Value of Instance Parameters_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_19(lan):
                url = self.urls["Reduce Selection by Existence of Parameters Values_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_20(lan):
                url = self.urls["Delete Elements by ID_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_21(lan):
                url = self.urls["Delete Elements by IDs from Excel_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_22(lan):
                url = self.urls["Delete Elements by Type Filter_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_23(lan):
                url = self.urls["Delete All DirectShape Elements_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_24(lan):
                url = self.urls["Delete All Elements of OST Category_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_25(lan):
                url = self.urls["Search Values of Parameters by Filter_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_26(lan):
                url = self.urls["Search Values of Parameters by Filter for Family Document_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_27(lan):
                url = self.urls["Snipe Parameter Value_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_28(lan):
                url = self.urls["Snipe Parameter Value for Family Document_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_29(lan):
                url = self.urls["Dictionary_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_30(lan):
                url = self.urls["Check Existence of Parameters Values_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_31(lan):
                url = self.urls["Check Parameter Against Category_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_32(lan):
                url = self.urls["Delete Parameter Completely from Model_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_33(lan):
                url = self.urls["Search for Value of Instance Parameters_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_34(lan):
                url = self.urls["Search for Any Value_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_35(lan):
                url = self.urls["Pair Comparer_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_36(lan):
                url = self.urls["Comparer of Multiple Elements_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_37(lan):
                url = self.urls["Same Value for All Selected Elements_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_38(lan):
                url = self.urls["Copy from One Parameter to Another Parameter_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_39(lan):
                url = self.urls["List Makers of Values from Excel_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_40(lan):
                url = self.urls["Batch Parameter Set using Dataset_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_41(lan):
                url = self.urls["ID Generator_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_42(lan):
                url = self.urls["Parameter Value Editor_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_43(lan):
                url = self.urls["Parameter Value Editor for Special Characters_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_44(lan):
                url = self.urls["Value of Parameter for Selected Elements_git"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_45(lan):
                url = self.urls["Desired Character in Value of Parameter for Selected Elements_git"]
                webbrowser.open(url)
            # [SCRIPT:CHECK_SCRIPT_METADATA] Check if the selected node has a GitHub URL in script metadata
            elif selected_node.Text in self.load_script_metadata().get("scripts", {}):
                script_data = self.load_script_metadata()["scripts"][selected_node.Text]
                github_url = script_data.get("github_url")
                if github_url and github_url not in ["None", ""]:
                    webbrowser.open(github_url)
            else:
                pass
        else:
            pass

    ###############################################################################
    # [APP:DOC:BUG REPORTING] Bug Report URL Handler
    #
    # Handles opening bug report URLs:
    # - Identifies selected node
    # - Maps node to specific bug report
    # - Opens URL in browser
    ###############################################################################

    # [APP:UI:BUG_REPORT_HANDLER] Opens bug report URL based on the selected node
    def bimpars_report_bug(self, sender, e):
        """
        Opens the bug report URL based on the selected node in the TreeView.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path

        lan = lan_path()

        # [UI:GET_SELECTED_NODE] Get the selected node from the TreeView
        selected_node = self.tree_view.SelectedNode

        # [UI:VALIDATE_NODE] Proceed if a node is selected
        if selected_node:
            # [UI:MAP_NODE_TO_URL] Map the selected node to its bug report URL
            if selected_node.Text == tool_str_1(lan):
                url = self.urls["Element ID_bug"] 
                webbrowser.open(url)  
            elif selected_node.Text == tool_str_2(lan):
                url = self.urls["Creator Finder_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_46(lan):
                url = self.urls["Information_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_3(lan):
                url = self.urls["Active View_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_4(lan):
                url = self.urls["Hierarchy_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_5(lan):
                url = self.urls["DUDUL_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_6(lan):
                url = self.urls["Type_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_7(lan):
                url = self.urls["Select by Search for Value of Instance Parameters_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_8(lan):
                url = self.urls["Select based on Existence of Parameters Values_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_9(lan):
                url = self.urls["All Elements in Selected Categories_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_10(lan):
                url = self.urls["All Elements in Selected Views_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_11(lan):
                url = self.urls["All Elements on Selected Levels_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_12(lan):
                url = self.urls["Ownership of Elements_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_13(lan):
                url = self.urls["Unbound Rooms_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_14(lan):
                url = self.urls["Mirrored Doors_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_15(lan):
                url = self.urls["IDs from Excel_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_16(lan):
                url = self.urls["Reduce Selection by ID_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_17(lan):
                url = self.urls["Reduce Selection by OST Categories_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_18(lan):
                url = self.urls["Reduce Selection by Searching Value of Instance Parameters_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_19(lan):
                url = self.urls["Reduce Selection by Existence of Parameters Values_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_20(lan):
                url = self.urls["Delete Elements by ID_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_21(lan):
                url = self.urls["Delete Elements by IDs from Excel_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_22(lan):
                url = self.urls["Delete Elements by Type Filter_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_23(lan):
                url = self.urls["Delete All DirectShape Elements_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_24(lan):
                url = self.urls["Delete All Elements of OST Category_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_25(lan):
                url = self.urls["Search Values of Parameters by Filter_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_26(lan):
                url = self.urls["Search Values of Parameters by Filter for Family Document_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_27(lan):
                url = self.urls["Snipe Parameter Value_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_28(lan):
                url = self.urls["Snipe Parameter Value for Family Document_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_29(lan):
                url = self.urls["Dictionary_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_30(lan):
                url = self.urls["Check Existence of Parameters Values_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_31(lan):
                url = self.urls["Check Parameter Against Category_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_32(lan):
                url = self.urls["Delete Parameter Completely from Model_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_33(lan):
                url = self.urls["Search for Value of Instance Parameters_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_34(lan):
                url = self.urls["Search for Any Value_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_35(lan):
                url = self.urls["Pair Comparer_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_36(lan):
                url = self.urls["Comparer of Multiple Elements_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_37(lan):
                url = self.urls["Same Value for All Selected Elements_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_38(lan):
                url = self.urls["Copy from One Parameter to Another Parameter_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_39(lan):
                url = self.urls["List Makers of Values from Excel_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_40(lan):
                url = self.urls["Batch Parameter Set using Dataset_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_41(lan):
                url = self.urls["ID Generator_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_42(lan):
                url = self.urls["Parameter Value Editor_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_43(lan):
                url = self.urls["Parameter Value Editor for Special Characters_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_44(lan):
                url = self.urls["Value of Parameter for Selected Elements_bug"]
                webbrowser.open(url)
            elif selected_node.Text == tool_str_45(lan):
                url = self.urls["Desired Character in Value of Parameter for Selected Elements_bug"]
                webbrowser.open(url)
            else:
                pass
        else:
            pass

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Tooltip Assignment Handler
    #
    # Handles tooltip assignment to controls:
    # - Configures tooltip behavior
    # - Sets timing parameters
    # - Assigns tooltip text
    ###############################################################################
    
    # [APP:UI:TOOLTIP_HANDLER] Assigns a tooltip to a specified control
    def assign_tooltip(self, control, tooltip_text):
        """
        Assigns a tooltip to a specified control.
        """
        tooltip = ToolTip()
        tooltip.AutoPopDelay = 5000
        tooltip.InitialDelay = 500
        tooltip.ReshowDelay = 100
        tooltip.ShowAlways = True
        tooltip.SetToolTip(control, tooltip_text)
    
    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Report Tab Creation Handler
    #
    # Handles creation of report tab with full functionality:
    # - Creates tab structure
    # - Adds toolstrips and buttons
    # - Configures DataGridView
    # - Sets up export/print options
    # - Manages edit/delete operations
    # - Configures color tools
    ###############################################################################

    # [APP:UI:REPORT_TAB_HANDLER] Creates a report tab with full functionality
    def create_report_tab(self, headers, data, editable_columns, title="Report Data"):
        """
        Creates a report tab.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from structure.root import lan_path
        from UI.strings_report import(str_rep_1, str_rep_2, str_rep_3, str_rep_4, str_rep_5, str_rep_6, str_rep_7, str_rep_8, str_rep_9, 
        str_rep_10, str_rep_11, str_rep_12, str_rep_13, str_rep_14, str_rep_15, str_rep_16, str_rep_17, str_rep_18, str_rep_19, str_rep_20, 
        str_rep_21, str_rep_22, str_rep_23, str_rep_24, str_rep_25)
        from UI.strings_report import(tip_rep_1, tip_rep_2, tip_rep_3, tip_rep_4, tip_rep_5, tip_rep_6, tip_rep_7, tip_rep_8, 
        tip_rep_9, tip_rep_10, tip_rep_11, tip_rep_12, tip_rep_13, tip_rep_14, tip_rep_15, 
        tip_rep_16, tip_rep_17, tip_rep_18, tip_rep_19, tip_rep_20, tip_rep_21, tip_rep_22, tip_rep_23)

        # [UI:CREATE_TAB] Create a new tab for the report
        report_tab = TabPage(str_rep_1(lan))
        self.tab_control.TabPages.Add(report_tab)
        report_tab.ImageIndex = 1
        report_tab.Controls.Add(self.tool_strip2)

        # [UI:IMAGE_LIST] Define and populate the ImageList for toolstrip icons
        report_tab_image_list = [ 
            back_tab_button(), #0
            export_app_button(), #1
            print_app_report_button(), #2
            html_app_button(), #3
            xlsx_app_button(), #4
            csv_app_button(), #5
            bimpars_report_icon(), #6
            pyrevit_icon(), #7
            filter_app_button(), #8
            find_app_button(), #9
            edit_app_button(), #10
            delete_app_icon(), #11
            color_app_button(), #12
            clean_button(), #13
            add_bottom_app_button(), #14
            add_top_app_button(), #15
            add_right_app_button(), #16
            add_left_app_button(), #17
            write_app_button(), #18
            delete_row_app_button(), #19
            delete_column_app_button(), #20
            delete_hiden_app_button(), #21
            similar_item_color_button(), #22
            numeric_gradient_button(), #23
            paint_app_button(), #24
            similar_item_color_full_sheet_button(), #25
        ]

        report_image_list = ImageList()
        report_image_list.ImageSize = Size(40, 40)
        for image_path in report_tab_image_list:
            report_image_list.Images.Add(Image.FromFile(image_path))

        # [UI:CREATE_TOOLSTRIP] Create and configure the ToolStrip
        report_tab_toolstrip = ToolStrip()
        report_tab_toolstrip.Dock = DockStyle.Top
        report_tab_toolstrip.Height = 50
        report_tab_toolstrip.ImageScalingSize = Size(24, 24)

        # [UI:CREATE_BUTTONS] Create buttons and dropdowns for the ToolStrip
        report_tab_back_button = ToolStripButton()
        report_tab_back_button.Image = report_image_list.Images[0]
        report_tab_back_button.ToolTipText = tip_rep_1(lan)
        report_tab_back_button.Click += self.back_to_toolbox

        report_tab_export_dropdown_button = ToolStripDropDownButton(tip_rep_2(lan))
        report_tab_export_dropdown_button.Image = report_image_list.Images[1]

        report_tab_export_option1 = ToolStripMenuItem(str_rep_23(lan), report_image_list.Images[3], self.export_datagrid_html)
        report_tab_export_option1.ToolTipText = tip_rep_4(lan)
        
        report_tab_export_option2 = ToolStripMenuItem(str_rep_24(lan), report_image_list.Images[4], self.export_datagrid_excel)
        report_tab_export_option2.ToolTipText = tip_rep_5(lan)
        
        report_tab_export_option3 = ToolStripMenuItem(str_rep_25(lan), report_image_list.Images[5], self.export_datagrid_csv)
        report_tab_export_option3.ToolTipText = tip_rep_6(lan)

        report_tab_export_dropdown_button.DropDownItems.Add(report_tab_export_option1)
        report_tab_export_dropdown_button.DropDownItems.Add(report_tab_export_option2)
        report_tab_export_dropdown_button.DropDownItems.Add(report_tab_export_option3)

        report_tab_print_dropdown_button = ToolStripDropDownButton(tip_rep_3(lan))
        report_tab_print_dropdown_button.Image = report_image_list.Images[2]

        report_tab_option1_print = ToolStripMenuItem(str_rep_9(lan), report_image_list.Images[7], self.on_report_tab_option1_print_click)
        report_tab_option1_print.ToolTipText = tip_rep_7(lan)
        report_tab_option2_print = ToolStripMenuItem(str_rep_10(lan), report_image_list.Images[6], self.on_report_tab_option2_print_click)
        report_tab_option2_print.ToolTipText = tip_rep_8(lan)
        report_tab_option2_print.Enabled = False

        report_tab_print_dropdown_button.DropDownItems.Add(report_tab_option1_print)
        report_tab_print_dropdown_button.DropDownItems.Add(report_tab_option2_print)

        # [UI:ADD_TOOLSTRIP_ITEMS] Add buttons and dropdowns to the ToolStrip
        report_tab_toolstrip.Items.Add(report_tab_back_button)
        report_tab_toolstrip.Items.Add(ToolStripSeparator())
        report_tab_toolstrip.Items.Add(report_tab_print_dropdown_button)
        report_tab_toolstrip.Items.Add(ToolStripSeparator())
        report_tab_toolstrip.Items.Add(report_tab_export_dropdown_button)

        # [UI:ADD_TOOLSTRIP] Add the ToolStrip to the report tab
        report_tab.Controls.Add(report_tab_toolstrip)

        # [UI:CREATE_GROUPBOX] Create and configure the GroupBox
        report_group_box = GroupBox()
        report_group_box.Text = title
        report_group_box.Dock = DockStyle.Fill
        report_group_box.Padding = Padding(10)
        report_group_box.Size = Size(655,400)

        # [UI:CREATE_DATAGRID] Create the DataGridView using the helper function
        grid = create_data_grid(
            Point(10, 35),
            (600, 320),
            headers,
            data,
            editable_columns
        )
        grid.AllowUserToAddRows = False
        grid.AllowUserToDeleteRows = False
        grid.AllowUserToOrderColumns = True

        # [UI:CREATE_DATAGRID_TOOLSTRIP] Create a ToolStrip for the data grid
        data_grid_toolstrip = ToolStrip()
        data_grid_toolstrip.Dock = DockStyle.Bottom
        data_grid_toolstrip.Height = 50
        data_grid_toolstrip.ImageScalingSize = Size(24, 24)

        # [UI:CREATE_FILTER_BUTTON] Create filter button for the data grid toolstrip
        data_grid_action1_button = ToolStripButton(str_rep_3(lan))
        data_grid_action1_button.Image = report_image_list.Images[8]
        data_grid_action1_button.ToolTipText = tip_rep_9(lan)
        data_grid_action1_button.Click += self.on_data_grid_action_filter_click

        # [UI:CREATE_FIND_BUTTON] Create find button for the data grid toolstrip
        data_grid_action2_button = ToolStripButton(str_rep_4(lan))
        data_grid_action2_button.Image = report_image_list.Images[9]
        data_grid_action2_button.ToolTipText = tip_rep_10(lan)
        data_grid_action2_button.Click += self.on_data_grid_action2_click

        # [UI:CREATE_EDIT_DROPDOWN] Create edit dropdown button
        data_grid_edit_dropdown = ToolStripDropDownButton(str_rep_5(lan))
        data_grid_edit_dropdown.Image = report_image_list.Images[10]  

        # [UI:CREATE_EDIT_OPTIONS] Create menu items for edit options
        add_column_right_item = ToolStripMenuItem(str_rep_11(lan), report_image_list.Images[16], self.add_column)
        add_column_right_item.ToolTipText = tip_rep_11(lan)

        add_column_left_item = ToolStripMenuItem(str_rep_12(lan), report_image_list.Images[17], self.add_column_left)
        add_column_left_item.ToolTipText = tip_rep_12(lan)

        add_row_top_item = ToolStripMenuItem(str_rep_13(lan), report_image_list.Images[15], self.add_row)
        add_row_top_item.ToolTipText = tip_rep_13(lan)

        add_row_bottom_item = ToolStripMenuItem(str_rep_14(lan), report_image_list.Images[14], self.add_row_bottom)
        add_row_bottom_item.ToolTipText = tip_rep_14(lan)

        assign_value_item = ToolStripMenuItem(str_rep_15(lan), report_image_list.Images[18], self.assign_value)
        assign_value_item.ToolTipText = tip_rep_15(lan)

        # [UI:ADD_EDIT_ITEMS] Add all items to edit dropdown
        data_grid_edit_dropdown.DropDownItems.Add(add_column_right_item)
        data_grid_edit_dropdown.DropDownItems.Add(add_column_left_item)
        data_grid_edit_dropdown.DropDownItems.Add(add_row_top_item)
        data_grid_edit_dropdown.DropDownItems.Add(add_row_bottom_item)
        data_grid_edit_dropdown.DropDownItems.Add(ToolStripSeparator())
        data_grid_edit_dropdown.DropDownItems.Add(assign_value_item)

        # [UI:CREATE_DELETE_DROPDOWN] Create delete dropdown button
        data_grid_delete_dropdown = ToolStripDropDownButton(str_rep_6(lan))
        data_grid_delete_dropdown.Image = report_image_list.Images[11]  
        
        # [UI:CREATE_DELETE_OPTIONS] Create menu items for delete options
        delete_rows_item = ToolStripMenuItem(str_rep_16(lan), report_image_list.Images[19], self.delete_selected_rows)
        delete_rows_item.ToolTipText = tip_rep_16(lan)

        delete_columns_item = ToolStripMenuItem(str_rep_17(lan), report_image_list.Images[20], self.delete_selected_columns)
        delete_columns_item.ToolTipText = tip_rep_17(lan)

        delete_hiden_item = ToolStripMenuItem(str_rep_18(lan), report_image_list.Images[21], self.delete_hiden_cells)
        delete_hiden_item.ToolTipText = tip_rep_18(lan)
        
        # [UI:ADD_DELETE_ITEMS] Add menu items to delete dropdown
        data_grid_delete_dropdown.DropDownItems.Add(delete_rows_item)
        data_grid_delete_dropdown.DropDownItems.Add(delete_columns_item)
        data_grid_delete_dropdown.DropDownItems.Add(ToolStripSeparator())
        data_grid_delete_dropdown.DropDownItems.Add(delete_hiden_item)

        # [UI:CREATE_COLOR_DROPDOWN] Create gradient color dropdown button
        data_grid_gradient_color = ToolStripDropDownButton(str_rep_7(lan))
        data_grid_gradient_color.Image = report_image_list.Images[12]  
        
        # [UI:CREATE_COLOR_OPTIONS] Create menu items for gradient color options
        similar_catch_color = ToolStripMenuItem(str_rep_19(lan), report_image_list.Images[22], self.apply_similar_items_color)
        similar_catch_color.ToolTipText = tip_rep_19(lan)

        similar_catch_color_full_sheet = ToolStripMenuItem(str_rep_20(lan), report_image_list.Images[25], self.apply_similar_items_color_full_sheet)
        similar_catch_color_full_sheet.ToolTipText = tip_rep_20(lan)

        numeric_gradient_color = ToolStripMenuItem(str_rep_21(lan), report_image_list.Images[23], self.apply_numeric_gradient)
        numeric_gradient_color.ToolTipText = tip_rep_21(lan)

        paint_cells = ToolStripMenuItem(str_rep_22(lan), report_image_list.Images[24], self.paint_selected_cells)
        paint_cells.ToolTipText = tip_rep_22(lan)

        # [UI:ADD_COLOR_ITEMS] Add menu items to gradient color dropdown
        data_grid_gradient_color.DropDownItems.Add(similar_catch_color)
        data_grid_gradient_color.DropDownItems.Add(similar_catch_color_full_sheet)
        data_grid_gradient_color.DropDownItems.Add(ToolStripSeparator())
        data_grid_gradient_color.DropDownItems.Add(numeric_gradient_color)
        data_grid_gradient_color.DropDownItems.Add(ToolStripSeparator())
        data_grid_gradient_color.DropDownItems.Add(paint_cells)

        # [UI:CREATE_CLEAN_BUTTON] Create clean colors button
        data_grid_clean_button = ToolStripButton()
        data_grid_clean_button.Text = str_rep_8(lan)
        data_grid_clean_button.Image = report_image_list.Images[13]  
        data_grid_clean_button.ToolTipText = tip_rep_23(lan)
        data_grid_clean_button.Click += self.clean_grid_colors

        # [UI:ADD_TOOLSTRIP_ITEMS] Add buttons to the data grid toolstrip
        data_grid_toolstrip.Items.Add(data_grid_action1_button)
        data_grid_toolstrip.Items.Add(ToolStripSeparator())
        data_grid_toolstrip.Items.Add(data_grid_action2_button)
        data_grid_toolstrip.Items.Add(ToolStripSeparator())
        data_grid_toolstrip.Items.Add(data_grid_edit_dropdown)
        data_grid_toolstrip.Items.Add(ToolStripSeparator())
        data_grid_toolstrip.Items.Add(data_grid_delete_dropdown)
        data_grid_toolstrip.Items.Add(ToolStripSeparator())
        data_grid_toolstrip.Items.Add(data_grid_gradient_color)
        data_grid_toolstrip.Items.Add(ToolStripSeparator())
        data_grid_toolstrip.Items.Add(data_grid_clean_button)  

        # [UI:ADD_CONTROLS] Add the grid and toolstrip to the GroupBox
        report_group_box.Controls.Add(grid)
        report_group_box.Controls.Add(data_grid_toolstrip)

        # [UI:ADD_GROUPBOX] Add the GroupBox to the tab
        report_tab.Controls.Add(report_group_box)

        # [UI:SWITCH_TAB] Switch to the newly created tab
        self.tab_control.SelectedTab = report_tab
        self.tab1.Enabled = False

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Toolbox Navigation Handler
    #
    # Handles navigation back to Toolbox tab:
    # - Manages tab controls
    # - Removes current tab
    # - Restores Toolbox tab
    # - Maintains UI state
    # - Handles tab switching
    ###############################################################################

    # [APP:UI:TOOLBOX_NAVIGATION] Handles navigation back to the Toolbox tab
    def back_to_toolbox(self, sender, event):
        """
        Switches back to the Toolbox tab.
        """
        self.tab1.Controls.Add(self.tool_strip2)
        self.tool_strip2.Dock = DockStyle.Right
        current_tab = self.tab_control.SelectedTab
        self.tab1.Enabled = True
        self.tab_control.TabPages.Remove(current_tab)

        # [UI:IMPORT_STRINGS] Import necessary strings
        from UI.strings_main import str_2
       
       # [UI:FIND_TOOLBOX_TAB] Check if the Toolbox tab exists
        toolbox_tab = self.tab_control.TabPages[str_2(lan)] if str_2(lan) in [tab.Text for tab in self.tab_control.TabPages] else None
        if toolbox_tab is not None:
            self.tab_control.SelectedTab = toolbox_tab  

    ###############################################################################
    # [APP:DOC:UI MANAGEMENT] Empty Grid Navigation Handler
    #
    # Handles navigation back to Toolbox tab when grid is empty:
    # - Manages tab controls
    # - Removes empty tab
    # - Restores Toolbox tab
    # - Maintains UI state
    # - Handles tab switching
    ###############################################################################

    # [APP:UI:EMPTY_GRID_NAVIGATION] Handles navigation back to the Toolbox tab when the grid is empty
    def back_to_toolbox_grid_empty(self):
        """
        Switches back to the Toolbox tab when the grid is empty.
        """
        self.tab1.Controls.Add(self.tool_strip2)
        self.tool_strip2.Dock = DockStyle.Right
        current_tab = self.tab_control.SelectedTab
        self.tab1.Enabled = True
        self.tab_control.TabPages.Remove(current_tab)

        # [UI:IMPORT_STRINGS] Import necessary strings
        from UI.strings_main import str_2
        
        # [UI:FIND_TOOLBOX_TAB] Check if the Toolbox tab exists
        toolbox_tab = self.tab_control.TabPages[str_2(lan)] if str_2(lan) in [tab.Text for tab in self.tab_control.TabPages] else None
        if toolbox_tab is not None:
            self.tab_control.SelectedTab = toolbox_tab  

    ###############################################################################
    # [APP:DOC:EXPORT] HTML Export Handler
    #
    # Handles exporting grid data to HTML with formatting:
    # - Validates grid existence
    # - Manages file dialog
    # - Generates HTML structure
    # - Preserves colors and styles
    # - Reports export status
    # - Maintains UI state
    ###############################################################################
    
    # [APP:EXPORT:HTML_HANDLER] Handles exporting grid data to HTML with formatting
    def export_datagrid_html(self, sender, event):  #[ISSUE:encodeing for none english]
        """
        Exports the data grid to an HTML file.
        """
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            import System
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_28, str_rep_29, str_rep_30, str_rep_31, str_rep_32, str_rep_33
            from structure.root import lan_path

            lan = lan_path()
            
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [UI:CREATE_SAVE_DIALOG] Create SaveFileDialog for HTML export
            save_dialog = SaveFileDialog()
            save_dialog.Filter = "HTML files (*.html)|*.html"
            save_dialog.Title = str_rep_29(lan)
            save_dialog.DefaultExt = "html"
            
            # [UI:SAVE_FILE] Proceed if the user confirms the save dialog
            if save_dialog.ShowDialog() == DialogResult.OK:
                try:
                    # [HTML:CREATE_CONTENT] Generate HTML content
                    html_content = [
                        "<html>",
                        "<head>",
                        "<style>",
                        "table { border-collapse: collapse; width: 100%; }",
                        "th, td { border: 1px solid black; padding: 8px; text-align: left; }",
                        "th { background-color: #f2f2f2; }",
                        "</style>",
                        "</head>",
                        "<body>",
                        "<table>",
                        "<tr>"
                    ]
                    
                    # [HTML:ADD_HEADERS] Add headers to the HTML table
                    for col in range(grid.ColumnCount):
                        html_content.append("<th>%s</th>" % grid.Columns[col].HeaderText)
                    html_content.append("</tr>")
                    
                    # [HTML:ADD_ROWS] Add data rows to the HTML table
                    for row in range(grid.RowCount):
                        html_content.append("<tr>")
                        for col in range(grid.ColumnCount):
                            cell = grid.Rows[row].Cells[col]
                            value = cell.Value if cell.Value is not None else ""
                            
                            # [HTML:ADD_CELL_COLOR] Add background color if it exists
                            if cell.Style.BackColor != System.Drawing.Color.Empty:
                                bg_color = " style='background-color: rgb(%d, %d, %d)'" % (
                                    cell.Style.BackColor.R,
                                    cell.Style.BackColor.G,
                                    cell.Style.BackColor.B
                                )
                                html_content.append("<td%s>%s</td>" % (bg_color, value))
                            else:
                                html_content.append("<td>%s</td>" % value)
                        html_content.append("</tr>")
                    
                    # [HTML:CLOSE_TAGS] Add closing tags to the HTML content
                    html_content.extend([
                        "</table>",
                        "</body>",
                        "</html>"
                    ])
                    
                    # [FILE:SAVE_HTML] Save the HTML content to the file
                    with open(save_dialog.FileName, 'w') as f:
                        f.write('\n'.join(html_content))
                    
                    # [UI:SHOW_SUCCESS] Show success message
                    MessageBox.Show(str_rep_30(lan),str_rep_31(lan))

                except Exception as ex:
                    # [UI:SHOW_ERROR] Show error message if export fails
                    MessageBox.Show(str_rep_32(lan))

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:EXPORT] Excel Export Handler
    #
    # Handles exporting grid data to Excel with formatting:
    # - Validates grid existence
    # - Manages file dialog
    # - Creates Excel workbook
    # - Applies cell formatting
    # - Preserves colors and styles
    # - Reports export status
    ###############################################################################

    # [APP:EXPORT:EXCEL_HANDLER] Handles exporting grid data to Excel with formatting
    def export_datagrid_excel(self, sender, event):
        """
        Exports the data grid to Excel with formatting.
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            import System
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_28, str_rep_29, str_rep_30, str_rep_31, str_rep_32, str_rep_33, str_rep_34, str_rep_35, str_rep_36
            from structure.root import lan_path
            lan = lan_path()
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [UI:CREATE_SAVE_DIALOG] Create SaveFileDialog for Excel export
            save_dialog = SaveFileDialog()
            save_dialog.Filter = "Excel files (*.xlsx)|*.xlsx"
            save_dialog.Title = str_rep_34(lan)
            save_dialog.DefaultExt = "xlsx"

            # [UI:SAVE_FILE] Proceed if the user confirms the save dialog
            if save_dialog.ShowDialog() == DialogResult.OK:
                try:
                    # [SCRIPT:IMPORTS] Import necessary libraries
                    import clr
                    clr.AddReference('Microsoft.Office.Interop.Excel')
                    from Microsoft.Office.Interop.Excel import ApplicationClass
                    from System.Runtime.InteropServices import Marshal

                    # [EXCEL:INIT] Add reference to Excel interop and create Excel application
                    excel_app = ApplicationClass()
                    excel_app.Visible = False
                    workbook = excel_app.Workbooks.Add()
                    worksheet = workbook.ActiveSheet

                    # [EXCEL:WRITE_HEADERS] Write headers with formatting
                    for col in range(grid.ColumnCount):
                        cell = worksheet.Cells[1, col + 1]
                        cell.Value2 = grid.Columns[col].HeaderText
                        cell.Interior.Color = 0xF2F2F2  # Light gray
                        cell.Font.Bold = True

                    # [EXCEL:WRITE_DATA] Write data with formatting
                    for row in range(grid.RowCount):
                        for col in range(grid.ColumnCount):
                            cell = grid.Rows[row].Cells[col]
                            excel_cell = worksheet.Cells[row + 2, col + 1]
                            
                            # [EXCEL:WRITE_VALUE] Write value to Excel cell
                            excel_cell.Value2 = cell.Value if cell.Value is not None else ""
                            
                            # [EXCEL:APPLY_BACKGROUND_COLOR] Apply background color if exists
                            if cell.Style.BackColor != Color.Empty:
                                rgb = (cell.Style.BackColor.R, cell.Style.BackColor.G, cell.Style.BackColor.B)
                                excel_cell.Interior.Color = rgb[0] + (rgb[1] * 256) + (rgb[2] * 256 * 256)
                            
                            # [EXCEL:APPLY_TEXT_COLOR] Apply text color if exists
                            if cell.Style.ForeColor != Color.Empty:
                                rgb = (cell.Style.ForeColor.R, cell.Style.ForeColor.G, cell.Style.ForeColor.B)
                                excel_cell.Font.Color = rgb[0] + (rgb[1] * 256) + (rgb[2] * 256 * 256)

                    # [EXCEL:AUTOFIT_COLUMNS] Auto-fit columns
                    worksheet.UsedRange.Columns.AutoFit()
                    
                    # [EXCEL:ADD_BORDERS] Add borders to the used range
                    worksheet.UsedRange.Borders.LineStyle = 1

                    # [EXCEL:SAVE_CLOSE] Save and close the workbook
                    workbook.SaveAs(str(save_dialog.FileName))  
                    workbook.Close(False)
                    excel_app.Quit()

                    # [EXCEL:CLEANUP] Clean up COM objects
                    Marshal.ReleaseComObject(worksheet)
                    Marshal.ReleaseComObject(workbook)
                    Marshal.ReleaseComObject(excel_app)

                    # [UI:SHOW_SUCCESS] Show success message
                    MessageBox.Show(str_rep_35(lan), str_rep_31(lan))

                except Exception as ex:
                    # [UI:SHOW_ERROR] Show error message if export fails
                    MessageBox.Show(str_rep_36(lan).format(str(ex)),str_rep_33(lan))
                    try:
                        workbook.Close(False)
                        excel_app.Quit()
                    except:
                        pass

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:EXPORT] CSV Export Handler
    #
    # Handles exporting grid data to CSV:
    # - Validates grid existence
    # - Manages file dialog
    # - Writes headers and data
    # - Handles encoding
    # - Reports export status
    # - Maintains UI state
    ###############################################################################

    # [APP:EXPORT:CSV_HANDLER] Handles exporting grid data to CSV
    def export_datagrid_csv(self, sender, event):
        """
        Exports the data grid to a CSV file (colors not preserved).
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            import System
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_28, str_rep_29, str_rep_30, str_rep_31, str_rep_32, str_rep_33, str_rep_34, str_rep_35, str_rep_36, str_rep_37, str_rep_38, str_rep_39
            from structure.root import lan_path

            lan = lan_path()
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [UI:CREATE_SAVE_DIALOG] Create SaveFileDialog for CSV export
            save_dialog = SaveFileDialog()
            save_dialog.Filter = "CSV files (*.csv)|*.csv"
            save_dialog.Title = str_rep_37(lan)
            save_dialog.DefaultExt = "csv"

            # [UI:SAVE_FILE] Proceed if the user confirms the save dialog
            if save_dialog.ShowDialog() == DialogResult.OK:
                try:
                    # [SCRIPT:IMPORTS] Import necessary libraries
                    import csv
                    import io

                    # [CSV:WRITE_FILE] Open the file in write mode with encoding
                    with io.open(save_dialog.FileName, 'w', encoding='utf-8') as csvfile:
                        writer = csv.writer(csvfile)
                        
                        # [CSV:WRITE_HEADERS] Write headers to the CSV file
                        headers = [grid.Columns[col].HeaderText for col in range(grid.ColumnCount)]
                        writer.writerow(headers)
                        
                        # [CSV:WRITE_DATA] Write data rows to the CSV file
                        for row in range(grid.RowCount):
                            row_data = []
                            for col in range(grid.ColumnCount):
                                cell_value = grid.Rows[row].Cells[col].Value
                                row_data.append(cell_value if cell_value is not None else "")
                            writer.writerow(row_data)

                    # [UI:SHOW_SUCCESS] Show success message
                    MessageBox.Show(str_rep_38(lan), str_rep_31(lan))

                except Exception as ex:
                    # [UI:SHOW_ERROR] Show error message if export fails
                    MessageBox.Show(str_rep_39(lan).format(str(ex)) ,str_rep_33(lan))

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            #MessageBox.Show(str(e), str_rep_33(lan))
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:REPORTING] PyRevit Output Window Print Handler
    #
    # Handles printing reports to pyRevit output window:
    # - Extracts grid data
    # - Linkifies element IDs
    # - Formats output
    # - Adds header information
    # - Manages logos and branding
    # - Maintains UI state
    ###############################################################################    

    # [APP:REPORTING:PYREVIT_PRINT_HANDLER] Handles printing reports to pyRevit output window
    def on_report_tab_option1_print_click(self, sender, event):
        """
        Handles pyRevit output window for printing the report.
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            
            # [SCRIPT:IMPORTS] Import necessary libraries
            from pyrevit import script
            import getpass  
            from datetime import datetime  
            import sys, os
            sys.path.append(os.path.dirname(__file__))
            from structure.root import lan_path, logo_path, cuslogo_path
            from UI.strings_main import str_24, str_25, str_26, str_28, str_h1, str_h2
            from structure.root import lan_path

            lan = lan_path()

            # [SCRIPT:LINKIFY_ELEMENT_IDS] Linkifies element IDs in the specified column
            def linkify_element_ids(table_data, headers, id_column_index):
                """
                Linkifies element IDs in the specified column if they are numeric.
                Returns the modified table data.
                """
                # [SCRIPT:IMPORTS] Import necessary libraries
                from pyrevit import script
                from Autodesk.Revit.DB import ElementId
                output = script.get_output()
                
                modified_data = []
                for row in table_data:
                    try:
                        int_id = int(row[id_column_index])
                        element_id = ElementId(int_id)
                        row[id_column_index] = output.linkify(element_id)
                    except (ValueError, TypeError):
                        pass
                    modified_data.append(row)
                return modified_data

            # [UI:GET_GRID_DATA] Get data from DataGridView and GroupBox title
            grid = None
            group_box_title = "Report Data"
            for control in self.tab_control.SelectedTab.Controls:
                if isinstance(control, GroupBox):
                    group_box_title = control.Text  
                    for sub_control in control.Controls:
                        if isinstance(sub_control, DataGridView):
                            grid = sub_control
                            break
            
            if grid:
                # [DATA:EXTRACT_HEADERS] Extract headers from the grid
                headers = [grid.Columns[i].HeaderText for i in range(grid.ColumnCount)]
                formats = [''] * grid.ColumnCount  
                
                # [DATA:EXTRACT_ROWS] Extract data rows from the grid
                table_data = []
                for row_idx in range(grid.RowCount):
                    row_data = []
                    for col_idx in range(grid.ColumnCount):
                        cell_value = grid.Rows[row_idx].Cells[col_idx].Value
                        row_data.append(str(cell_value) if cell_value is not None else "")
                    table_data.append(row_data)
                
                # [DATA:LINKIFY_IDS] Linkify element IDs based on the report title
                if group_box_title == tool_str_1(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_2(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_3(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_4(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_5(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_6(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_7(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_8(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_9(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_10(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_11(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_12(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_13(lan):
                    id_column_index = headers.index(str_27(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_14(lan):
                    id_column_index = headers.index(str_28(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_15(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_16(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_17(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_18(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_19(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_25(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_26(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_27(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_28(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_30(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_33(lan):
                    id_column_index = headers.index(str_24(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_34(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_37(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_38(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_39(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_40(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_41(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_42(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_43(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_44(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                elif group_box_title == tool_str_45(lan):
                    id_column_index = headers.index(str_25(lan))  
                    table_data = linkify_element_ids(table_data, headers, id_column_index)
                

            # [PYREVIT:SETUP_OUTPUT] Setup pyRevit output
            output = script.get_output()
            logo_path_value = logo_path()
            cuslogo_path_value = cuslogo_path()
            output.set_icon(report_icon())
            output.set_title(str(group_box_title))  
            
            # [PYREVIT:PRINT_HEADER] Print header information
            current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            user_name = getpass.getuser() or "Unknown User"
            sarbarg = ""
            
            if os.path.exists(cuslogo_path_value):
                output.print_md("###  {}".format(sarbarg))
                output.print_md(str_h1(lan_path()).format(current_datetime))
                output.print_md(str_h2(lan_path()).format(user_name))
                output.print_image(cuslogo_path_value)
            else:
                output.print_md("###  {}".format(sarbarg))
                output.print_md(str_h1(lan_path()).format(current_datetime))
                output.print_md(str_h2(lan_path()).format(user_name))
                output.print_image(logo_path_value)

            # [PYREVIT:PRINT_TABLE] Print the table with potentially linkified data
            output.print_table(
                table_data=table_data,
                title=group_box_title,
                columns=headers,
                formats=formats,
                last_line_style='color:black;'
            )
            
            # [UI:CLOSE_FORM] Close the Windows Form
            self.Close()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:REPORTING] BIM Pars Print Handler
    #
    # Handles BIM Pars print functionality:
    # - Manages print operation
    # - Displays status message
    # - Maintains language support
    ###############################################################################

    # [APP:REPORTING:BIM_PARS_PRINT_HANDLER] Handles BIM Pars print functionality
    def on_report_tab_option2_print_click(self, sender, event):
        """
        Handles BIM Pars print.
        """
        # [SCRIPT:IMPORTS] Import necessary libraries
        from UI.strings_report import tip_rep_8
        from structure.root import lan_path

        lan = lan_path()

        # [UI:SHOW_MESSAGE] Display status message for BIM Pars print
        MessageBox.Show(tip_rep_8(lan))

    ###############################################################################
    # [APP:DOC:GRID FILTERING] Value-Based Filter Handler
    #
    # Handles filtering of grid data based on selected values:
    # - Extracts unique values
    # - Groups by columns
    # - Manages filter selection
    # - Applies visibility rules
    # - Updates grid display
    # - Maintains UI state
    ###############################################################################

    # [APP:GRID:FILTER_HANDLER] Handles filtering of grid data based on selected values
    def on_data_grid_action_filter_click(self, sender, event):  
        """
        Handles filter action for the data grid.
        """
        try:
            # [UI:HIDE_FORM] Hide the current form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_33, str_rep_3, str_rep_40, str_rep_41
            from structure.root import lan_path

            lan = lan_path()
            
            # [UI:GET_GRID] Get the data from the grid
            grid = None
            column_groups = {}
            
            for control in self.tab_control.SelectedTab.Controls:
                if isinstance(control, GroupBox):
                    for sub_control in control.Controls:
                        if isinstance(sub_control, DataGridView):
                            grid = sub_control
                            break
            
            if grid:
                # [DATA:EXTRACT_UNIQUE_VALUES] Extract unique values from each column
                for col_idx in range(grid.ColumnCount):
                    unique_values = set()
                    for row_idx in range(grid.RowCount):
                        cell_value = grid.Rows[row_idx].Cells[col_idx].Value
                        if cell_value is not None:
                            unique_values.add(str(cell_value))
                    column_name = grid.Columns[col_idx].HeaderText
                    column_groups[column_name] = sorted(list(unique_values))
                
                # [UI:SHOW_FILTER_DIALOG] Use pyRevit forms to show filter selection dialog
                selected_groups = forms.SelectFromList.show(
                    column_groups,
                    title=str_rep_3(lan), 
                    group_selector_title=str_rep_41(lan),
                    button_name=str_rep_40(lan),
                    multiselect=True
                )
                
                # [GRID:APPLY_FILTER] Apply the filter if values were selected
                if selected_groups:
                    selected_values_set = set(selected_groups)
                    for row_idx in range(grid.RowCount):
                        row = grid.Rows[row_idx]
                        show_row = False
                        for col_idx in range(grid.ColumnCount):
                            cell_value = row.Cells[col_idx].Value
                            cell_str = str(cell_value) if cell_value is not None else ''
                            if cell_str in selected_values_set:
                                show_row = True
                                break
                        row.Visible = show_row
            
            # [UI:SHOW_FORM] Show the form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show() 

    ###############################################################################
    # [APP:DOC:GRID SEARCH] Value Search and Selection Handler
    #
    # Handles searching and selecting cells with matching values:
    # - Validates grid existence
    # - Manages search input dialog
    # - Processes cell comparisons
    # - Handles case sensitivity
    # - Tracks search results
    # - Reports search status
    ###############################################################################

    # [APP:GRID:SEARCH_HANDLER] Handles searching and selecting cells with matching values
    def on_data_grid_action2_click(self, sender, event):
        """
        Searches and selects all cells containing a user-defined value.
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_42, str_rep_43, str_rep_44, str_rep_45
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_4
            icon_path = find_app_ico_icon()
            search_image_path = find_app_gif_icon()
            ok_icon_path = ok_icon()
            cancel_icon_path = cancel_icon()
            parameter_label = str_rep_42(lan)
            url = parsweb(wurl)
            window_name = str_rep_4(lan)

            user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
            
            if user_input is not None:
                 # [GRID:CLEAR_SELECTION] Clear existing selection
                grid.ClearSelection()
                
                # [GRID:SEARCH_CELLS] Search through all cells for matching values
                found_count = 0
                for row_index in range(grid.RowCount):
                    for col_index in range(grid.ColumnCount):
                        cell = grid.Rows[row_index].Cells[col_index]
                        if cell.Value is not None:
                            cell_value_str = str(cell.Value).strip().upper()
                            user_input_cleaned = user_input.strip().upper()
                            
                            if cell_value_str == user_input_cleaned:
                                cell.Selected = True
                                found_count += 1
                
                # [UI:SHOW_SEARCH_RESULTS] Show search results
                if found_count > 0:
                    MessageBox.Show(str_rep_44(lan).format(found_count, user_input), str_rep_43(lan))
                else:
                    MessageBox.Show(str_rep_45(lan).format(user_input), str_rep_43(lan))
            
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
            
        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:GRID EDITING] Left Column Insertion Handler
    #
    # Handles insertion of new editable column to the left:
    # - Validates grid existence
    # - Determines insertion position
    # - Creates column with properties
    # - Sets visual indicators
    # - Configures cell editability
    # - Sets up event handling
    ###############################################################################

    # [APP:GRID:LEFT_COLUMN_INSERTION] Handles insertion of a new editable column to the left
    def add_column_left(self, sender, event):
        """
        Adds a new editable column to the left of the selected column.
        """
        try:
            # [UI:SHOW_FORM] Show the Windows Form
            self.Show()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_31, str_rep_43, str_rep_46, str_rep_47
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [GRID:GET_INSERT_INDEX] Get the current column index for insertion
            insert_index = grid.CurrentCell.ColumnIndex if grid.CurrentCell else 0

            # [GRID:CREATE_NEW_COLUMN] Create a new column with default properties
            new_column = DataGridViewTextBoxColumn()
            new_column.HeaderText = str_rep_46(lan)
            new_column.Name = str_rep_46(lan)
            new_column.ReadOnly = False
            
            # [GRID:SET_VISUAL_INDICATORS] Make the column header visually distinct
            new_column.HeaderCell.Style.BackColor = Color.LightYellow
            new_column.Tag = "editable"
            
            # [GRID:INSERT_COLUMN] Insert the column at the specified index
            grid.Columns.Insert(insert_index, new_column)
            
            # [GRID:INITIALIZE_CELLS] Initialize cells in the new column as empty and editable
            for row_index in range(grid.RowCount):
                grid.Rows[row_index].Cells[insert_index].Value = ""
                grid.Rows[row_index].Cells[insert_index].ReadOnly = False

            # [GRID:ADD_EVENT_HANDLER] Add double-click event handler for the header
            grid.ColumnHeaderMouseDoubleClick -= self.on_header_double_click  
            grid.ColumnHeaderMouseDoubleClick += self.on_header_double_click

            # [UI:SHOW_SUCCESS] Show success message
            MessageBox.Show(str_rep_47(lan), str_rep_31(lan))

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:GRID EDITING] Bottom Row Insertion Handler
    #
    # Handles insertion of new editable row below selection:
    # - Validates grid existence
    # - Determines insertion position
    # - Creates empty row
    # - Sets cell properties
    # - Ensures editability
    # - Maintains UI state
    ###############################################################################

    # [APP:GRID:BOTTOM_ROW_INSERTION] Handles insertion of a new editable row below selection
    def add_row_bottom(self, sender, event):
        """
        Adds a new editable row below the selected row.
        """
        try:
            # [UI:SHOW_FORM] Show the Windows Form
            self.Show()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_31, str_rep_43, str_rep_46, str_rep_48
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [GRID:GET_INSERT_INDEX] Get the current row index for insertion
            insert_index = grid.CurrentCell.RowIndex + 1 if grid.CurrentCell else grid.RowCount

            # [GRID:INSERT_ROW] Add a new row at the specified index
            grid.Rows.Insert(insert_index)
            
            # [GRID:INITIALIZE_CELLS] Make all cells in the new row empty and editable
            for col_index in range(grid.ColumnCount):
                cell = grid.Rows[insert_index].Cells[col_index]
                cell.Value = ""
                cell.ReadOnly = False

            # [UI:SHOW_SUCCESS] Show success message
            MessageBox.Show(str_rep_48(lan), str_rep_31(lan))

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:GRID EDITING] Column Insertion Handler
    #
    # Handles insertion of new editable column to the right:
    # - Validates grid existence
    # - Determines insertion position
    # - Creates column with properties
    # - Sets visual indicators
    # - Configures cell editability
    # - Sets up event handling
    ###############################################################################

    # [APP:GRID:RIGHT_COLUMN_INSERTION] Handles insertion of a new editable column to the right
    def add_column(self, sender, event):
        """
        Adds a new editable column to the right of the selected column.
        """
        try:
            # [UI:SHOW_FORM] Show the Windows Form
            self.Show()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_31, str_rep_43, str_rep_46, str_rep_47
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [GRID:GET_INSERT_INDEX] Get the current column index for insertion
            insert_index = grid.CurrentCell.ColumnIndex + 1 if grid.CurrentCell else grid.ColumnCount

            # [GRID:CREATE_NEW_COLUMN] Create a new column with default properties
            new_column = DataGridViewTextBoxColumn()
            new_column.HeaderText = str_rep_46(lan)
            new_column.Name = str_rep_46(lan)
            new_column.ReadOnly = False
            
            # [GRID:SET_VISUAL_INDICATORS] Make the column header visually distinct
            new_column.HeaderCell.Style.BackColor = Color.LightYellow
            new_column.Tag = "editable"
            
            # [GRID:INSERT_COLUMN] Insert the new column at the specified index
            grid.Columns.Insert(insert_index, new_column)
            
            # [GRID:INITIALIZE_CELLS] Initialize cells in the new column as empty and editable
            for row_index in range(grid.RowCount):
                grid.Rows[row_index].Cells[insert_index].Value = ""
                grid.Rows[row_index].Cells[insert_index].ReadOnly = False

            # [GRID:ADD_EVENT_HANDLER] Add double-click event handler for the header
            grid.ColumnHeaderMouseDoubleClick -= self.on_header_double_click  
            grid.ColumnHeaderMouseDoubleClick += self.on_header_double_click

            # [UI:SHOW_SUCCESS] Show success message
            MessageBox.Show(str_rep_47(lan), str_rep_31(lan))

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:GRID EDITING] Row Insertion Handler
    #
    # Handles insertion of new editable row above selection:
    # - Validates grid existence
    # - Determines insertion position
    # - Creates empty row
    # - Sets cell properties
    # - Ensures editability
    # - Maintains UI state
    ###############################################################################

    # [APP:GRID:TOP_ROW_INSERTION] Handles insertion of a new editable row above selection
    def add_row(self, sender, event):
        """
        Adds a new editable row above the selected row.
        """
        try:
            # [UI:SHOW_FORM] Show the Windows Form
            self.Show()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_31, str_rep_43, str_rep_46, str_rep_48
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [GRID:GET_INSERT_INDEX] Get the current row index for insertion
            insert_index = grid.CurrentCell.RowIndex if grid.CurrentCell else 0

            # [GRID:INSERT_ROW] Add a new row at the specified index
            grid.Rows.Insert(insert_index)
            
            # [GRID:INITIALIZE_CELLS] Make all cells in the new row empty and editable
            for col_index in range(grid.ColumnCount):
                cell = grid.Rows[insert_index].Cells[col_index]
                cell.Value = ""
                cell.ReadOnly = False

            # [UI:SHOW_SUCCESS] Show success message
            MessageBox.Show(str_rep_48(lan), str_rep_31(lan))

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()
    
    ###############################################################################
    # [APP:DOC:GRID EDITING] Bulk Value Assignment
    #
    # Handles setting values for multiple selected cells:
    # - Validates cell selection
    # - Manages input dialog
    # - Validates editable cells
    # - Applies value updates
    # - Tracks modifications
    # - Reports operation status
    ###############################################################################

    # [APP:GRID:BULK_VALUE_ASSIGNMENT] Handles setting values for multiple selected cells
    def assign_value(self, sender, event):
        """
        Sets 'user input' as a string value for selected editable cells.
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_31, str_rep_49, str_rep_50, str_rep_51, str_rep_52, str_rep_53
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [UI:CHECK_SELECTION] Check if any cells are selected
            if grid.SelectedCells.Count == 0:
                MessageBox.Show(str_rep_49(lan), str_rep_27(lan))
                return

            # [UI:GET_USER_INPUT] Get user input for the value to assign
            icon_path = write_app_ico_icon()
            search_image_path = write_app_button()
            ok_icon_path = ok_icon()
            cancel_icon_path = cancel_icon()
            parameter_label = str_rep_50(lan)
            url = parsweb(wurl)
            window_name = str_rep_51(lan)

            user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
            
            if user_input is not None:
                # [GRID:ASSIGN_VALUES] Assign the value to selected editable cells
                modified_count = 0
                for cell in grid.SelectedCells:
                    if hasattr(grid.Columns[cell.ColumnIndex], 'Tag') and grid.Columns[cell.ColumnIndex].Tag == "editable":
                        cell.Value = str(user_input)
                        modified_count += 1

                # [UI:SHOW_RESULTS] Show results of the assignment
                if modified_count > 0:
                    MessageBox.Show(str_rep_52(lan).format(user_input, modified_count), str_rep_31(lan))
                else:
                    MessageBox.Show(str_rep_53(lan), str_rep_27(lan))

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:GRID INTERACTION] Header Edit Handler
    #
    # Handles column header editing on double-click:
    # - Validates editable columns
    # - Creates inline edit control
    # - Positions edit interface
    # - Manages input events
    # - Updates header text
    # - Maintains grid state
    ###############################################################################

    # [APP:GRID:HEADER_EDIT_HANDLER] Handles column header editing on double-click
    def on_header_double_click(self, sender, e):
        """
        Handles double-click on the column header for editing.
        """
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_33, str_rep_55

            grid = sender
            column = grid.Columns[e.ColumnIndex]
            
            # [GRID:VALIDATE_EDITABLE] Only allow editing if the column is marked as editable
            if hasattr(column, 'Tag') and column.Tag == "editable":
                # [UI:CREATE_EDIT_BOX] Create a TextBox for editing
                edit_box = TextBox()
                edit_box.Text = column.HeaderText
                
                # [UI:POSITION_EDIT_BOX] Position the TextBox over the header cell
                header_rect = grid.GetColumnDisplayRectangle(e.ColumnIndex, True)
                edit_box.Location = Point(header_rect.X, header_rect.Y)
                edit_box.Size = Size(header_rect.Width, header_rect.Height)
                
                # [UI:ADD_EVENT_HANDLERS] Add event handlers for focus loss and key press
                def on_leave(s, ev):
                    """
                    Updates the column header text when focus is lost.
                    """
                    if edit_box.Text.strip():
                        column.HeaderText = edit_box.Text
                        column.Name = edit_box.Text
                    grid.Controls.Remove(edit_box)

                def on_key_press(s, ev):
                    """
                    Handles key press events for the TextBox.
                    """
                    if ev.KeyCode == Keys.Enter:
                        on_leave(s, ev)
                    elif ev.KeyCode == Keys.Escape:
                        grid.Controls.Remove(edit_box)

                edit_box.Leave += on_leave
                edit_box.KeyDown += on_key_press
                
                # [UI:ADD_EDIT_BOX] Add and focus the TextBox
                grid.Controls.Add(edit_box)
                edit_box.Focus()

        except Exception as e:
            MessageBox.Show(str_rep_55(lan) + str(e), str_rep_33(lan))

    ###############################################################################
    # [APP:DOC:GRID MANAGEMENT] Row Deletion Handler
    #
    # Handles deletion of selected rows from DataGridView:
    # - Validates row selection
    # - Confirms deletion action
    # - Processes multiple row deletion
    # - Maintains grid integrity
    # - Handles empty grid condition
    # - Reports operation status
    ###############################################################################

    # [APP:GRID:ROW_DELETION_HANDLER] Handles deletion of selected rows from DataGridView
    def delete_selected_rows(self, sender, event):
        """
        Deletes the selected rows from the DataGridView after user confirmation.
        """
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_27, str_rep_31, str_rep_33, str_rep_56, str_rep_57, str_rep_58, str_rep_59, str_rep_65
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = None
            for control in self.tab_control.SelectedTab.Controls:
                if isinstance(control, GroupBox):
                    for sub_control in control.Controls:
                        if isinstance(sub_control, DataGridView):
                            grid = sub_control
                            break
            
            if grid and grid.SelectedRows.Count > 0:
                # [UI:CONFIRM_DELETION] Ask for confirmation before deletion
                result = MessageBox.Show(
                    str_rep_56(lan),
                    str_rep_57(lan),
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Warning
                )
                
                if result == DialogResult.Yes:
                    # [GRID:REMOVE_ROWS] Create a list of rows to remove (in reverse order to avoid index issues)
                    rows_to_remove = sorted(
                        [grid.Rows[i] for i in range(grid.RowCount) if grid.Rows[i].Selected],
                        key=lambda row: row.Index,
                        reverse=True
                    )
                    
                    # [GRID:DELETE_ROWS] Remove the selected rows
                    for row in rows_to_remove:
                        grid.Rows.Remove(row)
                    
                    # [GRID:CHECK_EMPTY] Check if any rows are left in the grid
                    if grid.Rows.Count == 0:
                        MessageBox.Show(str_rep_65(lan), str_rep_27(lan))
                        # [UI:RETURN_TO_TOOLBOX] Return to the Toolbox tab if the grid is empty
                        self.back_to_toolbox_grid_empty()
                    else:
                        # [UI:SHOW_SUCCESS] Show success message after deletion
                        MessageBox.Show(str_rep_58(lan), str_rep_31(lan))

        except Exception as e:
            MessageBox.Show(str_rep_59(lan) + str(e), str_rep_33(lan))

    ###############################################################################
    # [APP:DOC:GRID MANAGEMENT] Column Deletion Handler
    #
    # Handles deletion of selected columns from DataGridView:
    # - Validates column selection
    # - Confirms deletion action
    # - Processes multiple column deletion
    # - Maintains grid integrity
    # - Handles empty grid condition
    # - Reports operation status
    ###############################################################################

    # [APP:GRID:COLUMN_DELETION_HANDLER] Handles deletion of selected columns from DataGridView
    def delete_selected_columns(self, sender, event):
        """
        Deletes the selected columns from the DataGridView after user confirmation.
        """
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_27, str_rep_31, str_rep_33, str_rep_57, str_rep_60, str_rep_61, str_rep_62, str_rep_63, str_rep_64
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = None
            for control in self.tab_control.SelectedTab.Controls:
                if isinstance(control, GroupBox):
                    for sub_control in control.Controls:
                        if isinstance(sub_control, DataGridView):
                            grid = sub_control
                            break
            
            if grid:
                # [GRID:GET_SELECTED_COLUMNS] Get selected column indices
                selected_columns = set()
                if grid.CurrentCell is not None:
                    selected_columns.add(grid.CurrentCell.ColumnIndex)
                for cell in grid.SelectedCells:
                    selected_columns.add(cell.ColumnIndex)
                
                if selected_columns:
                    # [UI:CONFIRM_DELETION] Ask for confirmation before deletion
                    result = MessageBox.Show(
                        str_rep_63(lan),
                        str_rep_57(lan),
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Warning
                    )
                    
                    if result == DialogResult.Yes:
                        # [GRID:REMOVE_COLUMNS] Convert to list and sort in reverse order
                        columns_to_remove = sorted(list(selected_columns), reverse=True)
                        
                        # [GRID:DELETE_COLUMNS] Remove the selected columns
                        for col_index in columns_to_remove:
                            grid.Columns.RemoveAt(col_index)

                        # [GRID:CHECK_EMPTY] Check if any columns are left in the grid
                        if grid.Columns.Count == 0:
                            MessageBox.Show(str_rep_64(lan), str_rep_27(lan))

                            # [UI:RETURN_TO_TOOLBOX] Return to the Toolbox tab if the grid is empty
                            self.back_to_toolbox_grid_empty()
                        else:
                            # [UI:SHOW_SUCCESS] Show success message after deletion
                            MessageBox.Show(str_rep_60(lan), str_rep_31(lan))
                else:
                    MessageBox.Show(str_rep_61(lan), str_rep_27(lan))
        except Exception as e:
            MessageBox.Show(str_rep_62(lan) + str(e), str_rep_33(lan))

    ###############################################################################
    # [APP:DOC:GRID MANAGEMENT] Hidden Row Cleanup
    #
    # Handles deletion of hidden rows from DataGridView:
    # - Validates grid existence
    # - Confirms deletion action
    # - Removes hidden rows
    # - Updates grid state
    # - Handles empty grid condition
    # - Reports operation results
    ###############################################################################

    # [APP:GRID:HIDDEN_ROW_CLEANUP] Handles deletion of hidden rows from DataGridView
    def delete_hiden_cells(self, sender, event):
        """
        Deletes hidden rows from the DataGridView and keeps only visible data.
        """
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_31, str_rep_33, str_rep_57, str_rep_57, str_rep_65, str_rep_66, str_rep_67, str_rep_68
            
            # [UI:FIND_DATAGRID] Find the DataGridView in the current tab
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [UI:CONFIRM_DELETION] Ask for confirmation before deletion
            result = MessageBox.Show(
                str_rep_66(lan),
                str_rep_57(lan),
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Warning
            )
            
            if result == DialogResult.Yes:
                # [GRID:REMOVE_HIDDEN_ROWS] Remove hidden rows
                visible_rows_data = []
                for row_idx in range(grid.RowCount - 1, -1, -1):  
                    if not grid.Rows[row_idx].Visible:
                        grid.Rows.RemoveAt(row_idx)

                # [GRID:CHECK_EMPTY] Check if any rows are left in the grid
                if grid.Rows.Count == 0:
                    MessageBox.Show(str_rep_65(lan), str_rep_27(lan))
                    # [UI:RETURN_TO_TOOLBOX] Return to the Toolbox tab if the grid is empty
                    self.back_to_toolbox_grid_empty()
                else:
                    # [UI:SHOW_RESULTS] Show results of the cleanup
                    remaining_rows = grid.RowCount
                    MessageBox.Show(
                        str_rep_67(lan) + str(remaining_rows),
                        str_rep_31(lan)
                    )

        except Exception as e:
            MessageBox.Show(str_rep_68(lan) + str(e), str_rep_33(lan))

    ###############################################################################
    # [APP:DOC:GRID FORMATTING] Column-Based Color Mapping
    #
    # Handles color application for similar values in selected columns:
    # - Validates column selection
    # - Manages color palette
    # - Identifies unique values
    # - Maps colors to values
    # - Handles color generation
    # - Maintains text contrast
    ###############################################################################

    # [APP:GRID:COLOR_MAPPING] Handles color application for similar values in selected columns
    def apply_similar_items_color(self, sender, event):
        """
        Applies the same color to similar items in selected columns using a predefined color palette.
        """
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_27, str_rep_33, str_rep_69, str_rep_70
            
            # [UI:FIND_DATAGRID] Find the DataGridView
            grid = self.find_data_grid_in_current_tab()
            if not grid or grid.SelectedCells.Count == 0:
                MessageBox.Show(str_rep_69(lan), str_rep_27(lan))
                return

            # [COLOR:PALETTE] Predefined color palette with visually distinct colors
            color_palette = [
                Color.FromArgb(141, 211, 199),    # Soft teal
                Color.FromArgb(255, 186, 119),    # Soft orange
                Color.FromArgb(190, 174, 212),    # Soft purple
                Color.FromArgb(251, 128, 114),    # Soft red
                Color.FromArgb(128, 177, 211),    # Soft blue
                Color.FromArgb(253, 180, 98),     # Light orange
                Color.FromArgb(179, 222, 105),    # Lime green
                Color.FromArgb(252, 205, 229),    # Pink
                Color.FromArgb(217, 217, 217),    # Light gray
                Color.FromArgb(188, 128, 189),    # Purple
                Color.FromArgb(204, 235, 197),    # Mint green
                Color.FromArgb(255, 237, 111),    # Light yellow
                Color.FromArgb(255, 99, 71),      # Tomato
                Color.FromArgb(135, 206, 250),    # Light Sky Blue
                Color.FromArgb(255, 215, 0),      # Gold
                Color.FromArgb(144, 238, 144),    # Light Green
                Color.FromArgb(255, 20, 147),     # Deep Pink
                Color.FromArgb(255, 105, 180),    # Hot Pink
                Color.FromArgb(0, 255, 255),      # Cyan
                Color.FromArgb(255, 0, 255),      # Magenta
                Color.FromArgb(255, 140, 0),      # Dark Orange
                Color.FromArgb(0, 128, 128),      # Teal
                Color.FromArgb(128, 0, 128),      # Purple
                Color.FromArgb(255, 69, 0),       # Red Orange
                Color.FromArgb(0, 0, 255),        # Blue
                Color.FromArgb(255, 0, 0),        # Bright Red
                Color.FromArgb(0, 255, 0),        # Bright Green
                Color.FromArgb(255, 255, 0),      # Yellow
                Color.FromArgb(255, 165, 0),      # Orange
                Color.FromArgb(75, 0, 130),       # Indigo
                Color.FromArgb(238, 130, 238),    # Violet
                Color.FromArgb(255, 192, 203),    # Pink
                Color.FromArgb(128, 128, 0),      # Olive
                Color.FromArgb(128, 0, 0),        # Maroon
                Color.FromArgb(0, 128, 0),        # Green
                Color.FromArgb(0, 0, 128),        # Navy
                Color.FromArgb(192, 192, 192),    # Silver
                Color.FromArgb(255, 255, 255),    # White
            ]
            
            # [COLOR:MAP_VALUES] Create a dictionary to store unique values and their colors
            value_colors = {}
            unique_values = set()

            # [GRID:GET_SELECTED_COLUMNS] Get unique values from all selected columns
            selected_columns = set(cell.ColumnIndex for cell in grid.SelectedCells)
            for col_index in selected_columns:
                for row_index in range(grid.RowCount):
                    value = str(grid.Rows[row_index].Cells[col_index].Value)
                    unique_values.add(value)

            # [COLOR:ASSIGN_COLORS] Assign colors to unique values
            for i, value in enumerate(sorted(unique_values)):
                if i < len(color_palette):
                    value_colors[value] = color_palette[i]
                else:
                    # [COLOR:ADJUST_BRIGHTNESS] Create new colors by modifying existing ones
                    base_color = color_palette[i % len(color_palette)]
                    brightness_adjust = 0.8 + (0.2 * (i // len(color_palette)))
                    r = min(255, int(base_color.R * brightness_adjust))
                    g = min(255, int(base_color.G * brightness_adjust))
                    b = min(255, int(base_color.B * brightness_adjust))
                    value_colors[value] = Color.FromArgb(r, g, b)

            # [GRID:APPLY_COLORS] Apply colors to cells in the selected columns
            for col_index in selected_columns:
                for row_index in range(grid.RowCount):
                    value = str(grid.Rows[row_index].Cells[col_index].Value)
                    cell = grid.Rows[row_index].Cells[col_index]
                    cell.Style.BackColor = value_colors[value]
                    
                    # [COLOR:SET_TEXT_CONTRAST] Set text color based on background brightness
                    color = value_colors[value]
                    brightness = (color.R * 299 + color.G * 587 + color.B * 114) / 1000
                    cell.Style.ForeColor = Color.Black if brightness > 128 else Color.White

        except Exception as e:
            MessageBox.Show(str_rep_70(lan) + str(e), str_rep_33(lan))

    ###############################################################################
    # [APP:DOC:GRID FORMATTING] Full Sheet Color Mapping
    #
    # Handles color application for similar values across entire grid:
    # - Manages predefined color palette
    # - Identifies unique values
    # - Maps colors to values
    # - Applies consistent coloring
    # - Handles color generation
    # - Maintains text contrast
    ###############################################################################

    # [APP:GRID:FULL_SHEET_COLOR_MAPPING] Handles color application for similar values across the entire grid
    def apply_similar_items_color_full_sheet(self, sender, event):
        """
        Applies the same color to similar items across the entire DataGridView using a predefined color palette.
        """
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_33, str_rep_70
            
            # [UI:FIND_DATAGRID] Find the DataGridView
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [COLOR:PALETTE] Predefined color palette with visually distinct colors
            color_palette = [
                Color.FromArgb(141, 211, 199),    # Soft teal
                Color.FromArgb(255, 186, 119),    # Soft orange
                Color.FromArgb(190, 174, 212),    # Soft purple
                Color.FromArgb(251, 128, 114),    # Soft red
                Color.FromArgb(128, 177, 211),    # Soft blue
                Color.FromArgb(253, 180, 98),     # Light orange
                Color.FromArgb(179, 222, 105),    # Lime green
                Color.FromArgb(252, 205, 229),    # Pink
                Color.FromArgb(217, 217, 217),    # Light gray
                Color.FromArgb(188, 128, 189),    # Purple
                Color.FromArgb(204, 235, 197),    # Mint green
                Color.FromArgb(255, 237, 111),    # Light yellow
                Color.FromArgb(255, 99, 71),      # Tomato
                Color.FromArgb(135, 206, 250),    # Light Sky Blue
                Color.FromArgb(255, 215, 0),      # Gold
                Color.FromArgb(144, 238, 144),    # Light Green
                Color.FromArgb(255, 20, 147),     # Deep Pink
                Color.FromArgb(255, 105, 180),    # Hot Pink
                Color.FromArgb(0, 255, 255),      # Cyan
                Color.FromArgb(255, 0, 255),      # Magenta
                Color.FromArgb(255, 140, 0),      # Dark Orange
                Color.FromArgb(0, 128, 128),      # Teal
                Color.FromArgb(128, 0, 128),      # Purple
                Color.FromArgb(255, 69, 0),       # Red Orange
                Color.FromArgb(0, 0, 255),        # Blue
                Color.FromArgb(255, 0, 0),        # Bright Red
                Color.FromArgb(0, 255, 0),        # Bright Green
                Color.FromArgb(255, 255, 0),      # Yellow
                Color.FromArgb(255, 165, 0),      # Orange
                Color.FromArgb(75, 0, 130),       # Indigo
                Color.FromArgb(238, 130, 238),    # Violet
                Color.FromArgb(255, 192, 203),    # Pink
                Color.FromArgb(128, 128, 0),      # Olive
                Color.FromArgb(128, 0, 0),        # Maroon
                Color.FromArgb(0, 128, 0),        # Green
                Color.FromArgb(0, 0, 128),        # Navy
                Color.FromArgb(192, 192, 192),    # Silver
                Color.FromArgb(255, 255, 255),    # White
            ]
            
            # [COLOR:MAP_VALUES] Create a dictionary to store unique values and their colors
            value_colors = {}
            unique_values = set()
            
            # [GRID:GET_UNIQUE_VALUES] Get unique values from the entire DataGridView
            for row_index in range(grid.RowCount):
                for col_index in range(grid.ColumnCount):
                    value = str(grid.Rows[row_index].Cells[col_index].Value)
                    unique_values.add(value)
            
            # [COLOR:ASSIGN_COLORS] Assign colors to unique values
            for i, value in enumerate(sorted(unique_values)):
                if i < len(color_palette):
                    value_colors[value] = color_palette[i]
                else:
                    # [COLOR:GENERATE_HUE_SHIFT] Generate a new color by creating a hue shift
                    hue = (i * 360 / len(unique_values)) % 360
                    color = self.ColorFromHSV(hue, 1.0, 1.0)  
                    value_colors[value] = color

            # [GRID:APPLY_COLORS] Apply colors to all cells in the DataGridView
            for row_index in range(grid.RowCount):
                for col_index in range(grid.ColumnCount):
                    value = str(grid.Rows[row_index].Cells[col_index].Value)
                    cell = grid.Rows[row_index].Cells[col_index]
                    cell.Style.BackColor = value_colors[value]
                    
                    # [COLOR:SET_TEXT_CONTRAST] Set text color based on background brightness
                    color = value_colors[value]
                    brightness = (color.R * 299 + color.G * 587 + color.B * 114) / 1000
                    cell.Style.ForeColor = Color.Black if brightness > 128 else Color.White

        except Exception as e:
            MessageBox.Show(str_rep_70(lan) + str(e), str_rep_33(lan))

    ###############################################################################
    # [APP:DOC:COLOR UTILITY] HSV to RGB Converter
    #
    # Handles color space conversion from HSV to RGB:
    # - Processes HSV color components
    # - Implements conversion algorithm
    # - Handles edge cases
    # - Returns RGB color object
    # - Maintains color accuracy
    ###############################################################################

    # [APP:COLOR:HSV_TO_RGB] Handles color space conversion from HSV to RGB
    def ColorFromHSV(self, hue, saturation, value):
        """
        Converts HSV color values to RGB color.
        """
        # [COLOR:CHECK_SATURATION] Handle grayscale case when saturation is 0
        if saturation == 0.0:
            r = g = b = int(value * 255)
        else:
            # [COLOR:CONVERSION_LOGIC] Implement HSV to RGB conversion algorithm
            i = int(hue / 60.0) % 6
            f = (hue / 60.0) - i
            p = int(value * (1.0 - saturation) * 255)
            q = int(value * (1.0 - f * saturation) * 255)
            t = int(value * (1.0 - (1.0 - f) * saturation) * 255)
            v = int(value * 255)

            # [COLOR:MAP_COLOR_VALUES] Map HSV values to RGB based on hue segment
            if i == 0:
                r, g, b = v, t, p
            elif i == 1:
                r, g, b = q, v, p
            elif i == 2:
                r, g, b = p, v, t
            elif i == 3:
                r, g, b = p, q, v
            elif i == 4:
                r, g, b = t, p, v
            elif i == 5:
                r, g, b = v, p, q

        # [COLOR:RETURN_RGB] Return the RGB color object
        return Color.FromArgb(r, g, b)

    ###############################################################################
    # [APP:DOC:GRID FORMATTING] Numeric Gradient Visualization
    #
    # Handles gradient color application based on numeric values:
    # - Validates numeric column selection
    # - Processes numeric values and ElementIds
    # - Calculates color gradients
    # - Applies gradient formatting
    # - Manages text contrast
    # - Handles special data types
    ###############################################################################

    # [APP:GRID:NUMERIC_GRADIENT] Handles gradient color application based on numeric values
    def apply_numeric_gradient(self, sender, event):
        """
        Applies a gradient color from light to dark based on numeric values in the selected column.
        """
        try:
            # [SCRIPT:IMPORTS] Import necessary libraries
            from Autodesk.Revit.DB import ElementId
            from UI.strings_report import str_rep_27, str_rep_33, str_rep_71, str_rep_72, str_rep_73
            
            # [UI:FIND_DATAGRID] Find the DataGridView
            grid = self.find_data_grid_in_current_tab()
            if not grid or grid.CurrentCell is None:
                MessageBox.Show(str_rep_71(lan), str_rep_27(lan))
                return

            # [GRID:GET_SELECTED_COLUMN] Get the selected column index
            col_index = grid.CurrentCell.ColumnIndex
            
            # [GRID:GET_NUMERIC_VALUES] Get all numeric values from the column
            values = []
            for row_index in range(grid.RowCount):
                cell_value = grid.Rows[row_index].Cells[col_index].Value
                try:
                    # [GRID:HANDLE_ELEMENTID] Handle ElementId type values
                    if isinstance(cell_value, ElementId):
                        numeric_value = float(cell_value.IntegerValue)  
                    else:
                        numeric_value = float(cell_value)
                    
                    values.append(numeric_value)
                except (ValueError, TypeError):
                    MessageBox.Show(str_rep_72(lan), str_rep_27(lan))
                    return

            if not values:
                return

            # [GRID:CALCULATE_RANGE] Get min and max values
            min_val = min(values)
            max_val = max(values)
            value_range = max_val - min_val if max_val != min_val else 1

            # [COLOR:GRADIENT_RANGE] Define color ranges (light blue to darker blue)
            start_color = (240, 248, 255)  # Light blue (AliceBlue)
            end_color = (0, 102, 204)      # Medium-dark blue
            mid_color = (0, 255, 255)      # Cyan
            dark_color = (0, 0, 128)       # Dark blue

            # [GRID:APPLY_GRADIENT] Apply gradient colors to cells
            for row_index in range(grid.RowCount):
                value = float(grid.Rows[row_index].Cells[col_index].Value)
                intensity = (value - min_val) / value_range
                
                # [COLOR:INTERPOLATE] Interpolate between start, mid, and end colors
                if intensity < 0.5:
                    r = int(start_color[0] + (mid_color[0] - start_color[0]) * (intensity * 2))
                    g = int(start_color[1] + (mid_color[1] - start_color[1]) * (intensity * 2))
                    b = int(start_color[2] + (mid_color[2] - start_color[2]) * (intensity * 2))
                else:
                    r = int(mid_color[0] + (end_color[0] - mid_color[0]) * ((intensity - 0.5) * 2))
                    g = int(mid_color[1] + (end_color[1] - mid_color[1]) * ((intensity - 0.5) * 2))
                    b = int(mid_color[2] + (end_color[2] - mid_color[2]) * ((intensity - 0.5) * 2))
                
                # [GRID:SET_BACKGROUND] Set cell background color
                grid.Rows[row_index].Cells[col_index].Style.BackColor = Color.FromArgb(r, g, b)
                
                # [COLOR:SET_TEXT_CONTRAST] Set text color based on background brightness
                brightness = (r * 299 + g * 587 + b * 114) / 1000
                grid.Rows[row_index].Cells[col_index].Style.ForeColor = Color.Black if brightness > 128 else Color.White

        except Exception as e:
            MessageBox.Show(str_rep_73(lan), str_rep_33(lan))

    ###############################################################################
    # [APP:DOC:GRID FORMATTING] Cell Color Customization
    #
    # Handles custom coloring of selected cells:
    # - Validates cell selection
    # - Manages color picker dialog
    # - Applies selected colors
    # - Adjusts text contrast
    # - Maintains UI responsiveness
    ###############################################################################

    # [APP:GRID:CELL_COLOR_CUSTOMIZATION] Handles custom coloring of selected cells
    def paint_selected_cells(self, sender, event):
        """
        Paints selected cells with a chosen color.
        """
        try:
            # [UI:SHOW_FORM] Show the Windows Form
            self.Show()
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_74

            # [SCRIPT:IMPORTS] Import necessary libraries
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [UI:FIND_DATAGRID] Find the DataGridView
            if grid.SelectedCells.Count == 0:
                MessageBox.Show(str_rep_74(lan), str_rep_27(lan))
                return

            # [UI:COLOR_PICKER] Create and configure ColorDialog
            color_dialog = ColorDialog()
            color_dialog.AllowFullOpen = True
            color_dialog.AnyColor = True
            color_dialog.ShowHelp = True

            # [UI:SHOW_COLOR_PICKER] Show color picker dialog
            if color_dialog.ShowDialog() == DialogResult.OK:
                selected_color = color_dialog.Color
                
                # [GRID:APPLY_COLOR] Apply color to selected cells
                for cell in grid.SelectedCells:
                    cell.Style.BackColor = selected_color
                    
                    # [COLOR:SET_TEXT_CONTRAST] Set text color based on background brightness
                    brightness = (selected_color.R * 299 + selected_color.G * 587 + selected_color.B * 114) / 1000
                    cell.Style.ForeColor = Color.Black if brightness >128 else Color.White

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:GRID FORMATTING] Color Reset Handler
    #
    # Handles clearing custom grid colors:
    # - Removes cell background colors
    # - Resets text colors
    # - Preserves editable column formatting
    # - Maintains UI state during operation
    # - Handles error conditions
    ###############################################################################

    # [APP:GRID:COLOR_RESET] Handles clearing custom grid colors
    def clean_grid_colors(self, sender, event):
        """
        Removes all custom colors from the grid.
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from UI.strings_report import str_rep_26, str_rep_27, str_rep_31, str_rep_76
            
            # [UI:FIND_DATAGRID] Find the DataGridView
            grid = self.find_data_grid_in_current_tab()
            if not grid:
                MessageBox.Show(str_rep_26(lan), str_rep_27(lan))
                return

            # [GRID:CLEAR_COLORS] Clear colors from all cells
            for row_index in range(grid.RowCount):
                for col_index in range(grid.ColumnCount):
                    cell = grid.Rows[row_index].Cells[col_index]
                    cell.Style.BackColor = Color.Empty
                    cell.Style.ForeColor = Color.Black

            # [GRID:PRESERVE_EDITABLE_HEADERS] Preserve the yellow background for editable column headers
            for col_index in range(grid.ColumnCount):
                if hasattr(grid.Columns[col_index], 'Tag') and grid.Columns[col_index].Tag == "editable":
                    grid.Columns[col_index].HeaderCell.Style.BackColor = Color.LightYellow

            # [UI:SHOW_SUCCESS] Show success message
            MessageBox.Show(str_rep_76(lan), str_rep_31(lan))

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

        except Exception as e:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:UI UTILITY] DataGrid Locator
    #
    # Helper method to locate DataGridView in current tab:
    # - Traverses tab control hierarchy
    # - Identifies GroupBox containers
    # - Locates DataGridView controls
    # - Returns active grid reference
    ###############################################################################

    # [APP:UI:DATAGRID_LOCATOR] Helper method to locate DataGridView in current tab
    def find_data_grid_in_current_tab(self):
        """
        Helper method to find the DataGridView in the current tab.
        """
        # [UI:TRAVERSE_TAB] Traverse tab control hierarchy
        for control in self.tab_control.SelectedTab.Controls:
            # [UI:CHECK_GROUPBOX] Identify GroupBox containers
            if isinstance(control, GroupBox):
                # [UI:CHECK_DATAGRID] Locate DataGridView controls
                for sub_control in control.Controls:
                    if isinstance(sub_control, DataGridView):
                        # [UI:RETURN_GRID] Return active grid reference
                        return sub_control
        # [UI:RETURN_NONE] Return None if no DataGridView is found               
        return None

    ###############################################################################
    # [APP:DOC:UI CONTROL] Action Button Handler
    #
    # Handles action button click events and executes corresponding tools:
    # - Processes button clicks
    # - Manages UI state during operations
    # - Executes tool-specific functionality
    # - Handles error conditions
    # - Maintains UI responsiveness
    ###############################################################################

    # [APP:UI:ACTION_BUTTON_HANDLER] Handles action button click events
    def on_action_click(self, sender, event):
        """
        Handles the click event for action buttons and performs the corresponding actions.
        """
        # [UI:GET_BUTTON] Get the button that was clicked
        button = sender 

        # [UI:GET_BUTTON_TEXT] Get the button text (which is the tooltip)
        button_text = button.Text  

        # [UI:INITIALIZE_LANGUAGE] Initialize language settings
        from structure.root import lan_path
        lan = lan_path()
        
        # [UI:START_PROCESS] Start process before any action
        self.start_process() 

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Element ID] Element Information Retrieval
        #
        # Handles retrieval and display of element information:
        # - Extracts element details
        # - Displays data in a report tab
        ###############################################################################

        # [SCRIPT:ELEMENT_INFO_RETRIEVAL][INFORMATION]
        if button_text == tool_str_1(lan):
            """
            Retrieves and displays the IDs, categories, and names of selected elements in Revit.

            This function processes user-selected elements within a Revit document and extracts key 
            information such as category, ID, and element name. The extracted data is then displayed 
            in a structured report tab.

            Workflow:
            1. Hides the Windows Form.
            2. Imports necessary modules and retrieves the active Revit document.
            3. Obtains the category and ID of selected elements.
            4. Retrieves the selected elements with clickable links for their IDs.
            5. Extracts category, ID, and name for each selected element:
            - Uses different methods to determine the element name.
            - Handles cases where elements lack a name.
            - Displays an error message if an element cannot be retrieved.
            6. Organizes extracted data into a structured format for display.
            7. Creates and presents a report tab with the collected element details.
            8. Ensures the Windows Form is shown again after execution.

            Raises:
            - Alerts if an error occurs while retrieving element data.
            - Displays an error message if an exception is encountered.

            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                from Autodesk.Revit.UI import TaskDialog, TaskDialogCommonButtons, TaskDialogCommandLinkId, TaskDialogResult
                from pyrevit import script, forms
                import getpass  
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.inform import category_andId, category_and_id_link
                from sajdmo.forms.text import text_input
                from structure.root import wurl_path,  lan_path, commentgif, logo_path, cuslogo_path, icon_SelectGtID, comment_icon, ok_icon, cancel_icon
                from UI.strings_element_id import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, 
                str_18, str_19, str_20, str_21, str_22, str_23, str_h1, str_h2)
                from Autodesk.Revit.DB import ElementId, BuiltInParameter  

                # [UI:INITIALIZE_VARIABLES] Initialize language and URL settings
                lan = lan_path()
                wurl = wurl_path()

                # [SCRIPT:ACTIVE_DOCUMENT] Get the active Revit document
                doc = __revit__.ActiveUIDocument.Document

                # [UI:GET_CATEGORY_AND_ID] Get category and ID of selected elements
                info = category_andId(doc, str_15(lan), str_16(lan))
                
                # [UI:GET_LINKIFIED_IDS] Get category and ID of selected elements with clickable links
                info_Linkified = category_and_id_link(doc)
                
                # [UI:EXTRACT_DATA] Extract category, ID, and name for each selected element
                categories = []
                ids = []
                names = []  
                for item in info:
                    category = item[0].replace(str_17(lan), '')
                    id_num = item[1].replace(str_18(lan), '')
                    try:
                        element_id = ElementId(int(id_num))
                        element = doc.GetElement(element_id)
                        if element is not None:
                            if hasattr(element, 'Name') and element.Name:
                                element_name = element.Name
                            elif hasattr(element, 'FamilyName'):
                                element_name = element.FamilyName
                            elif element.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM):
                                element_name = element.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM).AsString()
                            else:
                                element_name = str_19(lan)
                        else:
                            element_name = str_20(lan)
                    except Exception as e:
                        MessageBox.Show(str_21(lan).format(id_num, str(e)))
                        element_name = str_22(lan)
                    categories.append(category)
                    ids.append(id_num)
                    names.append(element_name)

                # [UI:CREATE_REPORT] Create the data structure for the grid
                headers = [str_10(lan), str_23(lan), str_9(lan)]  
                data = [ids, names, categories]  
                editable = [False, False, False]  

                # [UI:DISPLAY_REPORT] Create and display a report tab with element information
                self.create_report_tab(headers, data, editable, title=button_text)  
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
            
            except Exception as e:
                MessageBox.Show(str(e),str_22(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()
            
        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Creator Finder] Element History Retrieval
        #
        # Handles retrieval and display of element history:
        # - Extracts creator, owner, and last modified user
        # - Displays data in a report tab
        ###############################################################################
        
        # [SCRIPT:ELEMENT_HISTORY_RETRIEVAL]
        elif button_text == tool_str_2(lan):
            """
            Retrieves and displays the history of selected elements in the Revit document.

            This function gathers information about the selected elements, including 
            their ID, creator, owner, and the last user who modified them. It then 
            displays this data in a structured report tab.

            Steps:
            1. Hides the Windows Form.
            2. Imports necessary modules.
            3. Retrieves selected elements from the active Revit document.
            4. Checks if elements are selected and if the document is workshared.
            5. Extracts element history details.
            6. Displays the information in a report tab.
            7. Handles exceptions and ensures the form is shown again.

            Raises:
            - Alerts if no elements are selected.
            - Alerts if the document is not workshared.
            - Displays an error message if an exception occurs.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()
                
                # -*- coding: utf-8 -*-

                # [UI:INITIALIZE_VARIABLES] Initialize language and URL settings
                from pyrevit import revit,script,forms
                from Autodesk.Revit.UI import (TaskDialog,TaskDialogCommonButtons,TaskDialogCommandLinkId,TaskDialogResult)
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.text import text_input
                from structure.root import wurl_path, creator_icon, lan_path, cuslogo_path, logo_path
                from UI.strings_creator_finder import str_1, str_2, str_3, str_4, str_11, str_12, str_13, str_14, str_15, str_19

                # [UI:INITIALIZE_VARIABLES] Initialize language and URL settings
                lan = lan_path()
                wurl = wurl_path()

                # [SCRIPT:ACTIVE_DOCUMENT] Get the active Revit document
                uidoc = __revit__.ActiveUIDocument
                doc = __revit__.ActiveUIDocument.Document
                
                # [UI:GET_SELECTION] Get selected elements
                selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                
                # [UI:CHECK_SELECTION] Check if elements are selected
                if len(selection) < 1:
                    # [UI:ALERT_NO_SELECTION] Show alert if no elements are selected
                    forms.alert(str_1(lan), title=str_2(lan))
                    self.Show()
                    return
                
                # [UI:CHECK_WORKSHARED] Check if the document is workshared
                if not doc.IsWorkshared:
                    # [UI:ALERT_NOT_WORKSHARED] Show alert if the document is not workshared
                    forms.alert(str_4(lan))
                    self.Show()
                    return

                # [UI:PREPARE_DATA] Prepare data for the table
                headers = [str_12(lan), str_13(lan), str_14(lan), str_15(lan)]  
                ids = []
                creators = []
                owners = []
                last_changed = []

                # [UI:EXTRACT_HISTORY] Get history data for each selected element
                for element in selection:
                    eh = revit.query.get_history(element)
                    ids.append(str(element.Id.IntegerValue))
                    creators.append(eh.creator)
                    owners.append(eh.owner)
                    last_changed.append(eh.last_changed_by)

                # [UI:COMBINE_DATA] Combine data for the table
                data = [ids, creators, owners, last_changed]
                editable = [False, False, False, False]
                
                # [UI:CREATE_REPORT] Create the report tab with the collected data
                self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_19(lan)) 
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Information] Model Information Retrieval
        #
        # Handles retrieval and display of model information:
        # - Extracts model, category, and project details
        # - Displays data in a report tab
        ###############################################################################
        
        # [SCRIPT:MODEL_INFO_RETRIEVAL]
        elif button_text == tool_str_46(lan):
            """
            Retrieves various types of information about the Revit model and presents it in a report tab.

            Workflow:
            1. Hides the Windows Form before execution.
            2. Imports necessary modules and references for Revit API and UI components.
            3. Defines a form (INFORMATION) that provides radio button options to select different types of information:
            - Model Information
            - Category Element Counts
            - Family Tree
            - Project Information
            - Print Manager Settings
            - All Categories in Model
            - All Categories and Relevant Views
            4. Upon user selection, retrieves and structures the relevant data.
            5. Displays the extracted data in a structured report tab with headers and values.
            6. Ensures the Windows Form is shown again after execution.

            Raises:
            - Displays error messages for exceptions encountered during data retrieval.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                import System.Windows.Forms as WinForms
                from System.Windows.Forms import Form, CheckBox, Button, PictureBox, Label, Cursors, GroupBox, RadioButton
                from System.Drawing import Icon, Point, Color, FontStyle, Bitmap, Size, Font, GraphicsUnit
                from RevitServices.Persistence import DocumentManager
                from Autodesk.Revit.DB import FilteredElementCollector, View3D
                from pyrevit import revit, script, forms
                import webbrowser
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.inform import count_elements_in_categories, familytree, catch_project_parameters, get_print_manager_settings, count_elements_in_categories_all_views, count_elements_in_categories_for_view
                from structure.root import wurl_path, lan_path, mod_path, infoch_icon, infoch_cskin, infoch_bskin, print_icon, minfo_sym, pinfo_sym, cinfo_sym, finfo_sym, cuslogo_path, logo_path, camodel_sym, caview_sym, xml_sym
                from UI.skin import skin_mode
                from UI.strings_information import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, 
                str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_h1, str_h2)
                from UI.url import parsweb
                from System.Windows.Media import SolidColorBrush, Colors

                # [UI:INITIALIZE_VARIABLES] Initialize language, URL, and skin settings
                wurl= wurl_path()
                lan = lan_path()
                skin =mod_path()
                ico= infoch_icon()
                coo= infoch_cskin()
                bor= infoch_bskin()

                def show_information_form():
                    """Shows the information form and returns the selected data"""
                    result = {"headers": None, "data": None}
                    
                    class INFORMATION(Form):
                        def __init__(self, doc):
                            # [UI:FORM_SETUP] Set up form properties
                            self.Text = str_25(lan)
                            self.Width = 600
                            self.Height = 600
                            self.BackColor = Color.White
                            self.doc = doc
                            self.CenterToScreen()
                            self.Icon = Icon(ico)

                            # [UI:RADIO_BUTTONS] Create radio buttons for information options
                            self.radio1 = RadioButton()
                            self.radio1.Width = 250
                            self.radio1.Height = 30
                            self.radio1.Text = str_1(lan)
                            self.radio1.Location = Point(50, 250)
                            self.Controls.Add(self.radio1)

                            self.radio2 = RadioButton()
                            self.radio2.Width = 250
                            self.radio2.Height = 30
                            self.radio2.Text = str_2(lan)
                            self.radio2.Location = Point(50, 290)
                            self.Controls.Add(self.radio2)

                            self.radio3 = RadioButton()
                            self.radio3.Text = str_3(lan)
                            self.radio3.Width = 250
                            self.radio3.Height = 30
                            self.radio3.Location = Point(50, 330)
                            self.Controls.Add(self.radio3)

                            self.radio4 = RadioButton()
                            self.radio4.Text = str_4(lan)
                            self.radio4.Width = 250
                            self.radio4.Height = 30
                            self.radio4.Location = Point(50, 370)
                            self.Controls.Add(self.radio4)

                            self.radio5 = RadioButton()
                            self.radio5.Text = str_5(lan)
                            self.radio5.Width = 250
                            self.radio5.Height = 30
                            self.radio5.Location = Point(300, 250)
                            self.Controls.Add(self.radio5)

                            self.radio6 = RadioButton()
                            self.radio6.Text = str_6(lan)
                            self.radio6.Width = 250
                            self.radio6.Height = 30
                            self.radio6.Location = Point(300, 290)
                            self.Controls.Add(self.radio6)

                            self.radio7 = RadioButton()
                            self.radio7.Text = str_7(lan)
                            self.radio7.Width = 250
                            self.radio7.Height = 30
                            self.radio7.Location = Point(300, 330)
                            self.Controls.Add(self.radio7)

                            # [UI:SUBMIT_BUTTON] Create submit button
                            self.button = Button()
                            self.button.Size = Size(40, 40)
                            self.button.Location = Point(275, 500)
                            icon_path = print_icon()
                            self.button.Image = Icon(icon_path).ToBitmap()
                            self.button.Click += self.button_Click
                            self.button.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                            self.Controls.Add(self.button)
                            self.button.BackColor = Color.Gray
                            self.button.Enabled = False

                            # [UI:RADIO_CHECKED_EVENT] Add radio button checked event handler
                            for radio in [self.radio1, self.radio2, self.radio3, self.radio4, 
                                        self.radio5, self.radio6, self.radio7]:
                                radio.CheckedChanged += self.radio_checked

                            # [UI:PICTURE_BOX] Add picture box for branding
                            self.pictureBox = PictureBox()
                            self.pictureBox.Location = Point(self.Width // 2 - 100, 10)
                            self.pictureBox.Size = Size(200, 200)  
                            icon2_path = skin_mode(skin, coo, bor)
                            image2 = Bitmap(icon2_path)
                            self.pictureBox.Image = image2
                            self.pictureBox.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                            self.Controls.Add(self.pictureBox)

                            # [UI:CREATED_BY_LABEL] Add "BIM Pars" label
                            self.created_by_label = Label()
                            self.created_by_label.AutoSize = True
                            self.created_by_label.Text = "BIM Pars"
                            self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                            self.created_by_label.ForeColor = Color.Blue
                            self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold)
                            self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                            self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline)
                            self.created_by_label.Cursor = Cursors.Hand
                            self.created_by_label.Click += self.Label_Click
                            self.Controls.Add(self.created_by_label)

                        # [UI:RADIO_CHECKED] Handles radio button checked event
                        def radio_checked(self, sender, e):
                            # [UI:ENABLE_BUTTON] Enable button if any radio button is checked
                            self.button.Enabled = any(radio.Checked for radio in 
                                [self.radio1, self.radio2, self.radio3, self.radio4, 
                                self.radio5, self.radio6, self.radio7])
                            # [UI:UPDATE_BUTTON_COLOR] Update button color based on enabled state
                            self.button.BackColor = Color.Green if self.button.Enabled else Color.Gray

                        # [UI:LABEL_CLICK] Handles click event for the "BIM Pars" label
                        def Label_Click(self, sender, event):
                            url = parsweb(wurl)
                            webbrowser.open(url)

                        # [UI:BUTTON_CLICK] Handles button click event
                        def button_Click(self, sender, e):
                            self.button.Enabled = False
                            self.button.BackColor = Color.Gray
                            
                            # [UI:DISABLE_RADIO_BUTTONS] Disable all radio buttons
                            for radio in [self.radio1, self.radio2, self.radio3, self.radio4, 
                                        self.radio5, self.radio6, self.radio7]:
                                radio.Enabled = False

                            try:
                                # [UI:MODEL_INFO] Handle model information selection
                                if self.radio1.Checked:
                                    model_path = revit.doc.PathName
                                    model_name = revit.doc.Title
                                    current_user = getpass.getuser()
                                    result["headers"] = [str_8(lan), str_9(lan), str_10(lan)]
                                    result["data"] = [
                                        [model_path],
                                        [model_name],
                                        [current_user]
                                    ]

                                # [UI:CATEGORY_ELEMENT_COUNTS] Handle category element counts selection
                                elif self.radio2.Checked:  # Category Element Counts
                                    view = __revit__.ActiveUIDocument.ActiveView 
                                    category_counts = count_elements_in_categories(view)
                                    
                                    # [UI:INITIALIZE_LISTS] Initialize empty lists for each column
                                    names = []
                                    ids = []
                                    counts = []
                                    
                                    for category_name, category_id, count in category_counts:
                                        if category_name != "INVALID":
                                            names.append(category_name)
                                            ids.append(category_id)
                                            counts.append(count)
                                            
                                    result["headers"] = [str_13(lan), str_14(lan), str_15(lan)]
                                    result["data"] = [names, ids, counts]

                                # [UI:FAMILY_TREE] Handle family tree selection
                                elif self.radio3.Checked:
                                    view2 = __revit__.ActiveUIDocument.ActiveView  
                                    category_counts = familytree(view2)
                                    
                                    # [UI:INITIALIZE_LISTS] Initialize empty lists for each column
                                    cat_names = []
                                    cat_ids = []
                                    fam_names = []
                                    fam_ids = []
                                    type_names = []
                                    type_ids = []
                                    
                                    for category_name, category_id, family_name, family_id, family_type, family_type_id in category_counts:
                                        cat_names.append(category_name)
                                        cat_ids.append(category_id)
                                        fam_names.append(family_name)
                                        fam_ids.append(family_id)
                                        type_names.append(family_type)
                                        type_ids.append(family_type_id)
                                        
                                    result["headers"] = [str_13(lan), str_14(lan), str_16(lan), str_17(lan), str_18(lan), str_19(lan)]
                                    result["data"] = [cat_names, cat_ids, fam_names, fam_ids, type_names, type_ids]

                                # [UI:PROJECT_INFO] Handle project information selection
                                elif self.radio4.Checked:
                                    project_parameters = catch_project_parameters()
                                    if project_parameters:
                                        # [UI:PARSE_PROJECT_PARAMETERS] Parse project parameters
                                        params = []
                                        values = []
                                        for param, value in project_parameters:
                                            params.append(param)
                                            values.append(value)
                                            
                                        result["headers"] = [str_20(lan), str_21(lan)]
                                        result["data"] = [params, values]

                                # [UI:PRINT_MANAGER_SETTINGS] Handle print manager settings selection
                                elif self.radio5.Checked:
                                    settings = get_print_manager_settings()
                                    if settings:
                                        # [UI:PARSE_PRINT_SETTINGS] Parse XML-like string into table data
                                        lines = settings.strip().split('\n')
                                        setting_names = []
                                        setting_values = []
                                        
                                        for line in lines:
                                            if line.strip() and not line.startswith('<?xml'):
                                                line = line.strip().replace('<', '').replace('>', '')
                                                if ':' in line:
                                                    name, value = line.split(':', 1)
                                                    setting_names.append(name.strip())
                                                    setting_values.append(value.strip())
                                                else:
                                                    setting_names.append(line.strip())
                                                    setting_values.append('')
                                        
                                        result["headers"] = [str_27(lan), str_12(lan)]
                                        result["data"] = [setting_names, setting_values]

                                # [UI:ALL_CATEGORIES_IN_MODEL] Handle all categories in model selection
                                elif self.radio6.Checked:
                                    category_counts, total_count = count_elements_in_categories_all_views()
                                    
                                    # [UI:INITIALIZE_LISTS] Initialize empty lists for each column
                                    ids = []
                                    names = []
                                    counts = []
                                    
                                    for category_id, (category_name, element_count) in category_counts.items():
                                        ids.append(category_id)
                                        names.append(category_name)
                                        counts.append(element_count)
                                        
                                    # [UI:ADD_TOTAL] Add total at the end
                                    ids.append(str_22(lan))
                                    names.append('')
                                    counts.append(total_count)
                                        
                                    result["headers"] = [str_14(lan), str_13(lan), str_15(lan)]
                                    result["data"] = [ids, names, counts]

                                # [UI:ALL_CATEGORIES_AND_VIEWS] Handle all categories and relevant views selection
                                elif self.radio7.Checked:
                                    doc = __revit__.ActiveUIDocument.Document
                                    views = FilteredElementCollector(doc).OfClass(View3D).ToElements()
                                    
                                    # [UI:INITIALIZE_LISTS] Initialize empty lists for each column
                                    view_names = []
                                    cat_names = []
                                    cat_ids = []
                                    counts = []
                                    
                                    for view in views:
                                        view_name = view.Name
                                        category_counts = count_elements_in_categories_for_view(view)
                                        for category_name, category_id, count in category_counts:
                                            view_names.append(view_name)
                                            cat_names.append(category_name)
                                            cat_ids.append(category_id)
                                            counts.append(count)
                                            
                                    result["headers"] = [str_23(lan), str_13(lan), str_14(lan), str_15(lan)]
                                    result["data"] = [view_names, cat_names, cat_ids, counts]

                            except Exception as e:
                                # [UI:HANDLE_ERROR] Show error message if an exception occurs
                                MessageBox.Show(str(e), str_26(lan))
                            finally:
                                # [UI:CLOSE_FORM] Close the form
                                self.Close()

                     # [UI:SHOW_FORM] Show the form and wait for result
                    doc = DocumentManager.Instance.CurrentDBDocument
                    form = INFORMATION(doc)
                    form.ShowDialog()

                    return result["headers"], result["data"]

                # [UI:SHOW_INFORMATION_FORM] Show the form and get the data
                headers, data = show_information_form()

                # [UI:USE_DATA] Use the data if something was selected
                if headers and data:
                    editable = [False] * len(headers)
                    self.create_report_tab(headers, data, editable, title=button_text) 

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_26(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Active View] Active View Information Retrieval
        #
        # Handles retrieval and display of active view information:
        # - Extracts view details
        # - Displays data in a report tab
        ###############################################################################
        
        # [SCRIPT:ACTIVE_VIEW_INFO]
        elif button_text == tool_str_3(lan):
            """
            This script handles the "Active View" button functionality in BIM Pars app.

            Workflow:
            1. Hides the Windows Form.
            2. Imports necessary modules, including Revit API and localization strings.
            3. Retrieves the currently active view's information, including:
            - View ID
            - View Name
            - Creator
            - Last Changed By
            4. Organizes the extracted data into a tabular format with appropriate headers.
            5. Displays the information in a read-only report tab.
            6. Restores the Windows Form after execution.
            7. Implements exception handling to ensure the form is always restored, even in case of errors.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-

                # [SCRIPT:IMPORTS] Import required modules
                from pyrevit import revit, DB
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from structure.root import lan_path
                from UI.strings_active_view import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10

                # [UI:INITIALIZE_LANGUAGE] Initialize language settings
                lan = lan_path()

                # [UI:GET_ACTIVE_VIEW] Get active view information
                active_view = revit.active_view
                view_id = active_view.Id.ToString()
                view_name = active_view.Name
                view_creator = DB.WorksharingUtils.GetWorksharingTooltipInfo(revit.doc, active_view.Id).Creator
                
                # [UI:GET_LAST_CHANGED] Get additional information if needed
                view_info = DB.WorksharingUtils.GetWorksharingTooltipInfo(revit.doc, active_view.Id)
                last_changed_by = view_info.LastChangedBy
                
                # [UI:CREATE_TABLE_DATA] Create table data
                headers = [str_6(lan), str_7(lan), str_8(lan), str_9(lan)]
                data = [
                    [view_id],              
                    [view_name],            
                    [view_creator],         
                    [last_changed_by]       
                ]
                editable = [False, False, False, False] 
                
                # [UI:CREATE_REPORT] Create the report tab with the view information
                self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_10(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Hierarchy] Element Filtering
        #
        # Handles element filtering based on various criteria:
        # - View selection
        # - Level selection
        # - Category selection
        # - Family selection
        # - Type selection
        # - Parameter selection
        # - Value selection
        # - Owner selection
        # - Modifier selection
        # - Creator selection
        ###############################################################################
        
        # [SCRIPT:ELEMENT_FILTERING]
        elif button_text == tool_str_4(lan):
            """
            This script handles the "Hierarchy" button functionality in BIM Pars app.

            Workflow:
            1. Hides the Windows Form to prepare for the hierarchy operation.
            2. Imports necessary modules, including Revit API, UI components, and localization strings.
            3. Initializes a form with radio buttons for filtering elements based on various criteria:
            - Current View, Any View, Level, Category, Family, Type, Parameter, Value, Ownership, etc.
            4. Sets up the form's UI elements, including labels, buttons, and event handlers.
            5. Handles user interactions such as:
            - Selecting filtering criteria via radio buttons.
            - Navigating through filtered results using back, next, and initial buttons.
            - Zooming into selected elements.
            - Closing the hierarchy view.
            6. Manages data storage and retrieval for filtered elements, including:
            - Reading and writing element IDs to storage files.
            - Deleting outdated storage files.
            7. Displays filtered elements in the Revit view and updates the UI accordingly.
            8. Implements exception handling to ensure the form is always restored, even in case of errors.
            9. Restores the Windows Form after execution.

            Key Features:
            - Supports multiple filtering criteria for hierarchical element selection.
            - Provides navigation controls for browsing filtered results.
            - Integrates with Revit's API for element selection and view manipulation.
            - Includes robust error handling to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()
                
                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                import System.Windows.Forms as WinForms
                from System.Windows.Forms import Form, RadioButton, Button, PictureBox, Label
                from System.Drawing import Point, Size, Bitmap, Color, Icon, Font, FontStyle
                from RevitServices.Persistence import DocumentManager
                from System.Windows.Forms import  Form, RadioButton, Button, Label, PictureBox, Cursors
                from System.Drawing import Font, FontStyle, Point, Size, Bitmap, Color, GraphicsUnit
                import webbrowser
                from tokenize import group
                from System import EventHandler
                from System import Environment
                from System import Guid
                from System.Collections.Generic import List
                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                import Autodesk.Revit.DB as DB
                from pyrevit import script, revit, forms
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.single import single_input
                from sajdmo.forms.text import text_2input
                from sajdmo.scripts.select import idlist_inserted
                from structure.root import (wurl_path, hierchy_icon, borhierchy_back, coohierchy_back, right_button, left_button, filter_button, print_icon, mod_path, zoomextend_button, walk_button, 
                ok_icon, cancel_icon, lan_path, filter_icon, filterparam_back, storage_path, update_path, cuslogo_path, logo_path)
                from UI.strings_hierarchy import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, 
                str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_33, str_34, str_35, str_36, str_37, str_38, str_39, str_40, str_41, str_42, str_43, 
                str_44, str_45, str_46, str_47, str_48, str_49, str_50, str_51, str_52, str_53, str_54, str_55, str_56, str_57, str_58, str_59, str_60, str_61, str_62, str_63, str_64, str_65, str_h1, str_h2)
                from UI.skin import skin_mode
                from UI.url import parsweb

                # [UI:INITIALIZE_VARIABLES] Initialize language, URL, and skin settings
                lan = lan_path()
                wurl= wurl_path()
                skin =mod_path()
                coo = coohierchy_back()
                bor = borhierchy_back()

                # [SCRIPT:ACTIVE_DOCUMENT] Get the active Revit document
                doc = __revit__.ActiveUIDocument.Document
                
                # [UI:FORM_SETUP] Set up the form for the "Hierarchy" button functionality
                class HIERARCHY(Form):
                    def __init__(self, doc):
                        """
                        This function initializes the form for the "Hierarchy" button functionality in BIM Pars app.

                        Workflow:
                        1. Sets up the form's properties, including title, dimensions, and icon.
                        2. Initializes radio buttons for filtering elements based on various criteria, organized into columns:
                        - Column 1: Current View, Any View
                        - Column 2: Level, Category, Family, Type, Parameter, Value, Ownership, Modified, Creator
                        - Column 3: Category, Family, Type, Parameter, Value, Ownership, Modified, Creator
                        - Column 4: Modified, Creator
                        - Column 5: Type, Parameter, Value, Ownership, Modified, Creator
                        - Column 6: Parameter, Value, Ownership, Modified, Creator
                        - Column 7: Value, Ownership, Modified, Creator
                        - Column 8: Ownership, Modified, Creator
                        - Column 9: Modified, Creator
                        - Column 10: Creator
                        3. Configures buttons for user interactions:
                        - Filter Button: Applies the selected filter criteria.
                        - Finish Button: Finalizes the selection and closes the form.
                        - Zoom Button: Zooms into selected elements.
                        - Close Button: Closes the hierarchy view.
                        - Back Button: Navigates to the previous step.
                        - Next Button: Navigates to the next step.
                        - Initialize Button: Resets the form to its initial state.
                        4. Adds labels for displaying information, including:
                        - Root Bar: Shows the current selection path.
                        - Creator Label: Displays the creator information and acts as a clickable link.
                        - Help Label: Provides guidance on using the tool.
                        5. Includes visual elements such as:
                        - Picture Box: Displays an icon or image.
                        - Lines: Divides sections of the form for better organization.
                        6. Configures default states for radio buttons and buttons, ensuring proper initial behavior.
                        7. Implements event handlers for user interactions, such as button clicks and radio button changes.

                        Key Features:
                        - Organizes filtering options into columns for improved usability.
                        - Provides navigation controls for browsing filtered results.
                        - Includes visual elements to enhance the user experience.
                        - Configures default states to ensure proper initial behavior.
                        - Implements event handlers for user interactions.
                        """
                        # [UI:FORM_PROPERTIES] Set up the form's properties
                        self.Text = str_1(lan)
                        self.Width = 1550
                        self.Height = 710
                        self.doc = doc
                        self.Icon = Icon(hierchy_icon())
                        self.CenterToScreen()
            
                        # [UI:COLUMN_1] Create radio buttons for column 1
                        self.radioButton1 = RadioButton()
                        self.radioButton1.Appearance = 0  
                        self.radioButton1.Text = str_2(lan)
                        self.radioButton1.Width = 120
                        self.radioButton1.Height = 30
                        self.radioButton1.Left = 50
                        self.radioButton1.Top = 40
                        self.radioButton1.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton2 = RadioButton()
                        self.radioButton2.Appearance = 0  
                        self.radioButton2.Text = str_3(lan)
                        self.radioButton2.Width = 120
                        self.radioButton2.Height = 30
                        self.radioButton2.Left = 50
                        self.radioButton2.Top = 80
                        self.radioButton2.CheckedChanged += self.radioButton_checked_changed

                        # [UI:COLUMN_2] Create radio buttons for column 2
                        self.radioButton3 = RadioButton()
                        self.radioButton3.Appearance = 0  
                        self.radioButton3.Text = str_4(lan)
                        self.radioButton3.Width = 120
                        self.radioButton3.Height = 30
                        self.radioButton3.Left = 180
                        self.radioButton3.Top = 40
                        self.radioButton3.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton4 = RadioButton()
                        self.radioButton4.Appearance = 0  
                        self.radioButton4.Text = str_5(lan)
                        self.radioButton4.Width = 120
                        self.radioButton4.Height = 30
                        self.radioButton4.Left = 180
                        self.radioButton4.Top = 80
                        self.radioButton4.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton5 = RadioButton()
                        self.radioButton5.Appearance = 0 
                        self.radioButton5.Text = str_6(lan)
                        self.radioButton5.Width = 120
                        self.radioButton5.Height = 30
                        self.radioButton5.Left = 180
                        self.radioButton5.Top = 120
                        self.radioButton5.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton6 = RadioButton()
                        self.radioButton6.Appearance = 0 
                        self.radioButton6.Text = str_7(lan)
                        self.radioButton6.Width = 120
                        self.radioButton6.Height = 30
                        self.radioButton6.Left = 180
                        self.radioButton6.Top = 160
                        self.radioButton6.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton7 = RadioButton()
                        self.radioButton7.Appearance = 0 
                        self.radioButton7.Text = str_8(lan)
                        self.radioButton7.Width = 120
                        self.radioButton7.Height = 30
                        self.radioButton7.Left = 180
                        self.radioButton7.Top = 200
                        self.radioButton7.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton8 = RadioButton()
                        self.radioButton8.Appearance = 0  
                        self.radioButton8.Text = str_9(lan)
                        self.radioButton8.Width = 120
                        self.radioButton8.Height = 30
                        self.radioButton8.Left = 180
                        self.radioButton8.Top = 240
                        self.radioButton8.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton9 = RadioButton()
                        self.radioButton9.Appearance = 0  
                        self.radioButton9.Text = str_10(lan)
                        self.radioButton9.Width = 120
                        self.radioButton9.Height = 30
                        self.radioButton9.Left = 180
                        self.radioButton9.Top = 280
                        self.radioButton9.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton10 = RadioButton()
                        self.radioButton10.Appearance = 0  
                        self.radioButton10.Text = str_11(lan)
                        self.radioButton10.Width = 120
                        self.radioButton10.Height = 30
                        self.radioButton10.Left = 180
                        self.radioButton10.Top = 320
                        self.radioButton10.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton70 = RadioButton()
                        self.radioButton70.Appearance = 0  
                        self.radioButton70.Text = str_12(lan)
                        self.radioButton70.Width = 120
                        self.radioButton70.Height = 30
                        self.radioButton70.Left = 180
                        self.radioButton70.Top = 360
                        self.radioButton70.CheckedChanged += self.radioButton_checked_changed

                        # [UI:COLUMN_3] Create radio buttons for column 3
                        self.radioButton12 = RadioButton()
                        self.radioButton12.Appearance = 0  
                        self.radioButton12.Text = str_5(lan)
                        self.radioButton12.Width = 120
                        self.radioButton12.Height = 30
                        self.radioButton12.Left = 310
                        self.radioButton12.Top = 80
                        self.radioButton12.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton13 = RadioButton()
                        self.radioButton13.Appearance = 0  
                        self.radioButton13.Text = str_6(lan)
                        self.radioButton13.Width = 120
                        self.radioButton13.Height = 30
                        self.radioButton13.Left = 310
                        self.radioButton13.Top = 120
                        self.radioButton13.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton14 = RadioButton()
                        self.radioButton14.Appearance = 0 
                        self.radioButton14.Text = str_7(lan)
                        self.radioButton14.Width = 120
                        self.radioButton14.Height = 30
                        self.radioButton14.Left = 310
                        self.radioButton14.Top = 160
                        self.radioButton14.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton15 = RadioButton()
                        self.radioButton15.Appearance = 0 
                        self.radioButton15.Text = str_8(lan)
                        self.radioButton15.Width = 120
                        self.radioButton15.Height = 30
                        self.radioButton15.Left = 310
                        self.radioButton15.Top = 200
                        self.radioButton15.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton16 = RadioButton()
                        self.radioButton16.Appearance = 0  
                        self.radioButton16.Text = str_9(lan)
                        self.radioButton16.Width = 120
                        self.radioButton16.Height = 30
                        self.radioButton16.Left = 310
                        self.radioButton16.Top = 240
                        self.radioButton16.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton17 = RadioButton()
                        self.radioButton17.Appearance = 0  
                        self.radioButton17.Text = str_10(lan)
                        self.radioButton17.Width = 120
                        self.radioButton17.Height = 30
                        self.radioButton17.Left = 310
                        self.radioButton17.Top = 280
                        self.radioButton17.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton18 = RadioButton()
                        self.radioButton18.Appearance = 0  
                        self.radioButton18.Text = str_11(lan)
                        self.radioButton18.Width = 120
                        self.radioButton18.Height = 30
                        self.radioButton18.Left = 310
                        self.radioButton18.Top = 320
                        self.radioButton18.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton71 = RadioButton()
                        self.radioButton71.Appearance = 0  
                        self.radioButton71.Text = str_12(lan)
                        self.radioButton71.Width = 120
                        self.radioButton71.Height = 30
                        self.radioButton71.Left = 310
                        self.radioButton71.Top = 360
                        self.radioButton71.CheckedChanged += self.radioButton_checked_changed

                        # [UI:COLUMN_4] Create radio buttons for column 4
                        self.radioButton21 = RadioButton()
                        self.radioButton21.Appearance = 0  
                        self.radioButton21.Text = str_6(lan)
                        self.radioButton21.Width = 120
                        self.radioButton21.Height = 30
                        self.radioButton21.Left = 440
                        self.radioButton21.Top = 120
                        self.radioButton21.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton22 = RadioButton()
                        self.radioButton22.Appearance = 0 
                        self.radioButton22.Text = str_7(lan)
                        self.radioButton22.Width = 120
                        self.radioButton22.Height = 30
                        self.radioButton22.Left = 440
                        self.radioButton22.Top = 160
                        self.radioButton22.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton23 = RadioButton()
                        self.radioButton23.Appearance = 0  
                        self.radioButton23.Text = str_8(lan)
                        self.radioButton23.Width = 120
                        self.radioButton23.Height = 30
                        self.radioButton23.Left = 440
                        self.radioButton23.Top = 200
                        self.radioButton23.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton24 = RadioButton()
                        self.radioButton24.Appearance = 0 
                        self.radioButton24.Text = str_9(lan)
                        self.radioButton24.Width = 120
                        self.radioButton24.Height = 30
                        self.radioButton24.Left = 440
                        self.radioButton24.Top = 240
                        self.radioButton24.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton25 = RadioButton()
                        self.radioButton25.Appearance = 0  
                        self.radioButton25.Text = str_10(lan)
                        self.radioButton25.Width = 120
                        self.radioButton25.Height = 30
                        self.radioButton25.Left = 440
                        self.radioButton25.Top = 280
                        self.radioButton25.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton26 = RadioButton()
                        self.radioButton26.Appearance = 0  
                        self.radioButton26.Text = str_11(lan)
                        self.radioButton26.Width = 120
                        self.radioButton26.Height = 30
                        self.radioButton26.Left = 440
                        self.radioButton26.Top = 320
                        self.radioButton26.CheckedChanged += self.radioButton_checked_changed 

                        self.radioButton72 = RadioButton()
                        self.radioButton72.Appearance = 0  
                        self.radioButton72.Text = str_12(lan)
                        self.radioButton72.Width = 120
                        self.radioButton72.Height = 30
                        self.radioButton72.Left = 440
                        self.radioButton72.Top = 360
                        self.radioButton72.CheckedChanged += self.radioButton_checked_changed  

                        # [UI:COLUMN_5] Create radio buttons for column 5
                        self.radioButton30 = RadioButton()
                        self.radioButton30.Appearance = 0  
                        self.radioButton30.Text = str_7(lan)
                        self.radioButton30.Width = 120
                        self.radioButton30.Height = 30
                        self.radioButton30.Left = 570
                        self.radioButton30.Top = 160
                        self.radioButton30.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton31 = RadioButton()
                        self.radioButton31.Appearance = 0  
                        self.radioButton31.Text = str_8(lan)
                        self.radioButton31.Width = 120
                        self.radioButton31.Height = 30
                        self.radioButton31.Left = 570
                        self.radioButton31.Top = 200
                        self.radioButton31.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton32 = RadioButton()
                        self.radioButton32.Appearance = 0  
                        self.radioButton32.Text = str_9(lan)
                        self.radioButton32.Width = 120
                        self.radioButton32.Height = 30
                        self.radioButton32.Left = 570
                        self.radioButton32.Top = 240
                        self.radioButton32.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton33 = RadioButton()
                        self.radioButton33.Appearance = 0  
                        self.radioButton33.Text = str_10(lan)
                        self.radioButton33.Width = 120
                        self.radioButton33.Height = 30
                        self.radioButton33.Left = 570
                        self.radioButton33.Top = 280
                        self.radioButton33.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton34 = RadioButton()
                        self.radioButton34.Appearance = 0  
                        self.radioButton34.Text = str_11(lan)
                        self.radioButton34.Width = 120
                        self.radioButton34.Height = 30
                        self.radioButton34.Left = 570
                        self.radioButton34.Top = 320
                        self.radioButton34.CheckedChanged += self.radioButton_checked_changed  

                        self.radioButton73 = RadioButton()
                        self.radioButton73.Appearance = 0  
                        self.radioButton73.Text = str_12(lan)
                        self.radioButton73.Width = 120
                        self.radioButton73.Height = 30
                        self.radioButton73.Left = 570
                        self.radioButton73.Top = 360
                        self.radioButton73.CheckedChanged += self.radioButton_checked_changed   

                        # [UI:COLUMN_6] Create radio buttons for column 6
                        self.radioButton39 = RadioButton()
                        self.radioButton39.Appearance = 0 
                        self.radioButton39.Text = str_8(lan)
                        self.radioButton39.Width = 120
                        self.radioButton39.Height = 30
                        self.radioButton39.Left = 700
                        self.radioButton39.Top = 200
                        self.radioButton39.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton40 = RadioButton()
                        self.radioButton40.Appearance = 0  
                        self.radioButton40.Text = str_9(lan)
                        self.radioButton40.Width = 120
                        self.radioButton40.Height = 30
                        self.radioButton40.Left = 700
                        self.radioButton40.Top = 240
                        self.radioButton40.CheckedChanged+= self.radioButton_checked_changed

                        self.radioButton41 = RadioButton()
                        self.radioButton41.Appearance = 0  
                        self.radioButton41.Text = str_10(lan)
                        self.radioButton41.Width = 120
                        self.radioButton41.Height = 30
                        self.radioButton41.Left = 700
                        self.radioButton41.Top = 280
                        self.radioButton41.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton42 = RadioButton()
                        self.radioButton42.Appearance = 0  
                        self.radioButton42.Text = str_11(lan)
                        self.radioButton42.Width = 120
                        self.radioButton42.Height = 30
                        self.radioButton42.Left = 700
                        self.radioButton42.Top = 320
                        self.radioButton42.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton74 = RadioButton()
                        self.radioButton74.Appearance = 0  
                        self.radioButton74.Text = str_12(lan)
                        self.radioButton74.Width = 120
                        self.radioButton74.Height = 30
                        self.radioButton74.Left = 700
                        self.radioButton74.Top = 360
                        self.radioButton74.CheckedChanged += self.radioButton_checked_changed  

                        # [UI:COLUMN_7] Create radio buttons for column 7
                        self.radioButton48 = RadioButton()
                        self.radioButton48.Appearance = 0  
                        self.radioButton48.Text = str_9(lan)
                        self.radioButton48.Width = 120
                        self.radioButton48.Height = 30
                        self.radioButton48.Left = 830
                        self.radioButton48.Top = 240
                        self.radioButton48.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton49 = RadioButton()
                        self.radioButton49.Appearance = 0  
                        self.radioButton49.Text = str_10(lan)
                        self.radioButton49.Width = 120
                        self.radioButton49.Height = 30
                        self.radioButton49.Left = 830
                        self.radioButton49.Top = 280
                        self.radioButton49.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton50 = RadioButton()
                        self.radioButton50.Appearance = 0  
                        self.radioButton50.Text = str_11(lan)
                        self.radioButton50.Width = 120
                        self.radioButton50.Height = 30
                        self.radioButton50.Left = 830
                        self.radioButton50.Top = 320
                        self.radioButton50.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton75 = RadioButton()
                        self.radioButton75.Appearance = 0  
                        self.radioButton75.Text = str_12(lan)
                        self.radioButton75.Width = 120
                        self.radioButton75.Height = 30
                        self.radioButton75.Left = 830
                        self.radioButton75.Top = 360
                        self.radioButton75.CheckedChanged += self.radioButton_checked_changed  

                        # [UI:COLUMN_8] Create radio buttons for column 8
                        self.radioButton57 = RadioButton()
                        self.radioButton57.Appearance = 0  
                        self.radioButton57.Text = str_10(lan)
                        self.radioButton57.Width = 120
                        self.radioButton57.Height = 30
                        self.radioButton57.Left = 960
                        self.radioButton57.Top = 280
                        self.radioButton57.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton58 = RadioButton()
                        self.radioButton58.Appearance = 0  
                        self.radioButton58.Text = str_11(lan)
                        self.radioButton58.Width = 120
                        self.radioButton58.Height = 30
                        self.radioButton58.Left = 960
                        self.radioButton58.Top = 320
                        self.radioButton58.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton76 = RadioButton()
                        self.radioButton76.Appearance = 0  
                        self.radioButton76.Text = str_12(lan)
                        self.radioButton76.Width = 120
                        self.radioButton76.Height = 30
                        self.radioButton76.Left = 960
                        self.radioButton76.Top = 360
                        self.radioButton76.CheckedChanged += self.radioButton_checked_changed  

                        # [UI:COLUMN_9] Create radio buttons for column 9
                        self.radioButton66 = RadioButton()
                        self.radioButton66.Appearance = 0  
                        self.radioButton66.Text = str_11(lan)
                        self.radioButton66.Width = 120
                        self.radioButton66.Height = 30
                        self.radioButton66.Left = 1090
                        self.radioButton66.Top = 320
                        self.radioButton66.CheckedChanged += self.radioButton_checked_changed

                        self.radioButton77 = RadioButton()
                        self.radioButton77.Appearance = 0  
                        self.radioButton77.Text = str_12(lan)
                        self.radioButton77.Width = 120
                        self.radioButton77.Height = 30
                        self.radioButton77.Left = 1090
                        self.radioButton77.Top = 360
                        self.radioButton77.CheckedChanged += self.radioButton_checked_changed  

                        # [UI:COLUMN_10] Create radio buttons for column 10
                        self.radioButton78 = RadioButton()
                        self.radioButton78.Appearance = 0  
                        self.radioButton78.Text = str_12(lan)
                        self.radioButton78.Width = 120
                        self.radioButton78.Height = 30
                        self.radioButton78.Left = 1210
                        self.radioButton78.Top = 360
                        self.radioButton78.CheckedChanged += self.radioButton_checked_changed   

                        # [UI:FILTER_BUTTON] Create filter button
                        self.button = Button()
                        self.button.Width = 40
                        self.button.Height = 40
                        icon7_path = filter_button()
                        self.button.Image = Icon(icon7_path).ToBitmap()
                        self.button.Left = 675
                        self.button.Top = self.radioButton6.Top + self.radioButton6.Height + 260
                        self.button.Click += self.button_clicked
                        
                        # [UI:FINISH_BUTTON] Create finish button
                        self.finish_button = Button()
                        self.finish_button.Width = 40
                        self.finish_button.Height = 40
                        icon1_path = ok_icon()
                        self.finish_button.Image = Icon(icon1_path).ToBitmap()
                        self.finish_button.Left = 1165
                        self.finish_button.Top = self.button.Top
                        self.finish_button.Click += self.finish_button_clicked

                        # [UI:ZOOM_BUTTON] Create zoom button
                        self.zoom_button = Button()
                        self.zoom_button.Width = 40
                        self.zoom_button.Height = 40
                        icon3_path = zoomextend_button()
                        self.zoom_button.Image = Icon(icon3_path).ToBitmap()
                        self.zoom_button.Left = 1075
                        self.zoom_button.Top = self.button.Top
                        self.zoom_button.Click += self.zoom_button_clicked

                        # [UI:ZOOM_BUTTON] Create zoom button
                        self.hierarchy_close_button = Button()
                        self.hierarchy_close_button.Width = 40
                        self.hierarchy_close_button.Height = 40
                        icon2_path = cancel_icon()
                        self.hierarchy_close_button.Image = Icon(icon2_path).ToBitmap()
                        self.hierarchy_close_button.Left = 1120
                        self.hierarchy_close_button.Top = self.button.Top
                        self.hierarchy_close_button.Click += self.hierarchy_close_button_clicked

                        # [UI:BACK_BUTTON] Create back button
                        self.back_button = Button()
                        self.back_button.Width = 40
                        self.back_button.Height = 40
                        icon6_path = left_button()
                        self.back_button.Image = Icon(icon6_path).ToBitmap()
                        self.back_button.Left = 235
                        self.back_button.Top = self.button.Top
                        self.back_button.Click += self.back_button_clicked

                        # [UI:NEXT_BUTTON] Create next button
                        self.next_button = Button()
                        self.next_button.Width = 40
                        self.next_button.Height = 40
                        icon5_path = right_button()
                        self.next_button.Image = Icon(icon5_path).ToBitmap()
                        self.next_button.Left = 280
                        self.next_button.Top = self.button.Top
                        self.next_button.Click += self.next_button_clicked

                        # [UI:INITIALIZE_BUTTON] Create initialize button
                        self.initial_button = Button()
                        self.initial_button.Width = 40
                        self.initial_button.Height = 40
                        icon4_path = walk_button()
                        self.initial_button.Image = Icon(icon4_path).ToBitmap()
                        self.initial_button.Left = 190
                        self.initial_button.Top = self.button.Top
                        self.initial_button.Click += self.initial_button_clicked
                        
                        # [UI:ROOT_BAR] Create root bar label
                        self.label = Label()
                        self.label.Text = str_13(lan)
                        self.label.AutoSize = True
                        self.label.Left = 50
                        self.label.Top = self.button.Top + self.button.Height + 20
                        self.label.ForeColor = Color.Blue
                        self.label.Font = Font(self.label.Font, FontStyle.Bold)
                        
                        # [UI:SELECTED_OPTION_LABEL] Create selected option label
                        self.selected_option_label = Label()
                        self.selected_option_label.Text = ""
                        self.selected_option_label.AutoSize = True
                        self.selected_option_label.ForeColor = Color.Blue
                        self.selected_option_label.MaximumSize = Size(1090,150)
                        self.selected_option_label.Left = self.label.Left + self.label.Width + 10
                        self.selected_option_label.Top = self.label.Top
                        
                        # [UI:CREATOR_LABEL] Create creator label
                        self.created_by_label = Label()
                        self.created_by_label.AutoSize = True
                        self.created_by_label.Text = "BIM Pars"
                        self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                        self.created_by_label.ForeColor = Color.Blue
                        self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                        self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                        self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                        self.created_by_label.Cursor = Cursors.Hand  
                        self.created_by_label.Click += self.Label_Click

                        # [UI:HELP_LABEL] Create help label
                        self.help = Label()
                        self.help.Text = str_14(lan)
                        self.help.AutoSize = True
                        self.help.Left = 1330
                        self.help.Top = 220
                        self.help.MaximumSize= Size(185,160)
                        self.help.ForeColor = Color.Black
                        
                        # [UI:PICTURE_BOX] Create picture box
                        self.pictureBox = PictureBox()
                        self.pictureBox.Location = Point(1330, 40)
                        self.pictureBox.Size = Size(200, 200)  
                        self.Controls.Add(self.pictureBox)
                        icon_path = skin_mode(skin, coo, bor)
                        image = Bitmap(icon_path)
                        self.pictureBox.Image = image

                        # [UI:LINE] Create line 
                        self.lineLabel = Label()
                        self.lineLabel.Location = Point(180, 275)
                        self.lineLabel.Size = Size(1100, 1)
                        self.lineLabel.BackColor = Color.LightBlue 
                        self.Controls.Add(self.lineLabel)

                        self.line2Label = Label()
                        self.line2Label.Location = Point(1320, 0)
                        self.line2Label.Size = Size(2, 1000)
                        self.line2Label.BackColor = Color.Black
                        self.Controls.Add(self.line2Label)

                        self.line3Label = Label()
                        self.line3Label.Location = Point(180, 440)
                        self.line3Label.Size = Size(1040, 2)
                        self.line3Label.BackColor = Color.Black
                        self.Controls.Add(self.line3Label)

                        self.line4Label = Label()
                        self.line4Label.Location = Point(180, 495)
                        self.line4Label.Size = Size(1040, 2)
                        self.line4Label.BackColor = Color.Blue
                        self.Controls.Add(self.line4Label)

                        # [UI:WORKSHARED_LABEL] Create workshared label
                        self.workshared = Label()
                        self.workshared.Text = str_15(lan)
                        self.workshared.AutoSize = True
                        self.workshared.Left = 75
                        self.workshared.Top = self.lineLabel.Height +267
                        self.workshared.ForeColor = Color.LightBlue
                        self.workshared.Font = Font(self.workshared.Font, FontStyle.Bold)
                        self.Controls.Add(self.workshared)

                        # [UI:NOTE_LABEL] Create note label
                        self.note = Label()
                        self.note.Text = str_16(lan)
                        self.note.AutoSize = True
                        self.note.Left = 1330
                        self.note.MaximumSize= Size(185,300)
                        self.note.Top = 380
                        self.note.ForeColor = Color.Black#Red
                        self.Controls.Add(self.note)
                        
                        # [UI:ADD_CONTROLS] Add all radio buttons and controls to the form
                        self.Controls.Add(self.radioButton1)
                        self.Controls.Add(self.radioButton2)
                        self.Controls.Add(self.radioButton3)
                        self.Controls.Add(self.radioButton4)
                        self.Controls.Add(self.radioButton5)
                        self.Controls.Add(self.radioButton6)
                        self.Controls.Add(self.radioButton7)
                        self.Controls.Add(self.radioButton8)
                        self.Controls.Add(self.radioButton9)
                        self.Controls.Add(self.radioButton10)

                        self.Controls.Add(self.radioButton12)
                        self.Controls.Add(self.radioButton13)
                        self.Controls.Add(self.radioButton14)
                        self.Controls.Add(self.radioButton15)
                        self.Controls.Add(self.radioButton16)
                        self.Controls.Add(self.radioButton17)
                        self.Controls.Add(self.radioButton18)

                        self.Controls.Add(self.radioButton21)
                        self.Controls.Add(self.radioButton22)
                        self.Controls.Add(self.radioButton23)
                        self.Controls.Add(self.radioButton24)
                        self.Controls.Add(self.radioButton25)
                        self.Controls.Add(self.radioButton26)

                        self.Controls.Add(self.radioButton30)
                        self.Controls.Add(self.radioButton31)
                        self.Controls.Add(self.radioButton32)
                        self.Controls.Add(self.radioButton33)
                        self.Controls.Add(self.radioButton34)

                        self.Controls.Add(self.radioButton39)
                        self.Controls.Add(self.radioButton40)
                        self.Controls.Add(self.radioButton41)
                        self.Controls.Add(self.radioButton42)

                        self.Controls.Add(self.radioButton48)
                        self.Controls.Add(self.radioButton49)
                        self.Controls.Add(self.radioButton50)

                        self.Controls.Add(self.radioButton57)
                        self.Controls.Add(self.radioButton58)

                        self.Controls.Add(self.radioButton66)
                        self.Controls.Add(self.radioButton70)
                        self.Controls.Add(self.radioButton71)
                        self.Controls.Add(self.radioButton72)
                        self.Controls.Add(self.radioButton73)
                        self.Controls.Add(self.radioButton74)
                        self.Controls.Add(self.radioButton75)
                        self.Controls.Add(self.radioButton76)
                        self.Controls.Add(self.radioButton77)
                        self.Controls.Add(self.radioButton78)

                        self.Controls.Add(self.button)
                        self.Controls.Add(self.finish_button)
                        self.Controls.Add(self.hierarchy_close_button) 
                        self.Controls.Add(self.back_button)   
                        self.Controls.Add(self.next_button)  
                        self.Controls.Add(self.initial_button) 
                        self.Controls.Add(self.label)
                        self.Controls.Add(self.selected_option_label)
                        self.Controls.Add(self.created_by_label)
                        self.Controls.Add(self.help)
                        
                        # [UI:DEFAULT_STATES] Set default enabled states for radio buttons and controls
                        self.radioButton1.Enabled = True
                        self.radioButton2.Enabled = True
                        self.radioButton3.Enabled = False
                        self.radioButton4.Enabled = False
                        self.radioButton5.Enabled = False
                        self.radioButton6.Enabled = False
                        self.radioButton7.Enabled = False
                        self.radioButton8.Enabled = False
                        self.radioButton9.Enabled = False
                        self.radioButton10.Enabled = False

                        self.radioButton12.Enabled = False
                        self.radioButton13.Enabled = False
                        self.radioButton14.Enabled = False
                        self.radioButton15.Enabled = False
                        self.radioButton16.Enabled = False
                        self.radioButton17.Enabled = False
                        self.radioButton18.Enabled = False

                        self.radioButton21.Enabled = False
                        self.radioButton22.Enabled = False
                        self.radioButton23.Enabled = False
                        self.radioButton24.Enabled = False
                        self.radioButton25.Enabled = False
                        self.radioButton26.Enabled = False

                        self.radioButton30.Enabled = False
                        self.radioButton31.Enabled = False
                        self.radioButton32.Enabled = False
                        self.radioButton33.Enabled = False
                        self.radioButton34.Enabled = False

                        self.radioButton39.Enabled = False
                        self.radioButton40.Enabled = False
                        self.radioButton41.Enabled = False
                        self.radioButton42.Enabled = False

                        self.radioButton48.Enabled = False
                        self.radioButton49.Enabled = False
                        self.radioButton50.Enabled = False

                        self.radioButton57.Enabled = False
                        self.radioButton58.Enabled = False

                        self.radioButton66.Enabled = False
                        self.radioButton70.Enabled = False
                        self.radioButton71.Enabled = False
                        self.radioButton72.Enabled = False
                        self.radioButton73.Enabled = False
                        self.radioButton74.Enabled = False
                        self.radioButton75.Enabled = False
                        self.radioButton76.Enabled = False
                        self.radioButton77.Enabled = False
                        self.radioButton78.Enabled = False

                        self.next_button.Enabled = False
                        self.back_button.Enabled = False
                        self.initial_button.Enabled = False

                        self.checked_radiobutton = None

                    # [UI:LABEL_CLICK] Handle click event for the "Created by" label
                    def Label_Click(self, sender, event):
                        """
                        This function handles the click event for the "Created by" label in the form.

                        Workflow:
                        1. Retrieves the URL for the creator's website using the `parsweb` function.
                        2. Opens the URL in the default web browser using the `webbrowser` module.

                        Key Features:
                        - Provides a clickable link to the creator's website.
                        - Enhances user experience by offering additional information about the tool's creator.
                        """
                        url = parsweb(wurl)
                        webbrowser.open(url)

                    # [UI:RADIO_BUTTON_CHECKED] Handle radio button checked state change
                    def radioButton_checked_changed(self, sender, e):
                        """
                        This function handles the event when a radio button's checked state changes.

                        Workflow:
                        1. Checks if the clicked radio button is selected.
                        2. If another radio button is already selected, unchecks it.
                        3. Updates the currently selected radio button.

                        Key Features:
                        - Ensures only one radio button can be selected at a time.
                        - Manages the state of radio buttons for user selections.
                        """
                        radiobutton = sender
                        if radiobutton.Checked:
                            if self.checked_radiobutton is not None and self.checked_radiobutton != radiobutton:
                                self.checked_radiobutton.Checked = False
                            self.checked_radiobutton = radiobutton
                
                    # [UI:BUTTON_CLICK] Handle button click event
                    def button_clicked(self, sender, e):
                        try:
                            # [UI:CURRENT_VIEW] Handle "Current View" radio button selection
                            if self.checked_radiobutton == self.radioButton1:
                                """
                                This function handles the event when the "Current View" radio button is selected.

                                Workflow:
                                1. Enables the filter button and disables other radio buttons to prevent conflicts.
                                2. Retrieves elements from the current view using the `curr_viewel` function.
                                3. Gets the current view name using the `curr_viewname` function.
                                4. Selects the retrieved elements in the Revit UI.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Updates the form's label to display the current view name.
                                7. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Filters and selects elements from the current view.
                                - Updates the UI to reflect the selected view and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Enable/disable relevant controls
                                self.button.Enabled = True
                                self.radioButton3.Checked = False
                                self.radioButton4.Checked = False
                                self.radioButton9.Checked = False
                                self.radioButton10.Checked = False
                                self.radioButton3.Enabled = True
                                self.radioButton4.Enabled = True
                                self.radioButton9.Enabled = True
                                self.radioButton70.Enabled = True
                                self.radioButton10.Enabled = True
                                self.radioButton1.Enabled = False
                                self.radioButton2.Enabled = False
                                
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.viewel import curr_viewel,curr_viewname
                                from structure.root import storage_path, update_path
                                from sajdmo.modules.filter.st_up import storage, update
                                
                                # [UI:ACTIVE_VIEW] Get elements from the current view
                                uidoc = __revit__.ActiveUIDocument
                                try:    
                                    # [UI:SELECT_ELEMENTS] Select elements in the current view
                                    element_ids = curr_viewel(uidoc)
                                    viewname=curr_viewname(uidoc)
                                    uidoc.Selection.SetElementIds(element_ids)
                                    selected_elements = uidoc.Selection.SetElementIds(element_ids)   

                                    # [UI:STORAGE] Store and update selected elements' data             
                                    storage()
                                    update()

                                    # [UI:UPDATE_LABEL] Update the form's label with the current view name
                                    self.selected_option_label.Text += str_17(lan)+str(viewname)+"****"

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:ANY_VIEW] Handle "Any View" radio button selection
                            elif self.checked_radiobutton == self.radioButton2:
                                """
                                This function handles the event when the "Any View" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select views using the `ae` function.
                                3. Updates the form's label to display the names of the selected views.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements from any selected view.
                                - Updates the UI to reflect the selected views and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton3.Checked = False
                                self.radioButton4.Checked = False
                                self.radioButton9.Checked = False
                                self.radioButton10.Checked = False
                                self.radioButton70.Checked = False
                                self.radioButton3.Enabled = True
                                self.radioButton4.Enabled = True
                                self.radioButton9.Enabled = True
                                self.radioButton70.Enabled = True
                                self.radioButton10.Enabled = True
                                self.radioButton1.Enabled = False
                                self.radioButton2.Enabled = False
                                self.selected_option_label.Text += str_17(lan)   

                                try:
                                    # [SCRIPT:IMPORTS] Import necessary modules       
                                    from sajdmo.modules.filter.av import ae
                                    from sajdmo.modules.filter.st_up import storage, update
                                    
                                    # [UI:VIEW_SELECTION] Prompt user to select views
                                    title=str_18(lan)
                                    cancel_alert=str_19(lan)
                                    button_name=str_20(lan)
                                    selected_views=ae(title, button_name, cancel_alert )

                                    # [UI:UPDATE_LABEL] Update the form's label with selected view names
                                    for view in selected_views:
                                        self.selected_option_label.Text +=str(view.Name)+"****"

                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:LEVEL] Handle "Level" radio button selection
                            elif self.checked_radiobutton == self.radioButton3:
                                """
                                This function handles the event when the "Level" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select levels using the `flevel` function.
                                3. Updates the form's label to display the names of the selected levels.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected levels.
                                - Updates the UI to reflect the selected levels and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton1.Enabled = False
                                self.radioButton2.Enabled = False
                                self.radioButton3.Enabled = False
                                self.radioButton4.Enabled = False
                                self.radioButton9.Enabled = False
                                self.radioButton10.Enabled = False
                                self.radioButton70.Enabled = False
                                self.radioButton12.Checked = False
                                self.radioButton17.Checked = False
                                self.radioButton18.Checked = False
                                self.radioButton12.Enabled = True
                                self.radioButton17.Enabled = True
                                self.radioButton18.Enabled = True
                                self.radioButton71.Enabled = True
                                self.selected_option_label.Text += str_21(lan)
                                try:
                                    # [SCRIPT:IMPORTS] Import necessary modules
                                    from sajdmo.modules.filter.st_up import storage, update
                                    from sajdmo.modules.filter.fl import flevel
                                    
                                    # [UI:LEVEL_SELECTION] Prompt user to select levels
                                    title=str_22(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    selected_levels=flevel(title,button_name,cancel_alert)

                                    # [UI:UPDATE_LABEL] Update the form's label with selected level names
                                    for level in selected_levels:
                                        selected_names= (level.Name)  
                                        self.selected_option_label.Text +=str(selected_names)+"****"

                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:CATEGORY] Handle "Category" radio button selection
                            elif self.checked_radiobutton == self.radioButton4:
                                """
                                This function handles the event when the "Category" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select categories using the `fcat` function.
                                3. Updates the form's label to display the names of the selected categories.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected categories.
                                - Updates the UI to reflect the selected categories and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton13.Enabled = True
                                self.radioButton15.Enabled = True
                                self.radioButton17.Enabled = True
                                self.radioButton18.Enabled = True
                                self.radioButton71.Enabled = True
                                self.radioButton3.Enabled = False
                                self.radioButton4.Enabled = False
                                self.radioButton9.Enabled = False
                                self.radioButton10.Enabled = False
                                self.radioButton70.Enabled = False
                                self.radioButton13.Checked = False
                                self.radioButton15.Checked = False
                                self.radioButton17.Checked = False
                                self.radioButton18.Checked = False
                                self.selected_option_label.Text += str_23(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fc import fcat
                                try:
                                    # [UI:CATEGORY_SELECTION] Prompt user to select categories
                                    title=str_25(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    element_alert_title=str_24(lan)
                                    element_alert=str_26(lan)
                                    selected_category= fcat(title,button_name,cancel_alert,element_alert_title,element_alert)
                                    selected_category_string = "****".join(selected_category)
                                    self.selected_option_label.Text += str(selected_category_string)+"****"

                                    # [UI:UPDATE_LABEL] Update the form's label with selected category names
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:OWNERSHIP] Handle "Ownership" radio button selection        
                            elif self.checked_radiobutton == self.radioButton9:
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select owners using the `fowner` function.
                                3. Updates the form's label to display the selected owner's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton18.Enabled = True
                                self.radioButton71.Enabled = True
                                self.radioButton9.Enabled = False
                                self.radioButton3.Enabled = False
                                self.radioButton4.Enabled = False
                                self.radioButton9.Enabled = False
                                self.radioButton10.Enabled = False
                                self.radioButton70.Enabled = False
                                self.radioButton18.Checked = False               
                                self.selected_option_label.Text += str_27(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fo import fowner

                                try:
                                    # [UI:OWNER_SELECTION] Prompt user to select owners
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_29(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_30(lan)
                                    noownerselect_alert=str_31(lan)
                                    nonamefound=str_32(lan)
                                    selected_owner=fowner(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected owner's name
                                    self.selected_option_label.Text +=str(selected_owner)+"****"

                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:MODIFIED_BY] Handle "Modified" radio button selection    
                            elif self.checked_radiobutton == self.radioButton10:
                                """
                                This function handles the event when the "Modified" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select the last modifier using the `fmodified` function.
                                3. Updates the form's label to display the selected modifier's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on the last modifier.
                                - Updates the UI to reflect the selected modifier and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton3.Enabled = False
                                self.radioButton4.Enabled = False
                                self.radioButton9.Enabled = False
                                self.radioButton10.Enabled = False
                                self.radioButton70.Enabled = False
                                self.radioButton71.Enabled = True
                                self.selected_option_label.Text += str_33(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fm import fmodified

                                try:
                                    # [UI:MODIFIER_SELECTION] Prompt user to select the last modifier
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected modifier's name
                                    self.selected_option_label.Text +=str(selected_last_changed_by)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CATEGORY] Handle "Category" radio button selection
                            elif self.checked_radiobutton == self.radioButton12:
                                """
                                This function handles the event when the "Category" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select categories using the `fcat` function.
                                3. Updates the form's label to display the names of the selected categories.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected categories.
                                - Updates the UI to reflect the selected categories and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton1.Enabled = False
                                self.radioButton2.Enabled = False
                                self.radioButton3.Enabled = False
                                self.radioButton4.Enabled = False
                                self.radioButton5.Enabled = False
                                self.radioButton6.Enabled = False
                                self.radioButton7.Enabled = False
                                self.radioButton8.Enabled = False
                                self.radioButton9.Enabled = False
                                self.radioButton21.Checked = False
                                self.radioButton23.Checked = False
                                self.radioButton25.Checked = False
                                self.radioButton26.Enabled = True
                                self.radioButton21.Enabled = True
                                self.radioButton23.Enabled = True
                                self.radioButton25.Enabled = True
                                self.radioButton26.Enabled = True
                                self.radioButton72.Enabled = True
                                self.radioButton12.Enabled = False
                                self.radioButton17.Enabled = False
                                self.radioButton18.Enabled = False
                                self.radioButton71.Enabled = False
                                self.radioButton72.Enabled = True
                                self.initial_button.Enabled = True
                                self.selected_option_label.Text += str_23(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fc import fcat

                                try:
                                    # [UI:CATEGORY_SELECTION] Prompt user to select categories
                                    title=str_25(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    element_alert_title=str_24(lan)
                                    element_alert=str_26(lan)
                                    selected_category= fcat(title,button_name,cancel_alert,element_alert_title,element_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with selected category names
                                    selected_category_string = "****".join(selected_category)
                                    self.selected_option_label.Text += str(selected_category_string)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:FAMILY] Handle "Family" radio button selection
                            elif self.checked_radiobutton == self.radioButton13:
                                """
                                This function handles the event when the "Family" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select families using the `ffamily` function.
                                3. Updates the form's label to display the names of the selected families.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected families.
                                - Updates the UI to reflect the selected families and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton22.Enabled = True
                                self.radioButton23.Enabled = True
                                self.radioButton25.Enabled = True
                                self.radioButton26.Enabled = True
                                self.radioButton13.Enabled = False
                                self.radioButton15.Enabled = False
                                self.radioButton17.Enabled = False
                                self.radioButton18.Enabled = False
                                self.radioButton22.Checked = False
                                self.radioButton23.Checked = False
                                self.radioButton25.Checked = False
                                self.radioButton26.Checked = False
                                self.radioButton71.Enabled = False
                                self.radioButton72.Enabled = True
                                self.initial_button.Enabled = True
                                self.selected_option_label.Text += str_38(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.ff import ffamily

                                try:
                                    # [UI:FAMILY_SELECTION] Prompt user to select families
                                    title=str_39(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelementtitle_alert=str_24(lan)
                                    noelement_alert=str_40(lan)
                                    selected_family=ffamily(title,button_name,cancel_alert,noelement_alert,noelementtitle_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with selected family names
                                    for family in selected_family:
                                        self.selected_option_label.Text +=str(family)+"****"

                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:PARAMETER] Handle "Parameter" radio button selection
                            elif self.checked_radiobutton == self.radioButton15:
                                """
                                This function handles the event when the "Parameter" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to input a parameter using the `single_input` form.
                                3. Filters elements based on the selected parameter using the `fparam` function.
                                4. Updates the form's label to display the selected parameter.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter.
                                - Updates the UI to reflect the selected parameter and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton26.Enabled = True
                                self.radioButton25.Enabled = True
                                self.radioButton24.Enabled = True
                                self.radioButton71.Enabled = False
                                self.radioButton72.Enabled = True
                                self.radioButton13.Enabled = False
                                self.radioButton17.Enabled = False
                                self.radioButton18.Enabled = False
                                self.radioButton15.Enabled = False
                                self.radioButton26.Checked = False
                                self.initial_button.Enabled = True
                                self.selected_option_label.Text += str_41(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fp import fparam
                                from sajdmo.forms.single import single_input

                                try:
                                    # [UI:PARAMETER_INPUT] Prompt user to input a parameter
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    window_name = str_8(lan)
                                    url = parsweb(wurl)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None:
                                        sys.exit()

                                    # [UI:PARAMETER_FILTER] Filter elements based on the selected parameter
                                    selected_parameter= user_input
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_43(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    selected_parameter=fparam(selected_parameter,cancel_alert,noelement_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected parameter
                                    self.selected_option_label.Text +=str(selected_parameter)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:OWNERSHIP] Handle "Ownership" radio button selection
                            elif self.checked_radiobutton == self.radioButton17:
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select owners using the `fowner` function.
                                3. Updates the form's label to display the selected owner's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton26.Enabled = True
                                self.radioButton71.Enabled = True
                                self.radioButton12.Enabled = False
                                self.radioButton17.Enabled = False
                                self.radioButton18.Enabled = False
                                self.radioButton13.Enabled = False
                                self.radioButton15.Enabled = False
                                self.radioButton71.Enabled = False
                                self.radioButton72.Enabled = True
                                self.radioButton26.Checked = False
                                self.initial_button.Enabled = True
                                self.selected_option_label.Text += str_27(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fo import fowner

                                try:
                                    # [UI:OWNER_SELECTION] Prompt user to select owners
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_29(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_30(lan)
                                    noownerselect_alert=str_31(lan)
                                    nonamefound=str_32(lan)
                                    selected_owner=fowner(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected owner's name
                                    self.selected_option_label.Text +=str(selected_owner)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:MODIFIED_BY] Handle "Modified" radio button selection   
                            elif self.checked_radiobutton == self.radioButton18:
                                """
                                This function handles the event when the "Modified" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select the last modifier using the `fmodified` function.
                                3. Updates the form's label to display the selected modifier's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on the last modifier.
                                - Updates the UI to reflect the selected modifier and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton12.Enabled = False
                                self.radioButton17.Enabled = False
                                self.radioButton18.Enabled = False
                                self.radioButton13.Enabled = False
                                self.radioButton15.Enabled = False
                                self.radioButton72.Enabled = True
                                self.radioButton71.Enabled = False
                                self.initial_button.Enabled = True
                                self.selected_option_label.Text += str_33(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fm import fmodified

                                try:
                                    # [UI:MODIFIER_SELECTION] Prompt user to select the last modifier
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected modifier's name
                                    self.selected_option_label.Text +=str(selected_last_changed_by)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:FAMILY] Handle "Family" radio button selection
                            elif self.checked_radiobutton == self.radioButton21:
                                """
                                This function handles the event when the "Family" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select families using the `ffamily` function.
                                3. Updates the form's label to display the names of the selected families.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected families.
                                - Updates the UI to reflect the selected families and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton1.Enabled = False
                                self.radioButton2.Enabled = False
                                self.radioButton3.Enabled = False
                                self.radioButton4.Enabled = False
                                self.radioButton5.Enabled = False
                                self.radioButton6.Enabled = False
                                self.radioButton7.Enabled = False
                                self.radioButton8.Enabled = False
                                self.radioButton9.Enabled = False
                                self.radioButton30.Checked = False
                                self.radioButton31.Checked = False
                                self.radioButton33.Checked = False
                                self.radioButton34.Checked = False
                                self.radioButton30.Enabled = True
                                self.radioButton31.Enabled = True
                                self.radioButton33.Enabled = True
                                self.radioButton34.Enabled = True
                                self.radioButton21.Enabled = False
                                self.radioButton23.Enabled = False
                                self.radioButton25.Enabled = False
                                self.radioButton26.Enabled = False
                                self.radioButton72.Enabled = False
                                self.radioButton73.Enabled = True
                                self.selected_option_label.Text += str_38(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.ff import ffamily

                                try:
                                    # [UI:FAMILY_SELECTION] Prompt user to select families
                                    title=str_39(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelementtitle_alert=str_24(lan)
                                    noelement_alert=str_40(lan)
                                    selected_family=ffamily(title,button_name,cancel_alert,noelement_alert,noelementtitle_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with selected family names
                                    for family in selected_family:
                                        self.selected_option_label.Text +=str(family)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:TYPE] Handle "Type" radio button selection
                            elif self.checked_radiobutton == self.radioButton22:
                                """
                                This function handles the event when the "Type" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select types using the `ftype` function.
                                3. Updates the form's label to display the names of the selected types.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected types.
                                - Updates the UI to reflect the selected types and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton31.Enabled = True
                                self.radioButton33.Enabled = True
                                self.radioButton34.Enabled = True
                                self.radioButton22.Enabled = False
                                self.radioButton23.Enabled = False
                                self.radioButton25.Enabled = False
                                self.radioButton26.Enabled = False
                                self.radioButton31.Checked = False
                                self.radioButton33.Checked = False
                                self.radioButton34.Checked = False
                                self.radioButton72.Enabled = False
                                self.radioButton73.Enabled = True
                                self.selected_option_label.Text += str_50(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.ft import ftype

                                try:
                                    # [UI:TYPE_SELECTION] Prompt user to select types
                                    title = str_52(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelementtitle_alert=str_24(lan)
                                    noelement_alert=str_51(lan)
                                    selected_type=ftype(title,button_name,cancel_alert,noelementtitle_alert,noelement_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with selected type names
                                    for type in selected_type:
                                        self.selected_option_label.Text +=str(type)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:PARAMETER] Handle "Parameter" radio button selection                
                            elif self.checked_radiobutton == self.radioButton23:
                                """
                                This function handles the event when the "Parameter" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to input a parameter using the `single_input` form.
                                3. Filters elements based on the selected parameter using the `fparam` function.
                                4. Updates the form's label to display the selected parameter.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter.
                                - Updates the UI to reflect the selected parameter and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton32.Enabled = True
                                self.radioButton33.Enabled = True
                                self.radioButton34.Enabled = True
                                self.radioButton21.Enabled = False
                                self.radioButton23.Enabled = False
                                self.radioButton25.Enabled = False
                                self.radioButton26.Enabled = False
                                self.radioButton22.Enabled = False
                                self.radioButton32.Checked = False
                                self.radioButton33.Checked = False
                                self.radioButton34.Checked = False
                                self.radioButton72.Enabled = False
                                self.radioButton73.Enabled = True
                                self.selected_option_label.Text += str_41(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fp import fparam
                                from sajdmo.forms.single import single_input

                                try:
                                    # [UI:PARAMETER_INPUT] Prompt user to input a parameter
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    window_name = str_8(lan)
                                    url = parsweb(wurl)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None:
                                        sys.exit()

                                    # [UI:PARAMETER_FILTER] Filter elements based on the selected parameter
                                    selected_parameter= user_input
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_43(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    selected_parameter=fparam(selected_parameter,cancel_alert,noelement_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected parameter
                                    self.selected_option_label.Text +=str(selected_parameter)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:VALUE] Handle "Value" radio button selection
                            elif self.checked_radiobutton == self.radioButton24:
                                """
                                This function handles the event when the "Value" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to input a parameter and value using the `double_input` form.
                                3. Filters elements based on the selected parameter and value using the `fvalue` function.
                                4. Updates the form's label to display the selected parameter and value.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter and value.
                                - Updates the UI to reflect the selected parameter, value, and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton34.Enabled = True
                                self.radioButton33.Enabled = True
                                self.radioButton25.Enabled = False
                                self.radioButton26.Enabled = False
                                self.radioButton24.Enabled = False
                                self.radioButton72.Enabled = False
                                self.radioButton73.Enabled = True
                                self.radioButton34.Checked = False

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fv import fvalue
                                from sajdmo.forms.double import double_input

                                try:
                                    # [UI:VALUE_INPUT] Prompt user to input a parameter and value
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path =ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    value_label = str_46(lan)
                                    window_name = str_9(lan)
                                    url = parsweb(wurl)
                                    user_input1, user_input2 = double_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, url)
                                    selected_parameter=user_input1
                                    selected_value=user_input2

                                    # [UI:VALUE_FILTER] Filter elements based on the selected parameter and value
                                    emptyselection_alert=str_28(lan)
                                    noelement_alert=str_35(lan)
                                    noelementwithvalue_alert=str_45(lan)
                                    novalueinsert_alert=str_47(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    fvalue(selected_parameter,selected_value,emptyselection_alert,noelement_alert,noelementwithvalue_alert,novalueinsert_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected parameter and value
                                    self.selected_option_label.Text += str_48(lan)+str(user_input1)+str_49(lan)+str(user_input2)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:OWNERSHIP] Handle "Ownership" radio button selection
                            elif self.checked_radiobutton == self.radioButton25:
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select owners using the `fowner` function.
                                3. Updates the form's label to display the selected owner's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton34.Enabled = True
                                self.radioButton21.Enabled = False
                                self.radioButton23.Enabled = False
                                self.radioButton25.Enabled = False
                                self.radioButton26.Enabled = False
                                self.radioButton22.Enabled = False
                                self.radioButton24.Enabled = False
                                self.radioButton34.Checked = False
                                self.radioButton72.Enabled = False
                                self.radioButton73.Enabled = True
                                self.selected_option_label.Text += str_27(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fo import fowner

                                try:
                                    # [UI:OWNER_SELECTION] Prompt user to select owners
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_29(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_30(lan)
                                    noownerselect_alert=str_31(lan)
                                    nonamefound=str_32(lan)
                                    selected_owner=fowner(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected owner's name
                                    self.selected_option_label.Text +=str(selected_owner)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:MODIFIED_BY] Handle "Modified" radio button selection                 
                            elif self.checked_radiobutton == self.radioButton26:
                                """
                                This function handles the event when the "Modified" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select the last modifier using the `fmodified` function.
                                3. Updates the form's label to display the selected modifier's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on the last modifier.
                                - Updates the UI to reflect the selected modifier and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton21.Enabled = False
                                self.radioButton23.Enabled = False
                                self.radioButton25.Enabled = False
                                self.radioButton26.Enabled = False
                                self.radioButton22.Enabled = False
                                self.radioButton24.Enabled = False
                                self.radioButton72.Enabled = False
                                self.radioButton73.Enabled = True
                                self.selected_option_label.Text += str_33(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fm import fmodified

                                try:
                                    # [UI:MODIFIER_SELECTION] Prompt user to select the last modifier
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected modifier's name
                                    self.selected_option_label.Text +=str(selected_last_changed_by)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()  

                            # [UI:TYPE] Handle "Type" radio button selection
                            elif self.checked_radiobutton == self.radioButton30:
                                """
                                This function handles the event when the "Type" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select types using the `ftype` function.
                                3. Updates the form's label to display the names of the selected types.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected types.
                                - Updates the UI to reflect the selected types and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton39.Checked = False
                                self.radioButton41.Checked = False
                                self.radioButton42.Checked = False
                                self.radioButton39.Enabled = True
                                self.radioButton41.Enabled = True
                                self.radioButton42.Enabled = True
                                self.radioButton30.Enabled = False
                                self.radioButton31.Enabled = False
                                self.radioButton33.Enabled = False
                                self.radioButton34.Enabled = False
                                self.radioButton73.Enabled = False
                                self.radioButton73.Enabled = False
                                self.radioButton74.Enabled = True
                                self.selected_option_label.Text += str_50(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.ft import ftype

                                try:
                                    # [UI:TYPE_SELECTION] Prompt user to select types
                                    title = str_52(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelementtitle_alert=str_24(lan)
                                    noelement_alert=str_51(lan)
                                    selected_type=ftype(title,button_name,cancel_alert,noelementtitle_alert,noelement_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with selected type names
                                    for type in selected_type:
                                        self.selected_option_label.Text +=str(type)+"****"

                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:PARAMETER] Handle "Parameter" radio button selection 
                            elif self.checked_radiobutton == self.radioButton31:
                                """
                                This function handles the event when the "Parameter" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to input a parameter using the `single_input` form.
                                3. Filters elements based on the selected parameter using the `fparam` function.
                                4. Updates the form's label to display the selected parameter.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter.
                                - Updates the UI to reflect the selected parameter and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton40.Enabled = True
                                self.radioButton41.Enabled = True
                                self.radioButton42.Enabled = True               
                                self.radioButton30.Enabled = False
                                self.radioButton31.Enabled = False
                                self.radioButton33.Enabled = False
                                self.radioButton34.Enabled = False
                                self.radioButton40.Checked = False
                                self.radioButton41.Checked = False
                                self.radioButton42.Checked = False
                                self.radioButton73.Enabled = False
                                self.radioButton74.Enabled = True               
                                self.selected_option_label.Text += str_41(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fp import fparam
                                from sajdmo.forms.single import single_input

                                try:
                                    # [UI:PARAMETER_INPUT] Prompt user to input a parameter
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    window_name = str_8(lan)
                                    url = parsweb(wurl)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None:
                                        sys.exit()

                                    # [UI:PARAMETER_FILTER] Filter elements based on the selected parameter 
                                    selected_parameter= user_input
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_43(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    selected_parameter=fparam(selected_parameter,cancel_alert,noelement_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected parameter
                                    self.selected_option_label.Text +=str(selected_parameter)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:VALUE] Handle "Value" radio button selection
                            elif self.checked_radiobutton == self.radioButton32:
                                """
                                This function handles the event when the "Value" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to input a parameter and value using the `double_input` form.
                                3. Filters elements based on the selected parameter and value using the `fvalue` function.
                                4. Updates the form's label to display the selected parameter and value.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter and value.
                                - Updates the UI to reflect the selected parameter, value, and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton41.Enabled = True
                                self.radioButton42.Enabled = True
                                self.radioButton32.Enabled = False
                                self.radioButton33.Enabled = False
                                self.radioButton34.Enabled = False
                                self.radioButton73.Enabled = False
                                self.radioButton74.Enabled = True
                                self.radioButton41.Checked = False
                                self.radioButton42.Checked = False

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fv import fvalue
                                from sajdmo.forms.double import double_input

                                try:
                                    # [UI:VALUE_INPUT] Prompt user to input a parameter and value
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path =ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    value_label = str_46(lan)
                                    window_name = str_9(lan)
                                    url = parsweb(wurl)
                                    user_input1, user_input2 = double_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, url)
                                    selected_parameter=user_input1
                                    selected_value=user_input2

                                    # [UI:VALUE_FILTER] Filter elements based on the selected parameter and value
                                    emptyselection_alert=str_28(lan)
                                    noelement_alert=str_35(lan)
                                    noelementwithvalue_alert=str_45(lan)
                                    novalueinsert_alert=str_47(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    fvalue(selected_parameter,selected_value,emptyselection_alert,noelement_alert,noelementwithvalue_alert,novalueinsert_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected parameter and value
                                    self.selected_option_label.Text += str_48(lan)+str(user_input1)+str_49(lan)+str(user_input2)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:OWNERSHIP] Handle "Ownership" radio button selection
                            elif self.checked_radiobutton == self.radioButton33:
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select owners using the `fowner` function.
                                3. Updates the form's label to display the selected owner's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton42.Checked = False
                                self.radioButton32.Enabled = False
                                self.radioButton42.Enabled = True
                                self.radioButton33.Enabled = False
                                self.radioButton30.Enabled = False
                                self.radioButton31.Enabled = False
                                self.radioButton34.Enabled = False
                                self.radioButton73.Enabled = False
                                self.radioButton74.Enabled = True
                                self.selected_option_label.Text += str_27(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fo import fowner

                                try:
                                    # [UI:OWNER_SELECTION] Prompt user to select owners
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_29(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_30(lan)
                                    noownerselect_alert=str_31(lan)
                                    nonamefound=str_32(lan)
                                    selected_owner=fowner(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected owner's name
                                    self.selected_option_label.Text +=str(selected_owner)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:MODIFIED_BY] Handle "Modified" radio button selection
                            elif self.checked_radiobutton == self.radioButton34:
                                """
                                This function handles the event when the "Modified" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select the last modifier using the `fmodified` function.
                                3. Updates the form's label to display the selected modifier's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on the last modifier.
                                - Updates the UI to reflect the selected modifier and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton34.Enabled = False
                                self.radioButton30.Enabled = False
                                self.radioButton31.Enabled = False
                                self.radioButton32.Enabled = False
                                self.radioButton33.Enabled = False
                                self.radioButton25.Enabled = False
                                self.radioButton74.Enabled = True
                                self.radioButton73.Enabled = False
                                self.radioButton34.Checked = False
                                self.selected_option_label.Text += str_33(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fm import fmodified
                                try:
                                    #Modifyer selection
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:MODIFIER_SELECTION] Prompt user to select the last modifier
                                    self.selected_option_label.Text +=str(selected_last_changed_by)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:PARAMETER] Handle "Parameter" radio button selection          
                            elif self.checked_radiobutton == self.radioButton39:
                                """
                                This function handles the event when the "Parameter" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to input a parameter using the `single_input` form.
                                3. Filters elements based on the selected parameter using the `fparam` function.
                                4. Updates the form's label to display the selected parameter.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter.
                                - Updates the UI to reflect the selected parameter and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton48.Checked = False
                                self.radioButton49.Checked = False
                                self.radioButton50.Checked = False
                                self.radioButton48.Enabled = True
                                self.radioButton49.Enabled = True
                                self.radioButton50.Enabled = True
                                self.radioButton39.Enabled = False
                                self.radioButton41.Enabled = False
                                self.radioButton42.Enabled = False
                                self.radioButton74.Enabled = False
                                self.radioButton75.Enabled = True
                                self.selected_option_label.Text += str_41(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fp import fparam
                                from sajdmo.forms.single import single_input
                                
                                try:
                                    # [UI:PARAMETER_INPUT] Prompt user to input a parameter
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    window_name = str_8(lan)
                                    url = parsweb(wurl)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None:
                                        sys.exit()

                                    # [UI:PARAMETER_FILTER] Filter elements based on the selected parameter
                                    selected_parameter= user_input
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_43(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    selected_parameter=fparam(selected_parameter,cancel_alert,noelement_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected parameter
                                    self.selected_option_label.Text +=str(selected_parameter)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:VALUE] Handle "Value" radio button selection
                            elif self.checked_radiobutton == self.radioButton40:
                                """
                                This function handles the event when the "Value" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to input a parameter and value using the `double_input` form.
                                3. Filters elements based on the selected parameter and value using the `fvalue` function.
                                4. Updates the form's label to display the selected parameter and value.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter and value.
                                - Updates the UI to reflect the selected parameter, value, and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton49.Enabled = True
                                self.radioButton50.Enabled = True
                                self.radioButton40.Enabled = False
                                self.radioButton41.Enabled = False
                                self.radioButton42.Enabled = False
                                self.radioButton49.Checked = False
                                self.radioButton50.Checked = False
                                self.radioButton74.Enabled = False
                                self.radioButton75.Enabled = True

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fv import fvalue
                                from sajdmo.forms.double import double_input

                                try:
                                    # [UI:VALUE_INPUT] Prompt user to input a parameter and value
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path =ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    value_label = str_46(lan)
                                    window_name = str_9(lan)
                                    url = parsweb(wurl)
                                    user_input1, user_input2 = double_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, url)
                                    selected_parameter=user_input1
                                    selected_value=user_input2

                                    # [UI:VALUE_FILTER] Filter elements based on the selected parameter and value
                                    emptyselection_alert=str_28(lan)
                                    noelement_alert=str_35(lan)
                                    noelementwithvalue_alert=str_45(lan)
                                    novalueinsert_alert=str_47(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    fvalue(selected_parameter,selected_value,emptyselection_alert,noelement_alert,noelementwithvalue_alert,novalueinsert_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected parameter and value
                                    self.selected_option_label.Text += str_48(lan)+str(user_input1)+str_49(lan)+str(user_input2)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:OWNERSHIP] Handle "Ownership" radio button selection
                            elif self.checked_radiobutton == self.radioButton41:
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select owners using the `fowner` function.
                                3. Updates the form's label to display the selected owner's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton50.Enabled = True
                                self.radioButton40.Enabled = False
                                self.radioButton41.Enabled = False
                                self.radioButton42.Enabled = False
                                self.radioButton39.Enabled = False
                                self.radioButton50.Checked = False
                                self.radioButton74.Enabled = False
                                self.radioButton75.Enabled = True
                                self.selected_option_label.Text += str_27(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fo import fowner

                                try:
                                    # [UI:OWNER_SELECTION] Prompt user to select owners
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_29(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_30(lan)
                                    noownerselect_alert=str_31(lan)
                                    nonamefound=str_32(lan)
                                    selected_owner=fowner(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected owner's name
                                    self.selected_option_label.Text +=str(selected_owner)+"****"

                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:MODIFIED_BY] Handle "Modified" radio button selection   
                            elif self.checked_radiobutton == self.radioButton42:
                                """
                                This function handles the event when the "Modified" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select the last modifier using the `fmodified` function.
                                3. Updates the form's label to display the selected modifier's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on the last modifier.
                                - Updates the UI to reflect the selected modifier and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton39.Enabled = False
                                self.radioButton41.Enabled = False
                                self.radioButton42.Enabled = False
                                self.radioButton74.Enabled = False
                                self.radioButton75.Enabled = True
                                self.selected_option_label.Text += str_33(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fm import fmodified

                                try:
                                    # [UI:MODIFIER_SELECTION] Prompt user to select the last modifier
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected modifier's name
                                    self.selected_option_label.Text +=str(selected_last_changed_by)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:VALUE] Handle "Value" radio button selection            
                            elif self.checked_radiobutton == self.radioButton48:
                                """
                                This function handles the event when the "Value" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to input a parameter and value using the `double_input` form.
                                3. Filters elements based on the selected parameter and value using the `fvalue` function.
                                4. Updates the form's label to display the selected parameter and value.
                                5. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                6. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter and value.
                                - Updates the UI to reflect the selected parameter, value, and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton57.Checked = False
                                self.radioButton58.Checked = False
                                self.radioButton57.Enabled = True
                                self.radioButton58.Enabled = True
                                self.radioButton48.Enabled = False
                                self.radioButton49.Enabled = False
                                self.radioButton50.Enabled = False
                                self.radioButton75.Enabled = False
                                self.radioButton76.Enabled = True

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fv import fvalue
                                from sajdmo.forms.double import double_input

                                try:
                                    # [UI:VALUE_INPUT] Prompt user to input a parameter and value
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path =ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    value_label = str_46(lan)
                                    window_name = str_9(lan)
                                    url = parsweb(wurl)
                                    user_input1, user_input2 = double_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, url)
                                    selected_parameter=user_input1
                                    selected_value=user_input2

                                    # [UI:VALUE_FILTER] Filter elements based on the selected parameter and value
                                    emptyselection_alert=str_28(lan)
                                    noelement_alert=str_35(lan)
                                    noelementwithvalue_alert=str_45(lan)
                                    novalueinsert_alert=str_47(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    fvalue(selected_parameter,selected_value,emptyselection_alert,noelement_alert,noelementwithvalue_alert,novalueinsert_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected parameter and value
                                    self.selected_option_label.Text += str_48(lan)+str(user_input1)+str_49(lan)+str(user_input2)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:OWNERSHIP] Handle "Ownership" radio button selection
                            elif self.checked_radiobutton == self.radioButton49:
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select owners using the `fowner` function.
                                3. Updates the form's label to display the selected owner's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton58.Enabled = True
                                self.radioButton48.Enabled = False
                                self.radioButton49.Enabled = False
                                self.radioButton50.Enabled = False
                                self.radioButton75.Enabled = False
                                self.radioButton76.Enabled = True
                                self.radioButton58.Checked = False
                                self.selected_option_label.Text += str_27(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fo import fowner

                                try:
                                    # [UI:OWNER_SELECTION] Prompt user to select owners
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_29(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_30(lan)
                                    noownerselect_alert=str_31(lan)
                                    nonamefound=str_32(lan)
                                    selected_owner=fowner(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected owner's name
                                    self.selected_option_label.Text +=str(selected_owner)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()
                                
                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:MODIFIED_BY] Handle "Modified" radio button selection
                            elif self.checked_radiobutton == self.radioButton50:
                                """
                                This function handles the event when the "Modified" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select the last modifier using the `fmodified` function.
                                3. Updates the form's label to display the selected modifier's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on the last modifier.
                                - Updates the UI to reflect the selected modifier and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton50.Enabled = False
                                self.radioButton48.Enabled = False
                                self.radioButton49.Enabled = False
                                self.radioButton50.Checked = False
                                self.radioButton75.Enabled = False
                                self.radioButton76.Enabled = True
                                self.selected_option_label.Text += str_33(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fm import fmodified

                                try:
                                    # [UI:MODIFIER_SELECTION] Prompt user to select the last modifier
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected modifier's name
                                    self.selected_option_label.Text +=str(selected_last_changed_by)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:OWNERSHIP] Handle "Ownership" radio button selection
                            elif self.checked_radiobutton == self.radioButton57:
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select owners using the `fowner` function.
                                3. Updates the form's label to display the selected owner's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton66.Checked = False
                                self.radioButton66.Enabled = True
                                self.radioButton57.Enabled = False
                                self.radioButton58.Enabled = False
                                self.radioButton76.Enabled = False
                                self.radioButton77.Enabled = True
                                self.selected_option_label.Text += str_27(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fo import fowner

                                try:
                                    # [UI:OWNER_SELECTION] Prompt user to select owners
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_29(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_30(lan)
                                    noownerselect_alert=str_31(lan)
                                    nonamefound=str_32(lan)
                                    selected_owner=fowner(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected owner's name
                                    self.selected_option_label.Text +=str(selected_owner)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:MODIFIED_BY] Handle "Modified" radio button selection  
                            elif self.checked_radiobutton == self.radioButton58:
                                """
                                This function handles the event when the "Modified" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select the last modifier using the `fmodified` function.
                                3. Updates the form's label to display the selected modifier's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on the last modifier.
                                - Updates the UI to reflect the selected modifier and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton58.Enabled = False
                                self.radioButton57.Enabled = False
                                self.radioButton49.Enabled = False
                                self.radioButton49.Enabled = False
                                self.radioButton50.Enabled = False
                                self.radioButton76.Enabled = False
                                self.radioButton77.Enabled = True
                                self.selected_option_label.Text += str_33(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fm import fmodified

                                try:
                                    # [UI:MODIFIER_SELECTION] Prompt user to select the last modifier
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected modifier's name
                                    self.selected_option_label.Text +=str(selected_last_changed_by)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()
                
                            # [UI:MODIFIED_BY] Handle "Modified" radio button selection
                            elif self.checked_radiobutton == self.radioButton66:
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select owners using the `fowner` function.
                                3. Updates the form's label to display the selected owner's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons and enable relevant ones
                                self.radioButton66.Enabled = False
                                self.radioButton77.Enabled = False
                                self.radioButton78.Enabled = True
                                self.selected_option_label.Text += str_33(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fm import fmodified

                                try:
                                    # [UI:MODIFIER_SELECTION] Prompt user to select the last modifier
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected modifier's name
                                    self.selected_option_label.Text +=str(selected_last_changed_by)+"****"

                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection                  
                            elif self.checked_radiobutton == self.radioButton70:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons
                                self.radioButton70.Enabled = False
                                self.radioButton3.Enabled = False
                                self.radioButton4.Enabled = False
                                self.radioButton9.Enabled = False
                                self.radioButton10.Enabled = False
                                self.selected_option_label.Text += str_53(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator

                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection
                            elif self.checked_radiobutton == self.radioButton71:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons
                                self.radioButton71.Enabled = False
                                self.radioButton12.Enabled = False
                                self.radioButton13.Enabled = False
                                self.radioButton15.Enabled = False
                                self.radioButton17.Enabled = False
                                self.radioButton18.Enabled = False
                                self.initial_button.Enabled = True
                                self.selected_option_label.Text += str_53(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator

                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection
                            elif self.checked_radiobutton == self.radioButton72:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons
                                self.radioButton72.Enabled = False
                                self.radioButton26.Enabled = False
                                self.radioButton21.Enabled = False
                                self.radioButton22.Enabled = False
                                self.radioButton23.Enabled = False
                                self.radioButton25.Enabled = False
                                self.selected_option_label.Text += str_53(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator

                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection
                            elif self.checked_radiobutton == self.radioButton73:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons
                                self.radioButton73.Enabled = False
                                self.radioButton30.Enabled = False
                                self.radioButton31.Enabled = False
                                self.radioButton33.Enabled = False
                                self.radioButton34.Enabled = False
                                self.selected_option_label.Text += str_53(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator
                                
                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection
                            elif self.checked_radiobutton == self.radioButton74:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                self.radioButton74.Enabled = False
                                self.radioButton39.Enabled = False
                                self.radioButton41.Enabled = False
                                self.radioButton42.Enabled = False
                                self.selected_option_label.Text += str_53(lan)

                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator

                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection                   
                            elif self.checked_radiobutton == self.radioButton75:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons
                                self.radioButton75.Enabled = False
                                self.radioButton48.Enabled = False
                                self.radioButton49.Enabled = False
                                self.radioButton50.Enabled = False
                                self.selected_option_label.Text += str_53(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator

                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection
                            elif self.checked_radiobutton == self.radioButton76:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons
                                self.radioButton76.Enabled = False
                                self.radioButton57.Enabled = False
                                self.radioButton58.Enabled = False
                                self.selected_option_label.Text += str_53(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator

                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection
                            elif self.checked_radiobutton == self.radioButton77:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons
                                self.radioButton77.Enabled = False
                                self.radioButton66.Enabled = False
                                self.selected_option_label.Text += str_53(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator

                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                            # [UI:CREATOR] Handle "Creator" radio button selection
                            elif self.checked_radiobutton == self.radioButton78:
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Disables conflicting radio buttons and enables relevant ones for filtering.
                                2. Prompts the user to select creators using the `fcreator` function.
                                3. Updates the form's label to display the selected creator's name.
                                4. Stores and updates the selected elements' data using the `storage` and `update` functions.
                                5. Implements exception handling to ensure the form closes gracefully in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:ENABLE_DISABLE_CONTROLS] Disable conflicting radio buttons
                                self.radioButton78.Enabled = False
                                self.selected_option_label.Text += str_53(lan)

                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.st_up import storage, update
                                from sajdmo.modules.filter.fcr import fcreator

                                try:
                                    # [UI:CREATOR_SELECTION] Prompt user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABEL] Update the form's label with the selected creator's name
                                    self.selected_option_label.Text +=str(selected_creator)+"****"
                                    
                                    # [UI:STORAGE] Store and update selected elements' data
                                    storage()
                                    update()

                                except StopIteration:
                                    self.Close()
                                    pass
                                except Exception:
                                    pass   
                                    self.Close()         
                                except SystemExit:
                                    pass
                                    self.Close()

                        except Exception:
                            pass
                        except SystemExit:
                            # [UI:ERROR_ALERT] Display error alert dialog
                            from pyrevit import forms
                            title = str_24(lan)
                            dialog = TaskDialog(title)
                            dialog.MainInstruction = str_57(lan)
                            dialog.MainContent = str_58(lan)
                            dialog.TitleAutoPrefix = False
                            dialog.AllowCancellation = True
                            dialog.CommonButtons = TaskDialogCommonButtons.Ok
                            result = dialog.Show()
                            if result == TaskDialogResult.Ok:
                                self.Close()
                            if result == TaskDialogResult.Cancel:
                                self.Close()
                            self.selected_option_label.Text = ""
                            self.radioButton1.Enabled = True
                            self.radioButton2.Enabled = True
                            self.button_clicked.Enable = False
                
                    # [UI:FINISH_BUTTON] Handle "Finish" button click event
                    def finish_button_clicked(self, sender, e):
                        """
                        This function handles the event when the "Finish" button is clicked.

                        Workflow:
                        1. Determines the script's root folder path using the `pathname` function.
                        2. Retrieves the paths for the storage and update folders using `storage_path` and `update_path`.
                        3. Identifies and deletes files in the storage and update folders that match the current Revit model's title.
                        4. Closes the form after cleanup.

                        Key Features:
                        - Cleans up temporary storage and update files associated with the current Revit model.
                        - Ensures proper file management by removing unnecessary data.
                        - Closes the form gracefully after completing the cleanup process.
                        """
                        # [SCRIPT:ROOT_FOLDER] Determine the script's root folder path
                        def pathname():
                            script_path = os.path.realpath(__file__)
                            folder_name = 'BIM-Pars.tab'     
                            folder_index = script_path.lower().find(folder_name.lower())
                            if folder_index != -1:
                                script_path_until_folder = script_path[:folder_index + len(folder_name)]
                                return script_path_until_folder
                            else:
                                raise ValueError('Folder name "{}" not found in the script path.'.format(folder_name))
                        
                        # [SCRIPT:STORAGE_PATH] Get the storage folder path
                        def storage_path():
                            script_path_until_folder = pathname()
                            storage_path = os.path.join(script_path_until_folder, 'data', 'storage')
                            return storage_path
                        
                        # [SCRIPT:UPDATE_PATH] Get the update folder path
                        def update_path():
                            script_path_until_folder = pathname()
                            update_path = os.path.join(script_path_until_folder, 'data', 'update')
                            return update_path

                        # [SCRIPT:FILE_CLEANUP] Identify and delete files matching the current Revit model's title
                        target_folder_1 = storage_path()
                        target_folder_2 = update_path()
                        file_names_1 = os.listdir(target_folder_1)
                        file_names_2 = os.listdir(target_folder_2)
                        model_name = revit.doc.Title
                        files_with_model_name_1 = [file_name for file_name in file_names_1 if model_name in file_name]
                        files_with_model_name_2 = [file_name for file_name in file_names_2 if model_name in file_name]
                        
                        # [SCRIPT:DELETE_FILES] Delete files in storage and update folders
                        if len(files_with_model_name_1) == 1:
                            selected_file_1 = files_with_model_name_1[0]
                            selected_file_path_1 = os.path.join(target_folder_1, selected_file_1)
                            os.remove(selected_file_path_1)
                        
                        if len(files_with_model_name_2) == 1:
                            selected_file_2 = files_with_model_name_2[0]
                            selected_file_path_2 = os.path.join(target_folder_2, selected_file_2)
                            os.remove(selected_file_path_2)

                        # [UI:CLOSE_FORM] Close the form after cleanup
                        self.Close()
                
                    # [UI:ZOOM_BUTTON] Handle "Zoom" button click event
                    def zoom_button_clicked(self, sender, e):
                        """
                        This function handles the event when the "Zoom" button is clicked.

                        Workflow:
                        1. Retrieves the currently selected elements in the Revit model.
                        2. If no elements are selected, displays an alert message and closes the form.
                        3. If elements are selected, zooms the view to focus on the selected elements.

                        Key Features:
                        - Provides a quick way to zoom in on selected elements in the Revit model.
                        - Ensures user feedback when no elements are selected.
                        - Enhances user experience by focusing the view on relevant elements.
                        """
                        # [UI:SELECTION_CHECK] Check if elements are selected
                        selection = revit.uidoc.Selection
                        selected_elements = selection.GetElementIds()
                        if len(selected_elements) == 0:
                            # [UI:ALERT] Display alert if no elements are selected
                            forms.alert(str_59(lan))
                            self.Close()
                        else:
                            # [UI:ZOOM] Zoom to selected elements
                            revit.uidoc.ShowElements(selected_elements)

                    # [UI:CLOSE_BUTTON] Handle "Close" button click event
                    def hierarchy_close_button_clicked(self, sender, e):
                        """
                        This function handles the event when the "Close" button is clicked.

                        Workflow:
                        1. Attempts to close the form gracefully.
                        2. Implements exception handling to ensure the form closes without errors, even if unexpected issues occur.

                        Key Features:
                        - Provides a clean way to close the form.
                        - Ensures the form closes without crashing, even in case of errors.
                        """
                        try:
                            # [UI:CLOSE_FORM] Close the form gracefully
                            self.Close()
                        except:
                            pass
                
                    # [UI:BACK_BUTTON] Handle "Back" button click event
                    def back_button_clicked(self, sender, e):
                        """
                        This function handles the event when the "Back" button is clicked.

                        Workflow:
                        1. Disables the initial button to prevent further actions.
                        2. Decrements the index to navigate to the previous group of elements.
                        3. Selects the elements in the previous group using the `selectlist` function.

                        Key Features:
                        - Allows users to navigate back to previously selected groups of elements.
                        - Updates the selection in the Revit model to reflect the previous group.
                        - Ensures smooth navigation through the selection history.
                        """
                        # [UI:DISABLE_INITIAL_BUTTON] Disable the initial button
                        self.initial_button.Enabled = False
                        if self.index > 0:
                            # [UI:NAVIGATE_BACK] Decrement index and select previous group of elements
                            self.index -= 1
                            element = self.groups[self.index]
                            from sajdmo.modules.filter.select import selectlist
                            element_ids = element  
                            selectlist(element_ids)
                
                    # [UI:NEXT_BUTTON] Handle "Next" button click event          
                    def next_button_clicked(self, sender, e):
                        """
                        This function handles the event when the "Next" button is clicked.

                        Workflow:
                        1. Enables the back button to allow navigation to previous groups.
                        2. Disables the initial button to prevent further actions.
                        3. Increments the index to navigate to the next group of elements.
                        4. Selects the elements in the next group using the `selectlist` function.

                        Key Features:
                        - Allows users to navigate forward to the next group of elements.
                        - Updates the selection in the Revit model to reflect the next group.
                        - Ensures smooth navigation through the selection history.
                        """
                        # [UI:ENABLE_BACK_BUTTON] Enable the back button
                        self.back_button.Enabled = True
                        self.initial_button.Enabled = False
                        if self.index < len(self.groups) - 1:
                            # [UI:NAVIGATE_NEXT] Increment index and select next group of elements
                            self.index += 1
                            element = self.groups[self.index]
                            from sajdmo.modules.filter.select import selectlist
                            element_ids = element  
                            selectlist(element_ids)
                
                    # [UI:INITIAL_BUTTON] Handle "Initial" button click event
                    def initial_button_clicked(self, sender, e):
                        """
                        This function handles the event when the "Initial" button is clicked.

                        Workflow:
                        1. Enables the "Next" button for navigation.
                        2. Determines the script's root folder path using the `pathname` function.
                        3. Retrieves the storage folder path using `storage_path`.
                        4. Identifies and reads the file associated with the current Revit model.
                        5. Parses the file contents to extract element groups and their IDs.
                        6. Initializes the group list and index for navigation.

                        Key Features:
                        - Loads and parses stored element groups for the current Revit model.
                        - Prepares the data for navigation through the groups.
                        - Ensures proper initialization of the group list and index.
                        """
                        # [UI:ENABLE_NEXT_BUTTON] Enable the next button
                        self.next_button.Enabled = True
                        
                        # [SCRIPT:ROOT_FOLDER] Determine the script's root folder path
                        def pathname():
                            script_path = os.path.realpath(__file__)
                            folder_name = 'BIM-Pars.tab'    
                            folder_index = script_path.lower().find(folder_name.lower())
                            if folder_index != -1:
                                script_path_until_folder = script_path[:folder_index + len(folder_name)]
                                return script_path_until_folder
                            else:
                                raise ValueError(str_65(lan).format(folder_name))
                       
                        # [SCRIPT:STORAGE_PATH] Get the storage folder path
                        def storage_path():
                            script_path_until_folder = pathname()
                            storage_path = os.path.join(script_path_until_folder, 'data', 'storage')
                            return storage_path

                        # [SCRIPT:FILE_SELECTION] Identify the file associated with the current Revit model
                        target_folder = storage_path()
                        file_names = os.listdir(target_folder)
                        model_name = revit.doc.Title
                        files_with_model_name = [file_name for file_name in file_names if model_name in file_name]
                        if len(files_with_model_name) == 1:
                            selected_file = files_with_model_name[0]
                            selected_file_path = os.path.join(target_folder, selected_file)
                        
                        # [SCRIPT:FILE_READ] Read and parse the file contents
                        output = script.get_output()
                        source_file = selected_file_path
                        if source_file is None:
                            forms.alert(str_19(lan))
                            sys.exit()
                        if source_file:
                            with open(source_file, 'r') as file:
                                file_contents = file.read()
                            lines = file_contents.split('\n')
                            groups = []
                            group_string = ""
                            for line in lines:
                                if line.startswith('%IDS#//'):
                                    if group_string:
                                        group_list = group_string.split("//")
                                        group = []
                                        for group_item in group_list:
                                            element_ids = [int(id_) for id_ in group_item.split('+') if id_.isdigit()]
                                            if element_ids:
                                                group.append(element_ids)
                                        if group:
                                            groups.append(group)
                                    group_string = line.replace('%IDS#//', '')
                                else:
                                    group_string += line
                            if group_string:
                                group_list = group_string.split("//")
                                group = []
                                for group_item in group_list:
                                    element_ids = [int(id_) for id_ in group_item.split('+') if id_.isdigit()]
                                    if element_ids:
                                        group.append(element_ids)
                                if group:
                                    groups.append(group)
                            groups = [inner_group for group in groups for inner_group in group]

                        # [UI:INITIALIZE_GROUPS] Initialize the group list and index
                        self.groups = groups
                        self.index = 0
                        self.end_of_group_reached = False

                # [UI:ACTIVE_DOCUMENT] Check for active document and show the form
                doc = DocumentManager.Instance.CurrentDBDocument
                if 'form' not in globals():
                    pass
                else:
                    form = HIERARCHY(doc)
                    form.ShowDialog()

                # [UI:SELECTED_ELEMENTS] Get selected elements
                selection = revit.get_selection()

                if selection:  
                    # [SCRIPT:INITIALIZE_LISTS] Initialize lists to store element data
                    ids = []
                    names = []
                    categories = []
                    
                    # [SCRIPT:COLLECT_DATA] Collect data from each selected element
                    for element in selection:
                        try:
                            # [SCRIPT:GET_ELEMENT_DATA] Get element data
                            ids.append(element.Id.ToString())
                            names.append(element.Name if hasattr(element, 'Name') else '')
                            categories.append(element.Category.Name if hasattr(element, 'Category') and element.Category else '')
                        except Exception as e:
                            MessageBox.Show(str(e),str_64(lan))
                            continue
                    
                    # [UI:CREATE_TABLE] Create the data table
                    headers = [str_62(lan), str_63(lan), str_5(lan)]
                    data = [
                        ids,
                        names,
                        categories
                    ]
                    editable = [False, False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                else:
                    # [UI:EMPTY_TABLE] If no elements are selected, create an empty table
                    headers = [str_62(lan), str_63(lan), str_5(lan)]
                    data = [[], [], []]
                    editable = [False, False, False]

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_64(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:DUDUL] Element Filtering
        #
        # Handles element filtering based on various criteria:
        # - View selection
        # - Level selection
        # - Category selection
        # - Family selection
        # - Type selection
        # - Parameter selection
        # - Value selection
        # - String in value
        # - Number in value
        # - Owner selection
        # - Modifier selection
        # - Creator selection
        ###############################################################################
        
        # [SCRIPT:ELEMENT_FILTERING]
        elif button_text == tool_str_5(lan):
            """
            This function handles the event when the "DUDUL" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the DUDUL operations.
            2. Initializes and displays a new form for filtering and managing Revit elements based on various criteria.
            3. Provides options to filter elements by views, levels, categories, families, types, parameters, values, ownership, modification, and creation.
            4. Implements exception handling to ensure the form closes gracefully in case of errors.

            Key Features:
            - Allows users to filter and manage Revit elements based on a wide range of criteria.
            - Updates the UI to reflect the selected elements and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the current form
                self.Hide()
                
                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                import System.Windows.Forms as WinForms
                from System.Windows.Forms import  Form, RadioButton, Label, Button, Cursors, PictureBox
                from System.Drawing import Point, Size, Font, FontStyle, ContentAlignment, Size, Color, Icon, GraphicsUnit, Bitmap
                import webbrowser
                import math
                from pyrevit import forms, script, revit
                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                import os
                import sys
                from RevitServices.Persistence import DocumentManager
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.single import single_input
                from sajdmo.forms.text import text_2input
                from sajdmo.scripts.select import idlist_inserted
                from sajdmo.modules.filter.cau import caunt
                from structure.root import mod_path, wurl_path, cdudul_back, bdudul_back, dudul_icon, filter_button, zoomextend_button, print_icon, lan_path, ok_icon, cancel_icon, filter_icon, filterparam_back, cuslogo_path, logo_path
                from UI.strings_dudul import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, 
                str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_33, str_34, str_35, str_36, str_37, str_38, str_39, str_40, str_41, str_42, 
                str_43, str_44, str_45, str_46, str_47, str_48, str_49, str_50, str_51, str_52, str_53, str_54, str_55, str_56, str_57, str_58, str_59, str_60, str_61, str_62, str_63, str_64, 
                str_65, str_66, str_67, str_68, str_69,str_h1, str_h2)
                from UI.url import parsweb
                from UI.skin import skin_mode

                # [UI:INITIALIZE_VARIABLES] Initialize language and URL settings
                lan = lan_path()
                wurl= wurl_path()
                skin =mod_path()
                coo = cdudul_back()
                bor = bdudul_back()

                # [SCRIPT:ACTIVE_DOCUMENT] Get the active Revit document
                uidoc = __revit__.ActiveUIDocument
                doc = __revit__.ActiveUIDocument.Document
                
                class DUDUL(Form):
                
                    def __init__(self, doc):
                        """
                        This function initializes the DUDUL form.

                        Workflow:
                        1. Sets the form's title, icon, size, and background color based on the skin mode.
                        2. Centers the form on the screen for better user experience.
                        3. Initializes radio buttons for filtering options, arranging them in a circular layout.
                        4. Adds a picture box to the form, positioning and sizing it based on the skin mode, and sets its image.

                        Key Features:
                        - Provides a visually consistent and customizable interface for filtering and managing Revit elements.
                        - Ensures the form is responsive and user-friendly by dynamically adjusting layout and appearance.
                        - Prepares the form for user interaction by initializing essential UI components.
                        """
                        # [UI:FORM_SETUP] Set form properties
                        self.Text = str_1(lan)
                        self.doc = doc
                        self.Icon = Icon(dudul_icon())
                        self.Size = Size(750, 850)
                        self.BackColor = skin_mode(skin, self.BackColor , Color.White)
                        self.CenterToScreen()
                        self.radioButtonCount = 12
                        self.radioButtonSize = 0  
                        self.radius = 250  
                        self.radioButtons = []
                        self.InitializeRadioButtons()

                        # [UI:PICTUREBOX_SETUP] Add picture box to the form
                        self.pictureBox = PictureBox()
                        self.pictureBox.Location = skin_mode(skin, Point(180, 280), Point(130, 190))
                        self.pictureBox.Size = skin_mode(skin, Size(420, 305) , Size(500, 500))
                        #self.Controls.Add(self.pictureBox)
                        icon_path = skin_mode(skin, coo, bor)
                        image = Bitmap(icon_path)
                        self.pictureBox.Image = image

                    # [UI:FORM_CLOSE_HANDLER] Handle form close event
                    def OnClosed(self, e):
                        """
                        This function handles the event when the form is closed.

                        Workflow:
                        1. Disposes of the form and its resources to free up memory.

                        Key Features:
                        - Ensures proper cleanup of the form and its components.
                        - Prevents memory leaks by releasing resources when the form is no longer needed.
                        """
                        self.Dispose()

                    # [UI:INITIALIZE_RADIO_BUTTONS] Initialize and arrange radio buttons in a circular layout
                    def InitializeRadioButtons(self):
                        """
                        This function initializes and arranges radio buttons in a circular layout on the form.

                        Workflow:
                        1. Calculates the center position for the radio buttons.
                        2. Determines the maximum text width and height for proper sizing.
                        3. Creates and positions radio buttons in a circular pattern around the center.
                        4. Sets properties for each radio button, including text, font, color, and alignment.
                        5. Adds labels for additional information and options to the form.

                        Key Features:
                        - Arranges radio buttons in a visually appealing circular layout.
                        - Dynamically adjusts button size and position based on text content.
                        - Provides a user-friendly interface for selecting filtering options.
                        """
                        # [UI:CALCULATE_CENTER] Calculate the center position for radio buttons
                        centerX = self.Width // 2 - 40
                        centerY = self.Height // 2

                        # [UI:CALCULATE_CENTER] Calculate the center position for radio buttons
                        tempRadioButton = RadioButton()
                        tempRadioButton.Font = Font("Arial", 10, FontStyle.Bold)
                        
                        # [UI:CALCULATE_MAX_TEXT_SIZE] Determine the maximum text width and height
                        maxTextWidth = 0
                        maxTextHeight = 0
                        textColors = [Color.Blue, Color.Magenta, Color.Green, Color.Green, Color.Green, Color.Black,
                                    Color.Black, Color.Black, Color.Black, Color.Orange, Color.Orange, Color.Orange]
                        for i in range(self.radioButtonCount):
                            text = str(i + 1)
                            textSize = tempRadioButton.CreateGraphics().MeasureString(text, tempRadioButton.Font)
                            maxTextWidth = max(maxTextWidth, int(textSize.Width))
                            maxTextHeight = max(maxTextHeight, int(textSize.Height))
                        
                        # [UI:SET_RADIO_BUTTON_SIZE] Set the size of radio buttons based on text size
                        self.radioButtonSize = max(maxTextWidth, maxTextHeight) + 10

                        # [UI:RADIO_BUTTON_NAMES] Define names for radio buttons
                        names = [str_2(lan), str_4(lan), str_5(lan), str_6(lan), str_7(lan), str_8(lan), str_9(lan), str_14(lan), str_15(lan), str_10(lan), str_11(lan),
                                str_12(lan)]

                        # [UI:CREATE_RADIO_BUTTONS] Create and position radio buttons in a circular layout
                        for i in range(self.radioButtonCount):
                            angle = 2 * math.pi * i / self.radioButtonCount
                            x = int(centerX + self.radius * math.cos(angle))
                            y = int(centerY + self.radius * math.sin(angle))

                            radioButton = RadioButton()
                            radioButton.AutoSize = False
                            radioButton.Location = Point(x - self.radioButtonSize // 2, y - self.radioButtonSize // 2)
                            radioButton.Size = Size(self.calculate_radio_button_width(names[i]), self.radioButtonSize)
                            radioButton.Text = names[i]  
                            radioButton.Name = str(i + 1) 
                            radioButton.TextAlign = ContentAlignment.MiddleCenter
                            radioButton.Font = Font("Arial", 10, FontStyle.Bold)
                            radioButton.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                            self.Controls.Add(radioButton)
                            
                            radioButton.ForeColor = textColors[i]  
                            self.radioButtons.append(radioButton)

                            # [UI:ADD_CENTER_LABEL] Add a label at the center of the circular layout
                            self.label = Label()
                            self.label.AutoSize = True
                            self.label.Text = ""
                            self.label.Font = Font("Arial", 20, FontStyle.Bold)
                            self.label.TextAlign = ContentAlignment.MiddleCenter
                            self.label.Location = Point(centerX - self.label.Width // 2, centerY - self.label.Height // 2)
                            self.label.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                            self.Controls.Add(self.label)

                            # [UI:ADD_ROOT_LABEL] Add a root label to the form
                            self.rootlabel = Label()
                            self.rootlabel.Text = str_13(lan)
                            self.rootlabel.AutoSize = True
                            self.rootlabel.Left = 10
                            self.rootlabel.Top = 10
                            self.rootlabel.ForeColor = Color.Blue
                            self.rootlabel.Font = Font(self.label.Font, FontStyle.Bold)
                            self.rootlabel.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                            self.Controls.Add(self.rootlabel)

                            # [UI:ADD_OPTIONS_LABEL] Add an options label to the form
                            self.optionslabel = Label()
                            self.optionslabel.Text = ""
                            self.optionslabel.AutoSize = True
                            self.optionslabel.Left = self.optionslabel.Left + self.optionslabel.Width + 10
                            self.optionslabel.Top = 25
                            self.optionslabel.ForeColor = Color.Blue
                            self.optionslabel.MaximumSize = Size(575,120)
                            self.optionslabel.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                            self.Controls.Add(self.optionslabel)

                            # [UI:ADD_LEN_OPTIONS_LABEL] Add a length options label to the form
                            self.lenoptionslabel = Label()
                            self.lenoptionslabel.Text = ""
                            self.lenoptionslabel.AutoSize = True
                            self.lenoptionslabel.Left = self.optionslabel.Left + (self.lenoptionslabel.Width) // 2
                            self.lenoptionslabel.Top = 45
                            self.lenoptionslabel.ForeColor = Color.Blue
                            self.lenoptionslabel.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                        # [UI:ADD_BUTTONS] Add buttons to the form
                        buttonWidth = 40  
                        buttonHeight = 40  
                        buttonSpacing = 10 
                        totalButtonWidth = 4 * buttonWidth + 3 * buttonSpacing
                        startX = (self.Width - totalButtonWidth) // 2
                        buttonY = self.Height - buttonHeight - 65

                        # [UI:ADD_FILTER_BUTTON] Add the filter button to the form
                        button1 = Button()
                        button1.Location = Point(startX, buttonY)
                        button1.Size = Size(buttonWidth, buttonHeight)
                        icon7_path = filter_button()
                        button1.Image = Icon(icon7_path).ToBitmap()
                        button1.Click += self.filter_button_clicked  
                        button1.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                        self.Controls.Add(button1)

                        # [UI:ADD_ZOOM_BUTTON] Add the zoom button to the form
                        button2 = Button()
                        button2.Location = Point(startX + buttonWidth + buttonSpacing, buttonY)
                        button2.Click += self.zoom_button_clicked 
                        button2.Size = Size(buttonWidth, buttonHeight)
                        icon3_path = zoomextend_button()
                        button2.Image = Icon(icon3_path).ToBitmap()
                        button2.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                        self.Controls.Add(button2)

                        # [UI:ADD_CLOSE_BUTTON] Add the close button to the form
                        self.button3 = Button()
                        self.button3.Location = Point(startX + 2 * (buttonWidth + buttonSpacing), buttonY)
                        self.button3.Click += self.dudul_close_button_clicked 
                        self.button3.Size = Size(buttonWidth, buttonHeight)
                        icon2_path = cancel_icon()
                        self.button3.Image = Icon(icon2_path).ToBitmap()
                        self.button3.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                        self.Controls.Add(self.button3)

                        # [UI:ADD_FINISH_BUTTON] Add the finish button to the form
                        button4 = Button()
                        button4.Location = Point(startX + 3 * (buttonWidth + buttonSpacing), buttonY)
                        button4.Click += self.finish_button_clicked  
                        button4.Size = Size(buttonWidth, buttonHeight)
                        icon1_path = ok_icon()
                        button4.Image = Icon(icon1_path).ToBitmap()
                        button4.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                        self.Controls.Add(button4)

                        # [UI:ADD_CREATED_BY_LABEL] Add "Created by" label to the form
                        self.created_by_label = Label()
                        self.created_by_label.AutoSize = True
                        self.created_by_label.Text = "BIM Pars"
                        self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                        self.created_by_label.ForeColor = Color.Blue
                        self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                        self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                        self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                        self.created_by_label.Cursor = Cursors.Hand  
                        self.created_by_label.Click += self.Label_Click
                        self.Controls.Add(self.created_by_label)

                        # [SCRIPT:INITIALIZE_LISTS] Initialize lists for length and names
                        self.len = []
                        self.nam = []

                    # [UI:LABEL_CLICK_HANDLER] Handle label click event
                    def Label_Click(self, sender, event):
                        """
                        This function handles the event when a label is clicked.

                        Workflow:
                        1. Retrieves the URL using the `parsweb` function.
                        2. Opens the URL in the default web browser.

                        Key Features:
                        - Provides a clickable label that redirects the user to a specified web page.
                        - Enhances user experience by offering quick access to external resources.
                        """
                        url = parsweb(wurl)
                        webbrowser.open(url)

                    # [UI:RADIO_BUTTON_CHECKED_CHANGED] Handle radio button checked state change
                    def radioButton_checked_changed(self, sender, e):
                        """
                        This function handles the event when a radio button's checked state changes.

                        Workflow:
                        1. Identifies the radio button that triggered the event.
                        2. Ensures only one radio button is checked at a time by unchecking the previously selected button.
                        3. Updates the reference to the currently checked radio button.

                        Key Features:
                        - Maintains single-selection behavior for radio buttons.
                        - Ensures proper state management for user selections.
                        """
                        # [UI:IDENTIFY_RADIO_BUTTON] Identify the radio button that triggered the event
                        radiobutton = sender
                        if radiobutton.Checked:
                            # [UI:UNCHECK_PREVIOUS_RADIO_BUTTON] Uncheck the previously selected radio button
                            if self.checked_radiobutton is not None and self.checked_radiobutton != radiobutton:
                                self.checked_radiobutton.Checked = False
                            # [UI:UPDATE_CHECKED_RADIO_BUTTON] Update the reference to the currently checked radio button
                            self.checked_radiobutton = radiobutton
                        
                    # [UI:CALCULATE_RADIO_BUTTON_WIDTH] Calculate the width required for a radio button based on its text content
                    def calculate_radio_button_width(self, name):
                        """
                        This function calculates the width required for a radio button based on its text content.

                        Workflow:
                        1. Creates a temporary radio button with the specified text and font.
                        2. Measures the preferred width of the radio button to accommodate the text.

                        Key Features:
                        - Dynamically adjusts the width of radio buttons to fit their text content.
                        - Ensures proper layout and alignment of UI elements.
                        """
                        # [UI:CREATE_TEMP_RADIO_BUTTON] Create a temporary radio button for measurement
                        tempRadioButton = RadioButton()
                        tempRadioButton.AutoSize = True
                        tempRadioButton.Text = name
                        tempRadioButton.Font = Font("Arial", 10, FontStyle.Bold)
                        # [UI:RETURN_PREFERRED_WIDTH] Return the preferred width of the radio button
                        return tempRadioButton.PreferredSize.Width
                    
                    # [UI:CLOSE_BUTTON_HANDLER] Handle "Close" button click event
                    def dudul_close_button_clicked(self, sender, event):
                        """
                        This function handles the event when the "Close" button is clicked.

                        Workflow:
                        1. Attempts to close the form gracefully.
                        2. Implements exception handling to ensure the form closes without errors, even if unexpected issues occur.

                        Key Features:
                        - Provides a clean way to close the form.
                        - Ensures the form closes without crashing, even in case of errors.
                        """
                        try:
                            self.Close()
                        except:
                            pass

                    # [UI:FINISH_BUTTON_HANDLER] Handle "Finish" button click event
                    def finish_button_clicked(self, sender, event):
                        """
                        This function handles the event when the "Finish" button is clicked.

                        Workflow:
                        1. Closes the form.

                        Key Features:
                        - Provides a straightforward way to close the form and complete the operation.
                        """
                        self.Close()

                    # [UI:ZOOM_BUTTON_HANDLER] Handle "Zoom" button click event
                    def zoom_button_clicked(self, sender, event):
                        """
                        This function handles the event when the "Zoom" button is clicked.

                        Workflow:
                        1. Retrieves the currently selected elements in the Revit model.
                        2. If no elements are selected, displays an alert message and closes the form.
                        3. If elements are selected, zooms the view to focus on the selected elements.

                        Key Features:
                        - Provides a quick way to zoom in on selected elements in the Revit model.
                        - Ensures user feedback when no elements are selected.
                        - Enhances user experience by focusing the view on relevant elements.
                        """
                        # [SCRIPT:IMPORTS] Import necessary modules
                        from pyrevit import revit

                        # [SCRIPT:GET_SELECTED_ELEMENTS] Retrieve the currently selected elements in the Revit model
                        selection = revit.uidoc.Selection
                        selected_elements = selection.GetElementIds()

                        # [UI:CHECK_SELECTED_ELEMENTS] Check if any elements are selected
                        if len(selected_elements) == 0:
                            forms.alert(str_59(lan))
                            self.Close()
                        else:
                            # [UI:ZOOM_TO_ELEMENTS] Zoom the view to focus on the selected elements
                            revit.uidoc.ShowElements(selected_elements)

                    # [UI:FILTER_BUTTON_HANDLER] Handle "Filter" button click event
                    def filter_button_clicked(self, sender, event):
                        try:
                            # [UI:HIDE_FORM] Hide the current form
                            self.Hide()

                            # [UI:GET_SELECTED_RADIO_BUTTON] Get the currently selected radio button
                            selected_radio_button = next(radio_button for radio_button in self.radioButtons if radio_button.Checked)
                            
                            # [UI:VIEW_FILTER] Handle "View" radio button selection
                            if selected_radio_button.Text == str_2(lan): 
                                """
                                This function handles the event when the "View" radio button is selected.

                                Workflow:
                                1. Prompts the user to select views using the `ae` function.
                                2. Updates the form's label to display the selected views' names.
                                3. Disables the radio button after selection to prevent re-selection.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected views.
                                - Updates the UI to reflect the selected views and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:    
                                    # [SCRIPT:IMPORTS] Import necessary modules  
                                    from sajdmo.modules.filter.av import ae
                                    from sajdmo.modules.filter.cau import caunt
                                    
                                    # [UI:VIEW_SELECTION] Prompt the user to select views
                                    title=str_18(lan)
                                    cancel_alert=str_19(lan)
                                    button_name=str_20(lan)
                                    selected_views=ae(title, button_name, cancel_alert )

                                    # [UI:UPDATE_OPTIONS_LABEL] Update the form's label with selected views
                                    self.optionslabel.Text += str_17(lan)+"(  "
                                    for view in selected_views:
                                        self.label.Text = ""
                                        self.label.Text += (str_16(lan) + caunt())
                                        self.optionslabel.Text +=str(view.Name)+"****"
                                    
                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    a=str(str_2(lan))
                                    self.optionslabel.Text +="  ){"+caunt()+"}|"
                                    selected_radio_button.Enabled = False 

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists 
                                    self.len.append(int(caunt()))
                                    self.nam.append(a)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass          
                                except SystemExit:
                                    pass  

                            # [UI:LEVEL_FILTER] Handle "Level" radio button selection
                            elif selected_radio_button.Text == str_4(lan):
                                """
                                This function handles the event when the "Level" radio button is selected.

                                Workflow:
                                1. Prompts the user to select levels using the `flevel` function.
                                2. Updates the form's label to display the selected levels' names.
                                3. Disables the radio button after selection to prevent re-selection.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected levels.
                                - Updates the UI to reflect the selected levels and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()

                                    # [SCRIPT:IMPORTS] Import necessary modules
                                    from sajdmo.modules.filter.fl import flevel
                                    
                                    # [UI:LEVEL_SELECTION] Prompt the user to select levels
                                    title=str_22(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    selected_levels=flevel(title,button_name,cancel_alert)

                                    # [UI:UPDATE_OPTIONS_LABEL] Update the form's label with selected levels
                                    self.optionslabel.Text += str_21(lan)+"(  "
                                    for level in selected_levels:
                                        self.label.Text = ""
                                        self.label.Text += (str_16(lan) + caunt())
                                        selected_names= (level.Name)  
                                        self.optionslabel.Text +=str(selected_names)+"****"

                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    b=str(str_4(lan))
                                    self.optionslabel.Text +="  ){"+caunt()+"}|"   
                                    selected_radio_button.Enabled = False  

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    self.nam.append(b)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass    
                                except SystemExit:
                                    pass  

                            # [UI:CATEGORY_FILTER] Handle "Category" radio button selection
                            elif selected_radio_button.Text == str_5(lan):
                                """
                                This function handles the event when the "Category" radio button is selected.

                                Workflow:
                                1. Prompts the user to select categories using the `fcat` function.
                                2. Updates the form's label to display the selected categories' names.
                                3. Disables the radio button after selection to prevent re-selection.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected categories.
                                - Updates the UI to reflect the selected categories and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.fc import fcat
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()

                                    # -*- coding: utf-8 -*-
                                    # [UI:CATEGORY_SELECTION] Prompt the user to select categories
                                    title=str_25(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    element_alert_title=str_24(lan)
                                    element_alert=str_26(lan)
                                    c=[]
                                    selected_category= fcat(title,button_name,cancel_alert,element_alert_title,element_alert)
                                    
                                    # [UI:UPDATE_LABELS] Update the form's labels with selected categories
                                    self.label.Text = ""
                                    self.label.Text += (str_16(lan) + caunt())
                                    self.optionslabel.Text += str_23(lan)+"(  "
                                    selected_category_string = "****".join(selected_category)
                                    self.optionslabel.Text += str(selected_category_string)+"****"
                                    self.optionslabel.Text += "  ){"+caunt()+"}|"
                                    
                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    selected_radio_button.Enabled = False  
                                    c=str(str_5(lan))

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(c)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass    
                                except SystemExit:
                                    pass

                            # [UI:FAMILY_FILTER] Handle "Family" radio button selection
                            elif selected_radio_button.Text == str_6(lan):
                                """
                                This function handles the event when the "Family" radio button is selected.

                                Workflow:
                                1. Prompts the user to select families using the `ffamily` function.
                                2. Updates the form's label to display the selected families' names.
                                3. Disables the radio button after selection to prevent re-selection.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected families.
                                - Updates the UI to reflect the selected families and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.ff import ffamily
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:FAMILY_SELECTION] Prompt the user to select families
                                    title=str_39(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelementtitle_alert=str_24(lan)
                                    noelement_alert=str_40(lan)
                                    selected_family=ffamily(title,button_name,cancel_alert,noelement_alert,noelementtitle_alert)
                                    
                                    # [UI:UPDATE_OPTIONS_LABEL] Update the form's label with selected families
                                    self.optionslabel.Text += str_38(lan)+"(  "
                                    for family in selected_family:
                                        self.label.Text = ""
                                        self.label.Text += (str_16(lan) + caunt())
                                        self.optionslabel.Text +=str(family)+"****"
                                    self.optionslabel.Text += "  ){"+caunt()+"}|"

                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    selected_radio_button.Enabled = False
                                    d=str(str_6(lan))

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(d)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass        
                                except SystemExit:
                                    pass  

                            # [UI:TYPE_FILTER] Handle "Type" radio button selection
                            elif selected_radio_button.Text == str_7(lan):
                                """
                                This function handles the event when the "Type" radio button is selected.

                                Workflow:
                                1. Prompts the user to select types using the `ftype` function.
                                2. Updates the form's label to display the selected types' names.
                                3. Disables the radio button after selection to prevent re-selection.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected types.
                                - Updates the UI to reflect the selected types and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.ft import ftype
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:TYPE_SELECTION] Prompt the user to select types
                                    title = str_52(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelementtitle_alert=str_24(lan)
                                    noelement_alert=str_51(lan)
                                    selected_type=ftype(title,button_name,cancel_alert,noelementtitle_alert,noelement_alert)
                                    
                                    # [UI:UPDATE_OPTIONS_LABEL] Update the form's label with selected types
                                    self.optionslabel.Text += str_50(lan)+"(  "
                                    for type in selected_type:
                                        self.label.Text = ""
                                        self.label.Text += (str_16(lan) + caunt())
                                        self.optionslabel.Text +=str(type)+"****"
                                    self.optionslabel.Text +="  ){"+caunt()+"}|"
                                    
                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    selected_radio_button.Enabled = False 
                                    e=str(str_7(lan))

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(e)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass        
                                except SystemExit:
                                    pass

                            # [UI:PARAMETER_FILTER] Handle "Parameter" radio button selection
                            elif selected_radio_button.Text == str_8(lan):
                                """
                                This function handles the event when the "Parameter" radio button is selected.

                                Workflow:
                                1. Prompts the user to input a parameter using the `single_input` form.
                                2. Filters elements based on the selected parameter using the `fparam` function.
                                3. Updates the form's label to display the selected parameter.
                                4. Disables the radio button after selection to prevent re-selection.
                                5. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter.
                                - Updates the UI to reflect the selected parameter and its count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.fp import fparam
                                from sajdmo.forms.single import single_input
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:PARAMETER_FORM_SETUP] Set up the parameter input form
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    window_name = str_8(lan)
                                    url = parsweb(wurl)

                                    # [UI:GET_USER_INPUT] Prompt the user to input a parameter
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None:
                                        sys.exit()
                                    selected_parameter= user_input
                                    
                                    # [SCRIPT:FILTER_BY_PARAMETER] Filter elements based on the selected parameter
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_43(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    selected_parameter=fparam(selected_parameter,cancel_alert,noelement_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABELS] Update the form's labels with the selected parameter
                                    self.label.Text = ""
                                    self.label.Text += (str_16(lan) + caunt())
                                    self.optionslabel.Text += str_41(lan)+"(  "
                                    self.optionslabel.Text +=str(selected_parameter)+"****"
                                    self.optionslabel.Text +="  ){"+caunt()+"}|"
                                    
                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    f=str(str_8(lan))

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(f)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass         
                                except SystemExit:
                                    pass

                            # [UI:PARAMETER_VALUE_FILTER] Handle "Value" radio button selection
                            elif selected_radio_button.Text == str_9(lan):
                                """
                                This function handles the event when the "Value" radio button is selected.

                                Workflow:
                                1. Prompts the user to input a parameter and value using the `double_input` form.
                                2. Filters elements based on the selected parameter and value using the `fvalue` function.
                                3. Updates the form's label to display the selected parameter and value.
                                4. Disables the radio button after selection to prevent re-selection.
                                5. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined parameter and value.
                                - Updates the UI to reflect the selected parameter, value, and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.fv import fvalue
                                from sajdmo.forms.double import double_input
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:VALUE_FORM_SETUP] Set up the value input form
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path =ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_42(lan)
                                    value_label = str_46(lan)
                                    window_name = str_9(lan)
                                    url=parsweb(wurl)
                                    
                                    # [UI:GET_USER_INPUT] Prompt the user to input a parameter and value
                                    user_input1, user_input2 = double_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, url)
                                    selected_parameter=user_input1
                                    selected_value=user_input2

                                    # [SCRIPT:FILTER_BY_VALUE] Filter elements based on the selected parameter and value
                                    emptyselection_alert=str_28(lan)
                                    noelement_alert=str_35(lan)
                                    noelementwithvalue_alert=str_45(lan)
                                    novalueinsert_alert=str_47(lan)
                                    noparameterinsert_alert=str_44(lan)
                                    fvalue(selected_parameter,selected_value,emptyselection_alert,noelement_alert,noelementwithvalue_alert,novalueinsert_alert,noparameterinsert_alert)
                                    
                                    # [UI:UPDATE_LABELS] Update the form's labels with the selected parameter and value
                                    self.label.Text = ""
                                    self.label.Text += (str_16(lan) + caunt())
                                    self.optionslabel.Text += str_61(lan)+"(  "
                                    self.optionslabel.Text +=str(user_input1)+"****" 
                                    self.optionslabel.Text +=str(user_input2)+"****"
                                    self.optionslabel.Text +="  ){"+caunt()+"}|"
                                    
                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    g=str(str_9(lan))

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(g)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass     
                                except SystemExit:
                                    pass

                            # [UI:STRING_VALUE_FILTER] Handle "String Value" radio button selection
                            elif selected_radio_button.Text == str_14(lan):
                                """
                                This function handles the event when the "String Value" radio button is selected.

                                Workflow:
                                1. Prompts the user to input a string value using the `single_input` form.
                                2. Filters elements based on the selected string value using the `fvalue_string` function.
                                3. Updates the form's label to display the selected string value.
                                4. Disables the radio button after selection to prevent re-selection.
                                5. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined string value.
                                - Updates the UI to reflect the selected string value and its count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.forms.single import single_input
                                from sajdmo.modules.filter.fv_string import fvalue_string
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:STRING_VALUE_FORM_SETUP] Set up the string value input form
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_46(lan)
                                    window_name = str_14(lan)
                                    url = parsweb(wurl)
                                    
                                    # [UI:GET_USER_INPUT] Prompt the user to input a string value
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None:
                                        sys.exit()
                                    selected_value = user_input
                                    
                                    # [SCRIPT:FILTER_BY_STRING_VALUE] Filter elements based on the selected string value
                                    cancel_alert = str_19(lan)
                                    noelementfound_alert = str_35(lan)
                                    novalueinsert_alert= str_47(lan)
                                    desired_value=fvalue_string(selected_value,cancel_alert,noelementfound_alert,novalueinsert_alert)
                                    
                                    # [UI:UPDATE_LABELS] Update the form's labels with the selected string value
                                    self.label.Text = ""
                                    self.label.Text += (str_16(lan) + caunt())
                                    self.optionslabel.Text += str_62(lan)+"(  "
                                    self.optionslabel.Text +=str(user_input)+"****"
                                    self.optionslabel.Text +="  ){"+caunt()+"}|"

                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    h=str(str_14(lan))

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(h)
                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass         
                                except SystemExit:
                                    pass

                            # [UI:INTEGER_VALUE_FILTER] Handle "Integer Value" radio button selection
                            elif selected_radio_button.Text == str_15(lan):
                                """
                                This function handles the event when the "Integer Value" radio button is selected.

                                Workflow:
                                1. Prompts the user to input an integer value using the `single_input` form.
                                2. Filters elements based on the selected integer value using the `fvalue_integer` function.
                                3. Updates the form's label to display the selected integer value.
                                4. Disables the radio button after selection to prevent re-selection.
                                5. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on a user-defined integer value.
                                - Updates the UI to reflect the selected integer value and its count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.forms.single import single_input
                                from sajdmo.modules.filter.fv_integer import fvalue_integer
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:INTEGER_VALUE_FORM_SETUP] Set up the integer value input form
                                    icon_path = filter_icon()
                                    search_image_path = filterparam_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_46(lan)
                                    window_name = str_15(lan)
                                    url = parsweb(wurl)

                                    # [UI:GET_USER_INPUT] Prompt the user to input an integer value
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None:
                                        sys.exit()
                                    selected_value = user_input

                                    # [SCRIPT:FILTER_BY_INTEGER_VALUE] Filter elements based on the selected integer value
                                    cancel_alert = str_19(lan)
                                    noelementfound_alert = str_35(lan)
                                    novalueinsert_alert= str_47(lan)
                                    desired_value=fvalue_integer(selected_value,cancel_alert,noelementfound_alert,novalueinsert_alert)
                                    
                                    # [UI:UPDATE_LABELS] Update the form's labels with the selected integer value
                                    self.label.Text = ""
                                    self.label.Text += (str_16(lan) + caunt())
                                    self.optionslabel.Text += str_63(lan)+"(  "
                                    self.optionslabel.Text +=str_64(lan)+str(user_input)+"****"
                                    self.optionslabel.Text +="  ){"+caunt()+"}|"

                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    i=str(str_15(lan))

                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(i)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass          
                                except SystemExit:
                                    pass
                            
                            # [UI:OWNERSHIP_FILTER] Handle "Ownership" radio button selection
                            elif selected_radio_button.Text == str_10(lan):
                                """
                                This function handles the event when the "Ownership" radio button is selected.

                                Workflow:
                                1. Prompts the user to select owners using the `fowner` function.
                                2. Updates the form's label to display the selected owner's name.
                                3. Disables the radio button after selection to prevent re-selection.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected ownership.
                                - Updates the UI to reflect the selected owner and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.fo import fowner
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:OWNER_SELECTION] Prompt the user to select owners
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_29(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_30(lan)
                                    noownerselect_alert=str_31(lan)
                                    nonamefound=str_32(lan)
                                    selected_owner=fowner(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABELS] Update the form's labels with the selected owner
                                    self.label.Text = ""
                                    self.label.Text += (str_16(lan) + caunt())
                                    self.optionslabel.Text += str_27(lan)+"(  "
                                    self.optionslabel.Text +=str(selected_owner)+"****"
                                    self.optionslabel.Text += "  ){"+caunt()+"}|"
                                    
                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    selected_radio_button.Enabled = False 
                                    j=str(str_10(lan))
                                    
                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(j)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass           
                                except SystemExit:
                                    pass
                                    
                            # [UI:MODIFIED_BY_FILTER] Handle "Modified By" radio button selection
                            elif selected_radio_button.Text == str_11(lan):
                                """
                                This function handles the event when the "Modified By" radio button is selected.

                                Workflow:
                                1. Prompts the user to select the last modifier using the `fmodified` function.
                                2. Updates the form's label to display the selected modifier's name.
                                3. Disables the radio button after selection to prevent re-selection.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on the last modifier.
                                - Updates the UI to reflect the selected modifier and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.fm import fmodified
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:MODIFIER_SELECTION] Prompt the user to select the last modifier
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_34(lan)
                                    button_name=str_20(lan)
                                    cancel_alert=str_19(lan)
                                    noelement_alert=str_35(lan)
                                    noownerselect_alert=str_36(lan)
                                    nonamefound=str_37(lan)
                                    selected_last_changed_by=fmodified(emptyselectiontitle_alert,emptyselection_alert,title,button_name,cancel_alert,noelement_alert,noownerselect_alert,nonamefound)
                                    
                                    # [UI:UPDATE_LABELS] Update the form's labels with the selected modifier
                                    self.label.Text = ""
                                    self.label.Text += (str_16(lan) + caunt())
                                    self.optionslabel.Text += str_33(lan)+"(  "
                                    self.optionslabel.Text +=str(selected_last_changed_by)+"****"
                                    self.optionslabel.Text += "  ){"+caunt()+"}|"
                                    
                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    selected_radio_button.Enabled = False  
                                    k=str(str_11(lan))
                                    
                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(k)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass          
                                except SystemExit:
                                    pass
                            
                            # [UI:CREATOR_FILTER] Handle "Creator" radio button selection
                            elif selected_radio_button.Text == str_12(lan):
                                """
                                This function handles the event when the "Creator" radio button is selected.

                                Workflow:
                                1. Prompts the user to select creators using the `fcreator` function.
                                2. Updates the form's label to display the selected creator's name.
                                3. Disables the radio button after selection to prevent re-selection.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows filtering elements based on selected creators.
                                - Updates the UI to reflect the selected creator and their count.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [SCRIPT:IMPORTS] Import necessary modules
                                from sajdmo.modules.filter.fcr import fcreator
                                try:
                                    # [UI:HIDE_FORM] Hide the current form
                                    self.Hide()
                                    
                                    # [UI:CREATOR_SELECTION] Prompt the user to select creators
                                    emptyselectiontitle_alert=str_24(lan)
                                    emptyselection_alert=str_28(lan)
                                    title=str_54(lan)
                                    button_name=str_20(lan)
                                    noelement_alert=str_55(lan)
                                    nocreatorselected_alert=str_56(lan)
                                    nonamefound_alert=str_37(lan)
                                    selected_creator=fcreator(emptyselectiontitle_alert,emptyselection_alert,title,button_name,noelement_alert,nocreatorselected_alert,nonamefound_alert)
                                    
                                    # [UI:UPDATE_LABELS] Update the form's labels with the selected creator
                                    self.label.Text = ""
                                    self.label.Text += (str_16(lan) + caunt())
                                    self.optionslabel.Text += str_53(lan)+"(  "
                                    self.optionslabel.Text +=str(selected_creator)+"****"
                                    self.optionslabel.Text +="  ){"+caunt()+"}|"
                                    
                                    # [UI:DISABLE_RADIO_BUTTON] Disable the selected radio button
                                    selected_radio_button.Enabled = False 
                                    l=str(str_12(lan))
                                    
                                    # [SCRIPT:UPDATE_LISTS] Update length and name lists
                                    self.len.append(int(caunt()))
                                    # -*- coding: utf-8 -*-
                                    self.nam.append(l)

                                    # [UI:SHOW_FORM] Show the form again
                                    self.Show()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass           
                                except SystemExit:
                                    pass
                        
                        except StopIteration:
                            pass
                        except Exception:
                            pass            
                        except SystemExit:
                            pass

                # [UI:ACTIVE_DOCUMENT] Handle active document operations
                doc = DocumentManager.Instance.CurrentDBDocument
                if 'form' not in globals():
                    pass
                else:
                    form = DUDUL(doc)
                    form.ShowDialog()

                # [SCRIPT:GET_SELECTED_ELEMENTS] Retrieve selected elements
                selection = revit.get_selection()

                if selection:  
                    # [SCRIPT:INITIALIZE_LISTS] Initialize lists to store element data
                    ids = []
                    names = []
                    categories = []
                    
                    # [SCRIPT:COLLECT_ELEMENT_DATA] Collect data from each selected element
                    for element in selection:
                        try:
                            # [SCRIPT:GET_ELEMENT_DATA] Get element data
                            ids.append(element.Id.ToString())
                            names.append(element.Name if hasattr(element, 'Name') else '')
                            categories.append(element.Category.Name if hasattr(element, 'Category') and element.Category else '')
                        except Exception as e:
                            # [UI:SHOW_ERROR] Show error message if processing fails
                            from UI.strings_dudul import str_69
                            MessageBox.Show(str(e),str_69(lan))
                            continue
                    
                    # [UI:CREATE_DATA_TABLE] Create the data table
                    headers = [str_67(lan), str_68(lan), str_5(lan)]
                    data = [
                        ids,
                        names,
                        categories
                    ]
                    editable = [False, False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                else:
                    # [UI:CREATE_EMPTY_TABLE] If no elements are selected, create an empty table
                    headers = [str_67(lan), str_68(lan), str_5(lan)]
                    data = [[], [], []]
                    editable = [False, False, False]
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                from UI.strings_dudul import str_69
                MessageBox.Show(str(e),str_69(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Type] Element Filtering
        #
        # Handles element filtering based on various criteria:
        # - View selection
        # - Level selection
        # - Category selection
        # - Family selection
        # - Type selection
        ###############################################################################
        
        # [SCRIPT:TYPE_FILTER]
        elif button_text == tool_str_6(lan):
            """
            This function handles the event when the "Type Filter" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the type filtering operations.
            2. Initializes and displays a new form for filtering elements based on various criteria such as views, levels, categories, families, and types.
            3. Provides options to filter elements in the current view or across multiple views, with or without considering levels.
            4. Implements exception handling to ensure the form closes gracefully in case of errors.

            Key Features:
            - Allows users to filter elements based on a wide range of criteria, including views, levels, categories, families, and types.
            - Updates the UI to reflect the selected elements and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the current form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                from Autodesk.Revit.DB import FilteredElementCollector
                import Autodesk.Revit.DB as DB
                from System.Collections.Generic import List
                from pyrevit import script, forms, revit
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.option import Filter
                from structure.root import wurl_path,  mod_path, lan_path, cuslogo_path, logo_path, submit_icon, filterbytype_icon, cfilterbytype_back
                from UI.strings_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7
                from UI.skin import skin_mode
                from UI.url import parsweb

                # [SCRIPT:INITIALIZE_PATHS] Initialize paths and settings
                lan = lan_path()
                wurl= wurl_path()
                skin = mod_path()
                coo = cfilterbytype_back()
                bor = cfilterbytype_back()

                # [UI:TYPE_FILTER_FORM_SETUP] Set up the type filter form
                icon_path = filterbytype_icon()
                search_image_path = skin_mode(skin, coo, bor)
                ok_icon_path = submit_icon()
                radio_label = str_1(lan)
                radio_op1 = str_2(lan)
                radio_op2 = str_3(lan)
                radio_label2 = str_4(lan)
                radio_op3 = str_5(lan)
                radio_op4 = str_6(lan)
                window_name = str_7(lan)
                url=parsweb(wurl)

                # [UI:GET_USER_OPTIONS] Prompt the user to select filtering options
                selected_option1, selected_option2 = Filter(icon_path, search_image_path, ok_icon_path, radio_label, radio_op1, radio_op2, radio_label2, radio_op3, radio_op4, window_name, url)
                
                # [UI:CURRENT_VIEW_IGNORE_LEVEL] Handle "Current View Ignore Level" option
                if selected_option1 == "C1R1" and selected_option2 == "C2R2": 
                    """
                    This function handles the event when the "Current View Ignore Level" option is selected.

                    Workflow:
                    1. Retrieves the active view and counts elements in various categories.
                    2. Prompts the user to select a category, family, and type for filtering.
                    3. Filters elements based on the selected criteria and updates the selection in the Revit model.
                    4. Implements exception handling to ensure the form remains stable in case of errors.

                    Key Features:
                    - Allows filtering elements in the current view without considering levels.
                    - Updates the UI to reflect the selected elements and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """
                    # [SCRIPT:IMPORTS] Import necessary modules
                    from sajdmo.modules.inform import count_elements_in_categories2, catch_family_names_and_types_for_category
                    from UI.strings1_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_h1, str_h2
                    output = script.get_output()
                    try:
                        # [UI:ACTIVE_VIEW] Retrieve the active view
                        view = __revit__.ActiveUIDocument.ActiveView  
                        
                        # [SCRIPT:COUNT_ELEMENTS] Count elements in categories
                        category_names = count_elements_in_categories2(view)
                        
                        # [UI:CATEGORY_SELECTION] Prompt the user to select a category
                        selected_category = forms.SelectFromList.show(category_names, title=str_2(lan), button_name=str_1(lan))
                        if selected_category is None:
                                sys.exit()  
                        if selected_category:
                            try:
                                # [SCRIPT:RETRIEVE_FAMILIES] Retrieve families and types for the selected category
                                family_info = catch_family_names_and_types_for_category(view, selected_category)
                                a = []  
                                if family_info is not None:
                                    family_names = list(family_info.keys())
                                    family_names.insert(0, str_5(lan))  
                                    
                                    # [UI:FAMILY_SELECTION] Prompt the user to select a family
                                    selected_family = forms.SelectFromList.show(family_names, title=str_4(lan), button_name=str_3(lan))
                                    if selected_family is None:
                                        sys.exit()  
                                    if selected_family:
                                        if selected_family == str_5(lan):
                                            for family_name, types in family_info.items():
                                                for type_info in types:
                                                    a.append(type_info[1]) 
                                                    linkified_id = output.linkify(type_info[1]) 
                                                    element_ids = a  
                                                    doc = revit.doc
                                                    element_id_objects = List[DB.ElementId]()
                                                    for element_id in element_ids:
                                                        element_id_objects.Add(element_id)
                                                    revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                    revit.uidoc.ShowElements(element_id_objects)
                                        else:
                                            types = family_info[selected_family]
                                            unique_types = list(set([t[0] for t in types]))  
                                            
                                            # [UI:TYPE_SELECTION] Prompt the user to select a type
                                            selected_type = forms.SelectFromList.show(unique_types,title = str_10(lan), button_name=str_9(lan))
                                            if selected_type is None:
                                                    sys.exit()  
                                            if selected_type:
                                                type_info = [t for t in types if t[0] == selected_type]
                                                for info in type_info:
                                                    a.append(info[1])  
                                                    linkified_id = output.linkify(info[1]) 
                                                    element_ids = a  
                                                    doc = revit.doc
                                                    element_id_objects = List[DB.ElementId]()
                                                    for element_id in element_ids:
                                                        element_id_objects.Add(element_id)
                                                    revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                    revit.uidoc.ShowElements(element_id_objects)
                                            else:
                                                forms.alert(str_14(lan))
                                    else:
                                        forms.alert(str_15(lan))
                                else:
                                    forms.alert(str_16(lan), title=str_17(lan))
                            except Exception as e:
                                forms.alert(str_18(lan).format(e), title=str_19(lan))
                        else:
                            forms.alert(str_20(lan))

                    except StopIteration:
                        pass
                    except Exception:
                        pass            
                    except SystemExit:
                        pass
                
                # [UI:MULTIPLE_VIEWS_IGNORE_LEVEL] Handle "Multiple Views Ignore Level" option
                if selected_option1 == "C1R2" and selected_option2 == "C2R2":
                    """
                    This function handles the event when the "Multiple Views Ignore Level" option is selected.

                    Workflow:
                    1. Prompts the user to select multiple views for filtering.
                    2. Counts elements in various categories across the selected views.
                    3. Prompts the user to select a category, family, and type for filtering.
                    4. Filters elements based on the selected criteria and updates the selection in the Revit model.
                    5. Implements exception handling to ensure the form remains stable in case of errors.

                    Key Features:
                    - Allows filtering elements across multiple views without considering levels.
                    - Updates the UI to reflect the selected elements and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """
                    # [SCRIPT:IMPORTS] Import necessary modules
                    from Autodesk.Revit.DB import FilteredElementCollector
                    from sajdmo.modules.inform import count_elements_in_categories2, catch_family_names_and_types_for_category
                    from UI.strings2_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_h1, str_h2
                    output = script.get_output()
                    try:
                        # [UI:VIEW_SELECTION] Prompt the user to select multiple views
                        selected_views = forms.select_views(title=str_21(lan), button_name=str_22(lan), width=500, multiple=True, filterfunc=None, doc=None, use_selection=True)
                        if not selected_views:
                            sys.exit()  
                        for view in selected_views:
                            # [SCRIPT:COUNT_ELEMENTS] Count elements in categories
                            category_names = count_elements_in_categories2(view)
                        
                        # [UI:CATEGORY_SELECTION] Prompt the user to select a category
                        selected_category = forms.SelectFromList.show(category_names,title = str_2(lan), button_name=str_1(lan))
                        if selected_category is None:
                                sys.exit() 
                        if selected_category:
                            try:
                                # [SCRIPT:RETRIEVE_FAMILIES] Retrieve families and types for the selected category
                                family_info = catch_family_names_and_types_for_category(view, selected_category)
                                a = []  
                                if family_info is not None:
                                    family_names = list(family_info.keys())
                                    family_names.insert(0, str_5(lan))  
                                    
                                    # [UI:FAMILY_SELECTION] Prompt the user to select a family
                                    selected_family = forms.SelectFromList.show(family_names, title = str_4(lan), button_name=str_3(lan))
                                    if selected_family is None:
                                        sys.exit()  
                                    if selected_family:
                                        if selected_family == str_5(lan):
                                            for family_name, types in family_info.items():
                                                for type_info in types:
                                                    a.append(type_info[1])  
                                                    linkified_id = output.linkify(type_info[1])  
                                                    element_ids = a 
                                                    doc = revit.doc
                                                    element_id_objects = List[DB.ElementId]()
                                                    for element_id in element_ids:
                                                        element_id_objects.Add(element_id)
                                                    revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                    revit.uidoc.ShowElements(element_id_objects)
                                        else:
                                            types = family_info[selected_family]
                                            unique_types = list(set([t[0] for t in types]))  
                                            
                                            # [UI:TYPE_SELECTION] Prompt the user to select a type
                                            selected_type = forms.SelectFromList.show(unique_types,title = str_10(lan), button_name=str_9(lan))
                                            if selected_type is None:
                                                    sys.exit()  
                                            if selected_type:
                                                type_info = [t for t in types if t[0] == selected_type]
                                                for info in type_info:
                                                    a.append(info[1])  
                                                    linkified_id = output.linkify(info[1])  
                                                    element_ids = a 
                                                    doc = revit.doc
                                                    element_id_objects = List[DB.ElementId]()
                                                    for element_id in element_ids:
                                                        element_id_objects.Add(element_id)
                                                    revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                    revit.uidoc.ShowElements(element_id_objects)
                                            else:
                                                forms.alert(str_14(lan))
                                    else:
                                        forms.alert(str_15(lan))
                                else:
                                    forms.alert(str_16(lan), title=str_17(lan))
                            except Exception as e:
                                forms.alert(str_18(lan).format(e), title=str_19(lan))
                        else:
                            forms.alert(str_20(lan))

                    except StopIteration:
                        pass
                    except Exception:
                        pass            
                    except SystemExit:
                        pass
                
                # [UI:CURRENT_VIEW_INCLUDE_LEVEL] Handle "Current View Include Level" option
                if selected_option1 == "C1R1" and selected_option2 == "C2R1":
                    """
                    This function handles the event when the "Current View Include Level" option is selected.

                    Workflow:
                    1. Retrieves the active view and identifies levels associated with elements in the view.
                    2. Prompts the user to select levels, categories, families, and types for filtering.
                    3. Filters elements based on the selected criteria and updates the selection in the Revit model.
                    4. Implements exception handling to ensure the form remains stable in case of errors.

                    Key Features:
                    - Allows filtering elements in the current view while considering levels.
                    - Updates the UI to reflect the selected elements and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """
                    # [SCRIPT:IMPORTS] Import necessary modules
                    from Autodesk.Revit.DB import (FilteredElementCollector,ElementLevelFilter,LogicalOrFilter,ElementId,BuiltInCategory,BuiltInParameter,)
                    from System.Collections.Generic import List
                    from sajdmo.modules.inform import count_elements_in_categories3, catch_families_for_levels, catch_types_for_family, catch_family_names_and_types_for_category
                    from UI.strings3_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_h1, str_h2
                    output = script.get_output()
                    
                    # [SCRIPT:HELPER_FUNCTION] Create clickable links for Element IDs
                    def linkify_element_id(element_id):
                        return output.linkify(element_id)
                    try:
                        try:
                            # [UI:ACTIVE_VIEW] Retrieve the active view and document
                            view = __revit__.ActiveUIDocument.ActiveView
                            doc = __revit__.ActiveUIDocument.Document
                            level_ids = set()
                            elements = FilteredElementCollector(doc, view.Id).WhereElementIsNotElementType().ToElements()
                            view_level_ids = set(element.LevelId for element in elements)
                            level_ids.update(view_level_ids)
                            level_ids_list = list(level_ids)
                            
                            # [UI:LEVEL_CHECK] Check if there are levels available
                            if len(level_ids_list) == 1:
                                forms.alert(str_11(lan))
                            else:
                                # [UI:LEVEL_SELECTION] Prompt the user to select levels
                                selected_levels = forms.select_levels(
                                    title=str_1(lan),
                                    button_name=str_2(lan),
                                    width=500,
                                    multiple=True,
                                    filterfunc=lambda level: level.Id in level_ids_list,
                                    doc=doc,
                                    use_selection=False,
                                )
                                if selected_levels is None:
                                    forms.alert(str_12(lan))
                                    sys.exit()
                                if selected_levels:
                                    doc = __revit__.ActiveUIDocument.Document
                                    
                                    # [SCRIPT:FILTER_CATEGORIES] Filter categories based on selected levels
                                    category_names = count_elements_in_categories3(view, [level.Id for level in selected_levels])
                                    if not category_names:
                                        forms.alert(str_13(lan))
                                        sys.exit()

                                    # [UI:CATEGORY_SELECTION] Prompt the user to select a category
                                    selected_category = forms.SelectFromList.show(
                                        [cat for cat in category_names.keys() if cat != "INVALID"],
                                        title=str_6(lan),
                                        button_name=str_5(lan),
                                    )
                                    if selected_category is None:
                                        sys.exit()
                                    if selected_category:
                                        # [SCRIPT:FILTER_FAMILIES] Filter families based on selected levels and category
                                        family_info = catch_families_for_levels(view, [level.Id for level in selected_levels], selected_category)
                                        if not family_info:
                                            forms.alert(str_14(lan))
                                            sys.exit()

                                        family_names = list(family_info.keys())

                                        # [UI:FAMILY_SELECTION] Prompt the user to select a family
                                        selected_family = forms.SelectFromList.show(
                                            [family for family in family_names if family != "INVALID"],
                                            title=str_8(lan),
                                            button_name=str_7(lan),
                                        )
                                        if selected_family is None:
                                            sys.exit()
                                        if selected_family:
                                            # [SCRIPT:FILTER_TYPES] Filter types based on selected levels, category, and family
                                            type_info = catch_types_for_family(view, [level.Id for level in selected_levels], selected_category, selected_family)
                                            if not type_info:
                                                forms.alert(str_15(lan))
                                                sys.exit()

                                            type_names = list(type_info.keys())

                                            # [UI:TYPE_SELECTION] Prompt the user to select a type
                                            selected_type = forms.SelectFromList.show(
                                                [type for type in type_names if type != "INVALID"],
                                                title=str_10(lan),
                                                button_name=str_9(lan),
                                            )
                                            if selected_type is None:
                                                sys.exit()
                                            if selected_type:
                                                selected_elements = type_info[selected_type]
                                                family_elements_on_levels = [
                                                    elem
                                                    for elem in FilteredElementCollector(doc, view.Id)
                                                    .WhereElementIsNotElementType()
                                                    .ToElements()
                                                    if elem.Id in selected_elements
                                                ]
                                                element_ids_on_levels = [
                                                    (elem.Id, elem.Name, view.Document.GetElement(elem.GetTypeId())
                                                    .get_Parameter(BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM)
                                                    .AsString(), view.Document.GetElement(elem.GetTypeId())
                                                    .get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM)
                                                    .AsString()) for elem in family_elements_on_levels
                                                ]
                                                
                                                # [SCRIPT:SELECT_ELEMENTS] Select elements based on the selected criteria
                                                element_ids_collection = List[ElementId](
                                                    [element[0] for element in element_ids_on_levels]
                                                )
                                                __revit__.ActiveUIDocument.Selection.SetElementIds(
                                                    element_ids_collection
                                                )
                                                __revit__.ActiveUIDocument.ShowElements(
                                                    element_ids_collection
                                                )
                                                for element_info in element_ids_on_levels:
                                                    clickable_id = linkify_element_id(element_info[0])
                                            else:
                                                forms.alert(str_18(lan))
                                        else:
                                            forms.alert(str_19(lan))
                                    else:
                                        forms.alert(str_20(lan))
                                else:
                                    forms.alert(str_21(lan))
                        except:
                            forms.alert(str_22(lan))
                            pass

                    except StopIteration:
                        pass
                    except Exception:
                        pass            
                    except SystemExit:
                        pass
                
                # [UI:MULTIPLE_VIEWS_INCLUDE_LEVEL] Handle "Multiple Views Include Level" option
                if selected_option1 == "C1R2" and selected_option2 == "C2R1":
                    """
                    This function handles the event when the "Multiple Views Include Level" option is selected.

                    Workflow:
                    1. Prompts the user to select multiple views for filtering.
                    2. Identifies levels associated with elements in the selected views.
                    3. Prompts the user to select levels, categories, families, and types for filtering.
                    4. Filters elements based on the selected criteria and updates the selection in the Revit model.
                    5. Implements exception handling to ensure the form remains stable in case of errors.

                    Key Features:
                    - Allows filtering elements across multiple views while considering levels.
                    - Updates the UI to reflect the selected elements and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """
                    # [SCRIPT:IMPORTS] Import necessary modules
                    from Autodesk.Revit.DB import (FilteredElementCollector,BuiltInCategory,BuiltInParameter,ElementLevelFilter,LogicalOrFilter,ElementId,)
                    from System.Collections.Generic import List
                    from sajdmo.modules.inform import count_elements_in_categories3, catch_families_for_levels, catch_types_for_family, catch_family_names_and_types_for_category
                    from UI.strings4_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_h1, str_h2
                    from UI.skin import skin_mode
                    output = script.get_output()
                    
                    # [SCRIPT:HELPER_FUNCTION] Create clickable links for Element IDs
                    def linkify_element_id(element_id):
                        return output.linkify(element_id)

                    try:
                        try:
                            # [UI:VIEW_SELECTION] Prompt the user to select multiple views
                            selected_views = forms.select_views(title= str_3(lan), button_name=str_4(lan))
                            if selected_views:
                                selected_view = selected_views[0]  
                                if selected_view is None:
                                    forms.alert(str_12(lan))
                                    sys.exit()
                                doc = selected_view.Document
                                level_ids = set()
                                for view in selected_views:
                                    elements = FilteredElementCollector(doc, view.Id).WhereElementIsNotElementType().ToElements()
                                    view_level_ids = set(element.LevelId for element in elements)
                                    level_ids.update(view_level_ids)
                                level_ids_list = list(level_ids)
                                
                                # [UI:LEVEL_CHECK] Check if there are levels available
                                if len(level_ids_list) == 1:
                                    forms.alert(str_11(lan))
                                else:
                                    # [UI:LEVEL_SELECTION] Prompt the user to select levels
                                    selected_levels = forms.select_levels(
                                        title=str_1(lan),
                                        button_name=str_2(lan),
                                        width=500,
                                        multiple=True,
                                        filterfunc=lambda level: level.Id in level_ids_list,
                                        doc=doc,
                                        use_selection=False,
                                    )
                                    if selected_levels is None:
                                        forms.alert(str_12(lan))
                                        sys.exit()
                                    if selected_levels:
                                        doc = selected_view.Document
                                        level_ids = []
                                        selected_level_names = []
                                        for level in selected_levels:
                                            level_ids.append(level.Id)
                                            selected_level_names.append(level.Name)
                                        level_filters = [ElementLevelFilter(level.Id) for level in selected_levels]
                                        combined_filter = LogicalOrFilter(level_filters)
                                        
                                        # [SCRIPT:COUNT_ELEMENTS] Count elements in categories for selected levels 
                                        category_names = count_elements_in_categories3(selected_view, [level.Id for level in selected_levels])
                                        if not category_names:
                                            forms.alert(str_13(lan))
                                            sys.exit()

                                        # [UI:CATEGORY_SELECTION] Prompt the user to select a category
                                        selected_category = forms.SelectFromList.show(
                                            [cat for cat in category_names.keys() if cat != "INVALID"],
                                            title = str_6(lan),
                                            button_name=str_5(lan),
                                        )
                                        if selected_category is None:
                                            sys.exit()
                                        if selected_category:
                                            # [SCRIPT:RETRIEVE_FAMILIES] Retrieve families for selected levels and category
                                            family_info = catch_families_for_levels(selected_view, [level.Id for level in selected_levels], selected_category)
                                            if not family_info:
                                                forms.alert(str_14(lan))
                                                sys.exit()
                                            family_names = list(family_info.keys())

                                            # [UI:FAMILY_SELECTION] Prompt the user to select a family
                                            selected_family = forms.SelectFromList.show(
                                                [family for family in family_names if family != "INVALID"],
                                                title= str_8(lan),
                                                button_name=str_7(lan),
                                            )
                                            if selected_family is None:
                                                sys.exit()
                                            if selected_family:
                                                # [SCRIPT:RETRIEVE_TYPES] Retrieve types for selected levels, category, and family
                                                type_info = catch_types_for_family(selected_view, [level.Id for level in selected_levels], selected_category, selected_family)
                                                if not type_info:
                                                    forms.alert(str_15(lan))
                                                    sys.exit()
                                                type_names = list(type_info.keys())

                                                # [UI:TYPE_SELECTION] Prompt the user to select a type
                                                selected_type = forms.SelectFromList.show(
                                                    [type for type in type_names if type != "INVALID"],
                                                    title= str_10(lan),
                                                    button_name=str_9(lan),
                                                )
                                                if selected_type is None:
                                                    sys.exit()
                                                if selected_type:
                                                    selected_elements = type_info[selected_type]
                                                    family_elements_on_levels = [
                                                        elem
                                                        for elem in FilteredElementCollector(doc, selected_view.Id)
                                                        .WhereElementIsNotElementType()
                                                        .ToElements()
                                                        if elem.Id in selected_elements
                                                    ]
                                                    element_ids_on_levels = [
                                                        (elem.Id, elem.Name, selected_view.Document.GetElement(elem.GetTypeId())
                                                        .get_Parameter(BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM)
                                                        .AsString(), selected_view.Document.GetElement(elem.GetTypeId())
                                                        .get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM)
                                                        .AsString()) for elem in family_elements_on_levels
                                                    ]
                                                    
                                                    # [SCRIPT:SELECT_ELEMENTS] Select elements based on the selected criteria
                                                    element_ids_collection = List[ElementId](
                                                        [element[0] for element in element_ids_on_levels]
                                                    )
                                                    __revit__.ActiveUIDocument.Selection.SetElementIds(
                                                        element_ids_collection
                                                    )
                                                    __revit__.ActiveUIDocument.ShowElements(
                                                        element_ids_collection
                                                    )

                                                    for element_info in element_ids_on_levels:
                                                        clickable_id = linkify_element_id(element_info[0])
                                                else:
                                                    forms.alert(str_18(lan))
                                            else:
                                                forms.alert(str_19(lan))
                                        else:
                                            forms.alert(str_20(lan))
                                    else:
                                        forms.alert(str_21(lan))
                            else:
                                forms.alert(str_23(lan))
                        except:
                            forms.alert(str_22(lan))
                            pass

                    except StopIteration:
                        pass
                    except Exception:
                        pass            
                    except SystemExit:
                        pass

                # [SCRIPT:GET_SELECTED_ELEMENTS] Retrieve selected elements
                selection = revit.get_selection()

                if selection:  
                    # [SCRIPT:INITIALIZE_LISTS] Initialize lists to store element data
                    element_ids = []
                    element_names = []
                    views = []
                    categories = []
                    families = []
                    types = []
                    levels = []
                    
                    # [SCRIPT:COLLECT_ELEMENT_DATA] Collect data from each selected element
                    for element in selection:
                        try:
                            # [SCRIPT:INITIALIZE_DEFAULTS] Initialize default values in case of failure
                            element_id = ''
                            element_name = ''
                            view_name = ''
                            category_name = ''
                            family_name = ''
                            type_name = ''
                            level_name = ''
                            
                            try:
                                element_id = element.Id.ToString()
                            except:
                                pass
                                
                            try:
                                element_name = element.Name if hasattr(element, 'Name') else ''
                            except:
                                pass
                                
                            try:
                                view_name = doc.ActiveView.Name
                            except:
                                pass
                                
                            try:
                                category_name = element.Category.Name if hasattr(element, 'Category') and element.Category else ''
                            except:
                                pass
                            
                            # [SCRIPT:GET_FAMILY_TYPE] Get family and type information
                            try:
                                type_element = doc.GetElement(element.GetTypeId())
                                if type_element:
                                    family_name = type_element.FamilyName if hasattr(type_element, 'FamilyName') else ''
                                    type_name = type_element.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM).AsString() \
                                            if type_element.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM) else ''
                            except:
                                pass
                            
                            # [SCRIPT:GET_LEVEL] Get level information
                            try:
                                level_id = element.LevelId if hasattr(element, 'LevelId') else None
                                if level_id and level_id.IntegerValue != -1:
                                    level = doc.GetElement(level_id)
                                    level_name = level.Name if level else ''
                                else:
                                    level_param = element.get_Parameter(BuiltInParameter.SCHEDULE_LEVEL_PARAM)
                                    if level_param and level_param.HasValue:
                                        level = doc.GetElement(level_param.AsElementId())
                                        level_name = level.Name if level else ''
                            except:
                                pass
                            
                            # [SCRIPT:APPEND_DATA] Append all values (will always append something, even if empty)
                            element_ids.append(element_id)
                            element_names.append(element_name)
                            views.append(view_name)
                            categories.append(category_name)
                            families.append(family_name)
                            types.append(type_name)
                            levels.append(level_name)
                            
                        except Exception as e:
                            # [SCRIPT:HANDLE_ERROR] If anything fails, append empty strings to maintain list lengths
                            element_ids.append('')
                            element_names.append('')
                            views.append('')
                            categories.append('')
                            families.append('')
                            types.append('')
                            levels.append('')
                            pass
                    
                    # [SCRIPT:VERIFY_LIST_LENGTHS] Verify all lists have the same length
                    list_lengths = [len(lst) for lst in [element_ids, element_names, views, categories, families, types, levels]]
                    if len(set(list_lengths)) != 1:
                        from UI.strings_type_filter import str_15, str_16
                        MessageBox.Show(str_16(lan),str_15(lan))
                        max_length = max(list_lengths)
                        element_ids.extend([''] * (max_length - len(element_ids)))
                        element_names.extend([''] * (max_length - len(element_names)))
                        views.extend([''] * (max_length - len(views)))
                        categories.extend([''] * (max_length - len(categories)))
                        families.extend([''] * (max_length - len(families)))
                        types.extend([''] * (max_length - len(types)))
                        levels.extend([''] * (max_length - len(levels)))
                    
                    # [SCRIPT:CREATE_DATA_TABLE] Create the data table
                    from UI.strings_type_filter import str_8, str_9, str_10, str_11, str_12, str_13, str_14
                    headers = [str_8(lan), str_9(lan), str_10(lan), str_11(lan), str_12(lan), str_13(lan), str_14(lan)]
                    data = [
                        element_ids,
                        element_names,
                        views,
                        categories,
                        families,
                        types,
                        levels
                    ]
                    editable = [False, False, False, False, False, False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                # [SCRIPT:HANDLE_EXCEPTION] Handle exceptions and show error message
                from UI.strings_type_filter import str_17
                MessageBox.Show(str(e),str_17(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Select by Search for Value of Instance Parameters] Instance Parameter Value Search
        #
        # Handles search and selection of elements based on instance parameter values:
        # - Searches for elements with specific parameter values
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:INSTANCE_PARAMETER_SEARCH]
        elif button_text == tool_str_7(lan):
            """
            This script handles the "Select by Search for Value of Instance Parameters" functionality in BIM Pars app.

            Workflow:
            1. Hides the Windows Form.
            2. Imports necessary modules, including Revit API, category definitions, and UI components.
            3. Displays a user input form for selecting an instance parameter and its value.
            4. Iterates through predefined Revit categories to find elements matching the selected parameter and value.
            5. Collects and selects matching elements in Revit, highlighting them in the model.
            6. Extracts element information (ID, name, parameter, value) and organizes it into a read-only data table.
            7. Displays the results in a report tab.
            8. Restores the Windows Form after execution.
            9. Implements exception handling to ensure the form is always restored, even in case of errors.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                from System.Collections.Generic import List
                from Autodesk.Revit.DB import ElementId
                from pyrevit import forms, script, revit
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.categories import (Doors, Windows, Walls, AirTerminals, CableTrayFittings, CableTrays, Casework, Ceilings, Columns, CommunicationDevices, ConduitFitting, Conduit, 
                CurtainWallPanels, CurtainWallMullions, DataDevices, DuctAccessory, DuctFitting, DuctInsulations, DuctLinings, DuctCurves, ElectricalEquipment, ElectricalFixtures, FireAlarmDevices, 
                FlexDuctCurves, FlexPipeCurves, Floors, Furniture, FurnitureSystems, GenericModel, LightingDevices, LightingFixtures, MechanicalEquipment, NurseCallDevices, PipeAccessory, PipeFitting, 
                PipeInsulations, PipeCurves, Planting, PlumbingFixtures, StairsRailing, Ramps, Roofs, Rooms, SecurityDevices, Site, SpecialityEquipment, Sprinklers, Stairs, AreaRein, StructuralColumns, 
                StructConnections, StructuralFoundation, StructuralFraming, PathRein, Rebar, StructuralStiffener, StructuralTruss, TelephoneDevices)
                from sajdmo.forms.double import double_input_plusnote
                from sajdmo.scripts.select import category_id_param_value
                from structure.root import wurl_path, sinstancepv_icon, sinstancepv_back, lan_path, cancel_icon, ok_icon
                from UI.strings_select_by_search_for_value_of_instance_parameter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16
                from UI.url import parsweb

                lan = lan_path()
                wurl= wurl_path()
                output = script.get_output()
                
                # [UI:SEARCH_FORM] Display search form for parameter and value
                icon_path = sinstancepv_icon()
                search_image_path = sinstancepv_back()
                ok_icon_path = ok_icon()
                cancel_icon_path = cancel_icon()
                parameter_label = str_1(lan)
                value_label = str_2(lan)
                window_name = str_11(lan)
                note = str_10(lan)
                url=parsweb(wurl)
                with forms.ProgressBar(title='', indeterminate=True):
                    selected_parameter, selected_value = double_input_plusnote(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, url)
                try:
                    if selected_parameter:
                        if selected_value:
                            # [SCRIPT:CATEGORIES] Define categories for search
                            categories = {
                                'Doors': Doors,
                                'Windows': Windows,
                                'Walls': Walls,
                                'AirTerminals': AirTerminals,
                                'Doors': Doors,
                                'CableTrayFittings': CableTrayFittings,
                                'CableTrays': CableTrays,
                                'Casework': Casework,
                                'Ceilings': Ceilings,
                                'Columns': Columns,
                                'CommunicationDevices': CommunicationDevices,
                                'ConduitFitting': ConduitFitting,
                                'Conduit': Conduit,
                                'CurtainWallPanels': CurtainWallPanels,
                                'CurtainWallMullions': CurtainWallMullions,
                                'DataDevices': DataDevices,
                                'DuctAccessory': DuctAccessory,
                                'DuctFitting': DuctFitting,
                                'DuctInsulations': DuctInsulations,
                                'DuctLinings': DuctLinings,
                                'DuctCurves': DuctCurves,
                                'ElectricalEquipment': ElectricalEquipment,
                                'ElectricalFixtures': ElectricalFixtures,
                                'FireAlarmDevices': FireAlarmDevices,
                                'FlexDuctCurves': FlexDuctCurves,
                                'FlexPipeCurves': FlexPipeCurves,
                                'Floors': Floors,
                                'Furniture': Furniture,
                                'FurnitureSystems': FurnitureSystems,
                                'GenericModel': GenericModel,
                                'LightingDevices': LightingDevices,
                                'LightingFixtures': LightingFixtures,
                                'MechanicalEquipment': MechanicalEquipment,
                                'NurseCallDevices': NurseCallDevices,
                                'PipeAccessory': PipeAccessory,
                                'PipeFitting': PipeFitting,
                                'PipeInsulations': PipeInsulations,
                                'PipeCurves': PipeCurves,
                                'Planting': Planting,
                                'PlumbingFixtures': PlumbingFixtures,
                                'StairsRailing': StairsRailing,
                                'Ramps': Ramps,
                                'Roofs': Roofs,
                                'Rooms': Rooms,
                                'SecurityDevices': SecurityDevices,
                                'Site': Site,
                                'SpecialityEquipment': SpecialityEquipment,
                                'Sprinklers': Sprinklers,
                                'Stairs': Stairs,
                                'AreaRein': AreaRein,
                                'StructuralColumns': StructuralColumns,
                                'StructConnections': StructConnections,
                                'StructuralFoundation': StructuralFoundation,
                                'StructuralFraming': StructuralFraming,
                                'PathRein': PathRein,
                                'Rebar': Rebar,
                                'StructuralStiffener': StructuralStiffener,
                                'StructuralTruss': StructuralTruss,
                                'TelephoneDevices': TelephoneDevices,
                            }
                            all_selected_element_ids = [] 

                            # [SCRIPT:SEARCH_ELEMENTS] Search for elements matching the parameter and value
                            for category_name, get_element_ids_func in categories.items():
                                selected_element_ids = category_id_param_value(category_name, get_element_ids_func, selected_parameter, selected_value)
                                all_selected_element_ids.extend(selected_element_ids)  

                            if all_selected_element_ids:
                                # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit
                                element_id_collection = List[ElementId](all_selected_element_ids)  
                                revit.uidoc.Selection.SetElementIds(element_id_collection)
                                revit.uidoc.ShowElements(element_id_collection)
                                
                                # [SCRIPT:INITIALIZE_LISTS] Initialize lists for table data
                                element_ids = []
                                element_names = []
                                parameters = []
                                values = []
                                
                                # [SCRIPT:COLLECT_ELEMENT_DATA] Collect data for each selected element
                                doc = revit.doc
                                for element_id in all_selected_element_ids:
                                    try:
                                        element = doc.GetElement(element_id)
                                        if element:
                                            element_ids.append(element_id.ToString())
                                            element_names.append(element.Name if hasattr(element, 'Name') else '')
                                            parameters.append(selected_parameter)
                                            param = element.LookupParameter(selected_parameter)
                                            if param:
                                                if param.StorageType.ToString() == 'Double':
                                                    values.append(str(param.AsDouble()))
                                                elif param.StorageType.ToString() == 'Integer':
                                                    values.append(str(param.AsInteger()))
                                                elif param.StorageType.ToString() == 'String':
                                                    values.append(param.AsString() or '')
                                                elif param.StorageType.ToString() == 'ElementId':
                                                    values.append(str(param.AsElementId().IntegerValue))
                                                else:
                                                    values.append(str(param.AsValueString()))
                                            else:
                                                values.append('N/A')
                                    except Exception as e:
                                        MessageBox.Show(str(e),str_13(lan))
                                        sys.exit()
                                
                                # [SCRIPT:CREATE_DATA_TABLE] Create the data table
                                headers = [str_12(lan), str_14(lan), str_15(lan), str_16(lan)]
                                data = [
                                    element_ids,
                                    element_names,
                                    parameters,
                                    values
                                ]
                                editable = [False, False, False, False]
                                self.create_report_tab(headers, data, editable, title=button_text)
                            else:
                                forms.alert(str_6(lan))
                        else:
                            forms.alert(str_7(lan))
                    else:
                        forms.alert(str_8(lan))

                except StopIteration:
                    pass
                except Exception:
                    pass            
                except SystemExit:
                    pass

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_13(lan))
                self.Show()

            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Select based on Existence of Parameters Values] Parameter Value Filtering
        #
        # Handles selection and filtering of elements based on parameter values:
        # - Filters elements by parameter value
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:EXISTENCE_PARAMETER_SEARCH]
        elif button_text == tool_str_8(lan):
            """
            This function handles the event when the "Select Based on Existence of Parameter Values" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the parameter-based selection operations.
            2. Displays a task dialog to allow the user to choose between three options: 
            - Select elements with any parameter value
            - Select elements with a specific parameter value
            - Select elements with no parameter value
            3. Prompts the user to select a parameter and categories for filtering.
            4. Filters elements based on the selected criteria and updates the selection in the Revit model.
            5. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows filtering elements based on the existence or absence of parameter values.
            - Updates the UI to reflect the selected elements and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference("RevitAPI")
                import os
                import sys
                import Autodesk.Revit.DB as DB
                from Autodesk.Revit.DB import ElementId
                from System.Collections.Generic import List
                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                from pyrevit import revit, script, forms, DB
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.categories import (Doors, Windows, Walls, AirTerminals, CableTrayFittings, CableTrays, Casework, Ceilings, Columns, CommunicationDevices, ConduitFitting, Conduit, 
                CurtainWallPanels, CurtainWallMullions, DataDevices, DuctAccessory, DuctFitting, DuctInsulations, DuctLinings, DuctCurves, ElectricalEquipment, ElectricalFixtures, FireAlarmDevices, 
                FlexDuctCurves, FlexPipeCurves, Floors, Furniture, FurnitureSystems, GenericModel, LightingDevices, LightingFixtures, MechanicalEquipment, NurseCallDevices, PipeAccessory, PipeFitting, 
                PipeInsulations, PipeCurves, Planting, PlumbingFixtures, StairsRailing, Ramps, Roofs, Rooms, SecurityDevices, Site, SpecialityEquipment, Sprinklers, Stairs, AreaRein, StructuralColumns, 
                StructConnections, StructuralFoundation, StructuralFraming, PathRein, Rebar, StructuralStiffener, StructuralTruss, TelephoneDevices)              
                from sajdmo.scripts.select import category_id_param, category_id_param3
                from sajdmo.forms.single import single_input
                from structure.root import wurl_path, lan_path, pvalue_back, pvalue_icon, cancel_icon, ok_icon
                from UI.strings_select_based_on_existence_of_parameter_value import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_12_, str_13, str_14, 
                str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24)
                from UI.url import parsweb

                lan = lan_path()
                wurl= wurl_path()

                # [SCRIPT:HELPER_FUNCTION] Collect element data based on parameter
                def collect_element_data(element_ids, selected_parameter):
                    """
                    This function collects data from elements based on a selected parameter.

                    Workflow:
                    1. Iterates through a list of element IDs.
                    2. Retrieves the element from the Revit document using the element ID.
                    3. Collects the element's ID, name, and the value of the selected parameter.
                    4. Handles different parameter storage types (Double, Integer, String, ElementId, etc.).
                    5. Implements exception handling to ensure the function remains stable in case of errors.

                    Key Features:
                    - Collects element data including ID, name, and parameter value.
                    - Handles various parameter storage types.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """
                    element_ids_list = []
                    element_names = []
                    parameters = []
                    values = []
                    
                    for element_id in element_ids:
                        try:
                            element = revit.doc.GetElement(ElementId(element_id) if isinstance(element_id, int) else element_id)
                            if element:
                                element_ids_list.append(str(element.Id.IntegerValue))
                                element_names.append(element.Name if hasattr(element, 'Name') else '')
                                parameters.append(selected_parameter)
                                param = element.LookupParameter(selected_parameter)
                                if param:
                                    if param.StorageType.ToString() == 'Double':
                                        values.append(str(param.AsDouble()))
                                    elif param.StorageType.ToString() == 'Integer':
                                        values.append(str(param.AsInteger()))
                                    elif param.StorageType.ToString() == 'String':
                                        values.append(param.AsString() or '')
                                    elif param.StorageType.ToString() == 'ElementId':
                                        values.append(str(param.AsElementId().IntegerValue))
                                    else:
                                        values.append(str(param.AsValueString()))
                                else:
                                    values.append('N/A')
                        except Exception as e:
                            MessageBox.Show(str(e),str_22(lan))
                            sys.exit()
                    
                    return element_ids_list, element_names, parameters, values

                # [UI:TASK_DIALOG] Display task dialog for user options
                title = str_1(lan)
                dialog = TaskDialog(title)
                dialog.MainInstruction = str_20(lan)
                dialog.MainContent = str_3(lan)
                dialog.TitleAutoPrefix = False
                dialog.AllowCancellation = True
                dialog.CommonButtons = TaskDialogCommonButtons.Cancel
                dialog.DefaultButton = TaskDialogResult.None
                dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink1,
                                    str_4(lan),
                                    str_5(lan))
                dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink2,
                                    str_6(lan),
                                    str_7(lan))
                dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink3,
                                    str_8(lan),
                                    str_9(lan))
                result = dialog.Show()
                
                # [UI:CANCEL_OPTION] Handle cancel option
                if result == TaskDialogResult.Cancel:
                    forms.alert(str_10(lan))
                    sys.exit()

                # [SCRIPT:ANY_PARAMETER_VALUE] Handle "Select Elements with Any Parameter Value"
                if result == TaskDialogResult.CommandLink1:
                    """
                    This function handles the event when the "Select Elements with Any Parameter Value" option is chosen.

                    Workflow:
                    1. Displays a form for the user to select a parameter and categories.
                    2. Filters elements based on the selected parameter and categories.
                    3. Updates the selection in the Revit model to include elements with any value for the selected parameter.
                    4. Creates a report table with the collected element data.
                    5. Implements exception handling to ensure the form remains stable in case of errors.

                    Key Features:
                    - Allows filtering elements based on the existence of any parameter value.
                    - Updates the UI to reflect the selected elements and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """

                    # [SCRIPT:CATEGORIES] Define categories for search
                    categories = {
                        'Doors': Doors,
                            'Windows': Windows,
                            'Walls': Walls,
                            'AirTerminals': AirTerminals,
                            'Doors': Doors,
                            'CableTrayFittings': CableTrayFittings,
                            'CableTrays': CableTrays,
                            'Casework': Casework,
                            'Ceilings': Ceilings,
                            'Columns': Columns,
                            'CommunicationDevices': CommunicationDevices,
                            'ConduitFitting': ConduitFitting,
                            'Conduit': Conduit,
                            'CurtainWallPanels': CurtainWallPanels,
                            'CurtainWallMullions': CurtainWallMullions,
                            'DataDevices': DataDevices,
                            'DuctAccessory': DuctAccessory,
                            'DuctFitting': DuctFitting,
                            'DuctInsulations': DuctInsulations,
                            'DuctLinings': DuctLinings,
                            'DuctCurves': DuctCurves,
                            'ElectricalEquipment': ElectricalEquipment,
                            'ElectricalFixtures': ElectricalFixtures,
                            'FireAlarmDevices': FireAlarmDevices,
                            'FlexDuctCurves': FlexDuctCurves,
                            'FlexPipeCurves': FlexPipeCurves,
                            'Floors': Floors,
                            'Furniture': Furniture,
                            'FurnitureSystems': FurnitureSystems,
                            'GenericModel': GenericModel,
                            'LightingDevices': LightingDevices,
                            'LightingFixtures': LightingFixtures,
                            'MechanicalEquipment': MechanicalEquipment,
                            'NurseCallDevices': NurseCallDevices,
                            'PipeAccessory': PipeAccessory,
                            'PipeFitting': PipeFitting,
                            'PipeInsulations': PipeInsulations,
                            'PipeCurves': PipeCurves,
                            'Planting': Planting,
                            'PlumbingFixtures': PlumbingFixtures,
                            'StairsRailing': StairsRailing,
                            'Ramps': Ramps,
                            'Roofs': Roofs,
                            'Rooms': Rooms,
                            'SecurityDevices': SecurityDevices,
                            'Site': Site,
                            'SpecialityEquipment': SpecialityEquipment,
                            'Sprinklers': Sprinklers,
                            'Stairs': Stairs,
                            'AreaRein': AreaRein,
                            'StructuralColumns': StructuralColumns,
                            'StructConnections': StructConnections,
                            'StructuralFoundation': StructuralFoundation,
                            'StructuralFraming': StructuralFraming,
                            'PathRein': PathRein,
                            'Rebar': Rebar,
                            'StructuralStiffener': StructuralStiffener,
                            'StructuralTruss': StructuralTruss,
                            'TelephoneDevices': TelephoneDevices,
                    }
                    
                    # [UI:PARAMETER_FORM] Display form for parameter selection
                    icon_path = pvalue_icon()
                    search_image_path = pvalue_back()
                    ok_icon_path = ok_icon()
                    cancel_icon_path = cancel_icon()
                    parameter_label = str_11(lan)
                    window_name = str_4(lan)
                    url = parsweb(wurl)
                    with forms.ProgressBar(title='', indeterminate=True):
                        selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                    
                    if selected_parameter is None:
                        forms.alert(str_10(lan))
                        sys.exit()

                    if selected_parameter:
                        # [UI:CATEGORY_SELECTION] Display form for category selection
                        selected_categories = forms.SelectFromList.show(
                            categories.keys(),
                            title=str_12(lan),
                            button_name = str_12_(lan),
                            multiselect=True
                        )
                        if selected_categories is None:
                            forms.alert(str_10(lan))
                            sys.exit()

                        # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories to functions
                        converted_categories = {
                            category: categories[category]
                            for category in selected_categories
                        }

                        all_selected_ids = [] 

                        # [SCRIPT:SEARCH_ELEMENTS] Search for elements with any parameter value 
                        for category_name, get_element_ids_func in converted_categories.items():
                            table_data, selected_ids = category_id_param(category_name, get_element_ids_func, selected_parameter)
                            all_selected_ids.extend(selected_ids)  
                        
                        if not all_selected_ids:
                            forms.alert(str_18(lan))
                        else:
                            # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit
                            revit_elements = List[DB.ElementId]()
                            for element_id in all_selected_ids:
                                revit_elements.Add(element_id)
                            revit.uidoc.Selection.SetElementIds(revit_elements)
                            revit.uidoc.ShowElements(revit_elements)
                            
                            # [SCRIPT:COLLECT_ELEMENT_DATA] Collect data for selected elements
                            element_ids_list, element_names, parameters, values = collect_element_data(
                                all_selected_ids,
                                selected_parameter
                            )
                            
                            # [SCRIPT:CREATE_DATA_TABLE] Create the data table
                            headers = [str_21(lan), str_23(lan), str_24(lan), str_17(lan)]
                            data = [
                                element_ids_list,
                                element_names,
                                parameters,
                                values
                            ]
                            editable = [False, False, False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                    else:
                        forms.alert(str_19(lan))
                
                # [SCRIPT:SPECIFIC_PARAMETER_VALUE] Handle "Select Elements with a Specific Parameter Value"
                if result == TaskDialogResult.CommandLink2:
                    """
                    This function handles the event when the "Select Elements with a Specific Parameter Value" option is chosen.

                    Workflow:
                    1. Displays a form for the user to select a parameter and categories.
                    2. Filters elements based on the selected parameter and categories.
                    3. Updates the selection in the Revit model to include elements with a specific value for the selected parameter.
                    4. Creates a report table with the collected element data.
                    5. Implements exception handling to ensure the form remains stable in case of errors.

                    Key Features:
                    - Allows filtering elements based on the existence of a specific parameter value.
                    - Updates the UI to reflect the selected elements and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """
                    
                    # [SCRIPT:CATEGORIES] Define categories for search           
                    categories = {
                            'Doors': Doors,
                            'Windows': Windows,
                            'Walls': Walls,
                            'AirTerminals': AirTerminals,
                            'Doors': Doors,
                            'CableTrayFittings': CableTrayFittings,
                            'CableTrays': CableTrays,
                            'Casework': Casework,
                            'Ceilings': Ceilings,
                            'Columns': Columns,
                            'CommunicationDevices': CommunicationDevices,
                            'ConduitFitting': ConduitFitting,
                            'Conduit': Conduit,
                            'CurtainWallPanels': CurtainWallPanels,
                            'CurtainWallMullions': CurtainWallMullions,
                            'DataDevices': DataDevices,
                            'DuctAccessory': DuctAccessory,
                            'DuctFitting': DuctFitting,
                            'DuctInsulations': DuctInsulations,
                            'DuctLinings': DuctLinings,
                            'DuctCurves': DuctCurves,
                            'ElectricalEquipment': ElectricalEquipment,
                            'ElectricalFixtures': ElectricalFixtures,
                            'FireAlarmDevices': FireAlarmDevices,
                            'FlexDuctCurves': FlexDuctCurves,
                            'FlexPipeCurves': FlexPipeCurves,
                            'Floors': Floors,
                            'Furniture': Furniture,
                            'FurnitureSystems': FurnitureSystems,
                            'GenericModel': GenericModel,
                            'LightingDevices': LightingDevices,
                            'LightingFixtures': LightingFixtures,
                            'MechanicalEquipment': MechanicalEquipment,
                            'NurseCallDevices': NurseCallDevices,
                            'PipeAccessory': PipeAccessory,
                            'PipeFitting': PipeFitting,
                            'PipeInsulations': PipeInsulations,
                            'PipeCurves': PipeCurves,
                            'Planting': Planting,
                            'PlumbingFixtures': PlumbingFixtures,
                            'StairsRailing': StairsRailing,
                            'Ramps': Ramps,
                            'Roofs': Roofs,
                            'Rooms': Rooms,
                            'SecurityDevices': SecurityDevices,
                            'Site': Site,
                            'SpecialityEquipment': SpecialityEquipment,
                            'Sprinklers': Sprinklers,
                            'Stairs': Stairs,
                            'AreaRein': AreaRein,
                            'StructuralColumns': StructuralColumns,
                            'StructConnections': StructConnections,
                            'StructuralFoundation': StructuralFoundation,
                            'StructuralFraming': StructuralFraming,
                            'PathRein': PathRein,
                            'Rebar': Rebar,
                            'StructuralStiffener': StructuralStiffener,
                            'StructuralTruss': StructuralTruss,
                            'TelephoneDevices': TelephoneDevices,
                        }
                    
                    # [UI:PARAMETER_FORM] Display form for parameter selection
                    icon_path = pvalue_icon()
                    search_image_path = pvalue_back()
                    ok_icon_path = ok_icon()
                    cancel_icon_path = cancel_icon()
                    parameter_label = str_11(lan)
                    window_name = str_6(lan)
                    url = parsweb(wurl)
                    with forms.ProgressBar(title='', indeterminate=True):
                        selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                    
                    if selected_parameter is None:
                        forms.alert(str_10(lan))
                        sys.exit()
                    
                    if selected_parameter:
                        # [UI:CATEGORY_SELECTION] Display form for category selection
                        selected_categories = forms.SelectFromList.show(
                            categories.keys(),
                            title=str_12(lan),
                            button_name = str_12_(lan),
                            multiselect=True
                        )

                        if selected_categories is None:
                            forms.alert(str_10(lan))
                            sys.exit()

                        # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories to functions
                        converted_categories = {
                            category: categories[category]
                            for category in selected_categories
                        }

                        all_selected_element_ids = []  

                        # [SCRIPT:SEARCH_ELEMENTS] Search for elements with specific parameter value
                        for category_name, get_element_ids_func in converted_categories.items():
                            element_ids = get_element_ids_func()
                            for element_id in element_ids:
                                element = revit.doc.GetElement(element_id)
                                parameter = element.LookupParameter(selected_parameter)
                                if parameter and parameter.HasValue:
                                    all_selected_element_ids.append(element_id.IntegerValue)  
                        if not all_selected_element_ids:
                            forms.alert(str_18(lan))
                        else:
                            # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit
                            element_id_objects = [ElementId(id) for id in all_selected_element_ids]
                            element_id_collection = List[ElementId](element_id_objects)
                            revit.uidoc.Selection.SetElementIds(element_id_collection)
                            revit.uidoc.ShowElements(element_id_collection)
                            
                            # [SCRIPT:COLLECT_ELEMENT_DATA] Collect data for selected elements
                            element_ids_list, element_names, parameters, values = collect_element_data(
                                all_selected_element_ids,
                                selected_parameter
                            )
                            
                            # [SCRIPT:CREATE_DATA_TABLE] Create the data table
                            headers = [str_21(lan), str_23(lan), str_24(lan), str_17(lan)]
                            data = [
                                element_ids_list,
                                element_names,
                                parameters,
                                values
                            ]
                            editable = [False, False, False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                
                # [SCRIPT:NO_PARAMETER_VALUE] Handle "Select Elements with No Parameter Value"
                if result == TaskDialogResult.CommandLink3:
                    """
                    This function handles the event when the "Select Elements with No Parameter Value" option is chosen.

                    Workflow:
                    1. Displays a form for the user to select a parameter and categories.
                    2. Filters elements based on the selected parameter and categories.
                    3. Updates the selection in the Revit model to include elements with no value for the selected parameter.
                    4. Creates a report table with the collected element data.
                    5. Implements exception handling to ensure the form remains stable in case of errors.

                    Key Features:
                    - Allows filtering elements based on the absence of a parameter value.
                    - Updates the UI to reflect the selected elements and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """

                    # [SCRIPT:CATEGORIES] Define categories for search          
                    categories = {
                                'Doors': Doors,
                                'Windows': Windows,
                                'Walls': Walls,
                                'AirTerminals': AirTerminals,
                                'Doors': Doors,
                                'CableTrayFittings': CableTrayFittings,
                                'CableTrays': CableTrays,
                                'Casework': Casework,
                                'Ceilings': Ceilings,
                                'Columns': Columns,
                                'CommunicationDevices': CommunicationDevices,
                                'ConduitFitting': ConduitFitting,
                                'Conduit': Conduit,
                                'CurtainWallPanels': CurtainWallPanels,
                                'CurtainWallMullions': CurtainWallMullions,
                                'DataDevices': DataDevices,
                                'DuctAccessory': DuctAccessory,
                                'DuctFitting': DuctFitting,
                                'DuctInsulations': DuctInsulations,
                                'DuctLinings': DuctLinings,
                                'DuctCurves': DuctCurves,
                                'ElectricalEquipment': ElectricalEquipment,
                                'ElectricalFixtures': ElectricalFixtures,
                                'FireAlarmDevices': FireAlarmDevices,
                                'FlexDuctCurves': FlexDuctCurves,
                                'FlexPipeCurves': FlexPipeCurves,
                                'Floors': Floors,
                                'Furniture': Furniture,
                                'FurnitureSystems': FurnitureSystems,
                                'GenericModel': GenericModel,
                                'LightingDevices': LightingDevices,
                                'LightingFixtures': LightingFixtures,
                                'MechanicalEquipment': MechanicalEquipment,
                                'NurseCallDevices': NurseCallDevices,
                                'PipeAccessory': PipeAccessory,
                                'PipeFitting': PipeFitting,
                                'PipeInsulations': PipeInsulations,
                                'PipeCurves': PipeCurves,
                                'Planting': Planting,
                                'PlumbingFixtures': PlumbingFixtures,
                                'StairsRailing': StairsRailing,
                                'Ramps': Ramps,
                                'Roofs': Roofs,
                                'Rooms': Rooms,
                                'SecurityDevices': SecurityDevices,
                                'Site': Site,
                                'SpecialityEquipment': SpecialityEquipment,
                                'Sprinklers': Sprinklers,
                                'Stairs': Stairs,
                                'AreaRein': AreaRein,
                                'StructuralColumns': StructuralColumns,
                                'StructConnections': StructConnections,
                                'StructuralFoundation': StructuralFoundation,
                                'StructuralFraming': StructuralFraming,
                                'PathRein': PathRein,
                                'Rebar': Rebar,
                                'StructuralStiffener': StructuralStiffener,
                                'StructuralTruss': StructuralTruss,
                                'TelephoneDevices': TelephoneDevices,
                            }
                    
                    # [UI:PARAMETER_FORM] Display form for parameter selection
                    icon_path = pvalue_icon()
                    search_image_path = pvalue_back()
                    ok_icon_path = ok_icon()
                    cancel_icon_path = cancel_icon()
                    parameter_label = str_11(lan)
                    window_name = str_8(lan)
                    url = parsweb(wurl)
                    with forms.ProgressBar(title='', indeterminate=True):
                        selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                    
                    if selected_parameter is None:
                        forms.alert(str_10(lan))
                        sys.exit()
                    
                    # [UI:CATEGORY_SELECTION] Display form for category selection
                    selected_categories = forms.SelectFromList.show(
                        categories.keys(),
                        title=str_12(lan),
                        button_name = str_12_(lan),
                        multiselect=True
                    )

                    if selected_categories is None:
                        forms.alert(str_10(lan))
                        sys.exit()

                    # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories to functions
                    converted_categories = {
                        category: categories[category]
                        for category in selected_categories
                    }

                    all_selected_element_ids = []  

                    # [SCRIPT:SEARCH_ELEMENTS] Search for elements with no parameter value
                    for category_name, get_element_ids_func in converted_categories.items():
                        selected_element_ids = category_id_param3(category_name, get_element_ids_func, selected_parameter)
                        all_selected_element_ids.extend(selected_element_ids)
                    
                    if not all_selected_element_ids:
                        forms.alert(str_18(lan))
                    else:
                        # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit
                        element_id_objects = [ElementId(id) for id in all_selected_element_ids]
                        element_id_collection = List[ElementId](element_id_objects)
                        revit.uidoc.Selection.SetElementIds(element_id_collection)
                        revit.uidoc.ShowElements(element_id_collection)
                            
                        # [SCRIPT:COLLECT_ELEMENT_DATA] Collect data for selected elements
                        element_ids_list, element_names, parameters, values = collect_element_data(
                            all_selected_element_ids,
                            selected_parameter
                        )
                            
                        # [SCRIPT:CREATE_DATA_TABLE] Create the data table
                        headers = [str_21(lan), str_23(lan), str_24(lan), str_17(lan)]
                        data = [
                            element_ids_list,
                            element_names,
                            parameters,
                            values
                        ]
                        editable = [False, False, False, False]
                        self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_22(lan))
                self.Show()

            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:All Elements in Selected Categories] Category Filtering
        #
        # Handles selection and filtering of elements based on categories:
        # - Filters elements by category
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:CATEGORY_FILTERING]
        elif button_text == tool_str_9(lan):
            """
            This script handles the "Select All Elements in Selected Categories" functionality 
            within a Revit project in the BIM Pars app.

            Workflow:
            1. Hides the Windows Form temporarily.
            2. Imports necessary modules, including Revit API, pyRevit, and system-related modules.
            3. Collects all available built-in categories from the Revit document.
            4. Displays a user input form for selecting multiple categories to filter elements.
            5. Iterates through the selected categories to collect all corresponding elements.
            6. Selects and highlights the selected elements in the Revit model.
            7. Generates a clickable report linking element IDs to the report output.
            8. Collects element information (ID, name, category) and organizes it into a read-only data table.
            9. Displays the collected data in a report tab.
            10. Restores the Windows Form after execution.
            11. Implements exception handling to ensure the form is always restored, even in case of errors.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('RevitAPI')
                import Autodesk.Revit.DB as DB
                from Autodesk.Revit.DB import ElementId, FilteredElementCollector, BuiltInCategory
                from System.Collections.Generic import List
                from pyrevit import forms, script, revit
                import os
                import sys
                import getpass
                from datetime import datetime  
                sys.path.append(os.path.dirname(__file__))
                from structure.root import allelcat_icon, lan_path, cuslogo_path, logo_path
                from UI.strings_all_elements_in_selected_categories import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_h1, str_h2

                lan = lan_path()

                # [SCRIPT:HELPER_FUNCTION] Collect element data
                def collect_element_data(elements):
                    element_ids = []
                    element_names = []
                    element_categories = []
                    
                    for element in elements:
                        try:
                            element_ids.append(str(element.Id.IntegerValue))
                            element_names.append(element.Name if hasattr(element, 'Name') else '')
                            category = element.Category
                            element_categories.append(category.Name if category else '')
                            
                        except Exception as e:
                            MessageBox.Show(str(e),str_6(lan))
                            sys.exit()
                    
                    return element_ids, element_names, element_categories

                try:
                    # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                    doc = __revit__.ActiveUIDocument.Document
                    uidoc = __revit__.ActiveUIDocument
                    output = script.get_output()
                    
                    # [SCRIPT:ALL_CATEGORIES] Collect all built-in categories
                    all_categories = {}
                    categories = BuiltInCategory.GetValues(BuiltInCategory)
                    for category in categories:
                        category_id = category
                        category_name = category.ToString()
                        if category_name != "INVALID":
                            element_count = len(FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements())
                            if element_count > 0:
                                all_categories[category_name] = category_id
                    
                    # [UI:CATEGORY_SELECTION] Display form for category selection
                    selected_categories = forms.SelectFromList.show(
                        all_categories.keys(),
                        title=str_1(lan),
                        multiselect=True,
                        button_name = str_2(lan)
                    )

                    if selected_categories is None:
                        forms.alert(str_3(lan))
                        sys.exit()
                    
                    # [SCRIPT:OBTAIN_ELEMENTS] Collect elements from selected categories
                    selected_elements = []
                    for category_name in selected_categories:
                        category_id = all_categories[category_name]
                        elements = FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements()
                        selected_elements.extend(elements)

                    # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit
                    element_ids = List[ElementId](selected_element.Id for selected_element in selected_elements)
                    element_ids = element_ids  
                    doc = revit.doc
                    element_id_objects = List[DB.ElementId]()
                    for element_id in element_ids:
                        element_id_objects.Add(element_id)
                    revit.uidoc.Selection.SetElementIds(element_id_objects)
                    revit.uidoc.ShowElements(element_id_objects)
                    
                    # [SCRIPT:REPORT] Generate report for selected elements
                    for category_name in selected_categories:
                        category_id = all_categories[category_name]
                        elements = FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements()
                        element_ids = [element.Id for element in elements]
                        for element_id in element_ids:
                            clickable_id = output.linkify(element_id)

                    # [SCRIPT:CREATE_DATA_TABLE] Create the data table
                    element_ids_list, element_names, element_categories = collect_element_data(selected_elements)
                    headers = [str_7(lan), str_8(lan), str_9(lan)]
                    data = [
                        element_ids_list,
                        element_names,
                        element_categories
                    ]
                    editable = [False, False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                    
                    sys.exit()

                except StopIteration:
                    pass
                except Exception as e:
                    MessageBox.Show(str(e),str_6(lan))
                except SystemExit:
                    pass
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_6(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:All Elements in Selected Views] View Filtering
        #
        # Handles selection and filtering of elements based on views:
        # - Filters elements by view
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:VIEW_FILTERING]
        elif button_text == tool_str_10(lan):
            """
            This script handles the "Select All Elements in Selected Views" functionality 
            within a Revit project in the BIM Pars app.

            Workflow:
            1. Hides the Windows Form temporarily.
            2. Imports necessary modules, including Revit API, pyRevit, and system-related libraries.
            3. Displays a user input form for selecting multiple views.
            4. Iterates through the selected views to collect all corresponding elements.
            5. Selects and highlights the elements in each selected view.
            6. Displays a task dialog for each view, prompting the user to choose whether to show the elements or continue.
            7. Collects element information (ID, name, category, view) for all elements in the selected views.
            8. Organizes the collected data into a read-only data table.
            9. Displays the collected data in a report tab.
            10. Restores the Windows Form after execution.
            11. Implements exception handling to ensure the form is always restored, even in case of errors.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('RevitAPI')
                from Autodesk.Revit.DB import ElementId
                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
                from pyrevit import forms
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.scripts.select import select_all_elements_of_view
                from structure.root import  lan_path
                from UI.strings_all_elements_in_selected_views import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11

                lan = lan_path()

                # [SCRIPT:HELPER_FUNCTION] Collect element data
                def collect_element_data(element_ids, view):
                    element_ids_list = []
                    element_names = []
                    element_categories = []
                    view_names = []
                    
                    for element_id in element_ids:
                        try:
                            element = __revit__.ActiveUIDocument.Document.GetElement(element_id)
                            if element:
                                element_ids_list.append(str(element_id.IntegerValue))
                                element_names.append(element.Name if hasattr(element, 'Name') else '')
                                category = element.Category
                                element_categories.append(category.Name if category else '')
                                view_names.append(view.Name if view else '')  
                        except Exception as e:
                            MessageBox.Show(str(e),str_7(lan))
                            sys.exit()
                            
                    return element_ids_list, element_names, element_categories, view_names

                try:
                    # [UI:VIEW_SELECTION] Display form for view selection
                    selected_views = forms.select_views(title=str_1(lan), button_name = str_2(lan))
                    if selected_views is None:
                        forms.alert(str_3(lan))
                        sys.exit()
                    
                    # [SCRIPT:SELECT_ELEMENTS] Select all elements of view
                    if selected_views:
                        uidoc = __revit__.ActiveUIDocument
                        all_element_ids = []
                        all_element_names = []
                        all_categories = []
                        all_view_names = []
                        
                        for view in selected_views:
                            element_ids = select_all_elements_of_view(uidoc, view)
                            uidoc.ActiveView = view  
                            uidoc.Selection.SetElementIds(element_ids)

                            # [SCRIPT:COLLECT_ELEMENT_DATA] Collect data for table
                            ids, names, cats, views = collect_element_data(element_ids, view)
                            all_element_ids.extend(ids)
                            all_element_names.extend(names)
                            all_categories.extend(cats)
                            all_view_names.extend(views)
                            
                            # [UI:TASK_DIALOG] Display task dialog for user options
                            title = str_4(lan)
                            dialog = TaskDialog(title)
                            dialog.MainInstruction = str_5(lan)
                            dialog.MainContent = str_6(lan)
                            dialog.TitleAutoPrefix = False
                            dialog.AllowCancellation = True
                            dialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No
                            dialog.DefaultButton = TaskDialogResult.None
                            result = dialog.Show()
                            
                            if result == TaskDialogResult.Yes:
                                uidoc.ShowElements(element_ids)
                            elif result == TaskDialogResult.No:
                                continue
                            elif result == TaskDialogResult.Cancel:
                                forms.alert(str_3(lan))
                                sys.exit()
                        
                        # [SCRIPT:CREATE_DATA_TABLE] Create table with all collected data
                        headers = [str_8(lan), str_9(lan), str_10(lan), str_11(lan)]
                        data = [
                            all_element_ids,
                            all_element_names,
                            all_categories,
                            all_view_names
                        ]
                        editable = [False, False, False, False]
                        self.create_report_tab(headers, data, editable, title=button_text)

                except StopIteration:
                    pass
                except Exception as e:
                    MessageBox.Show(str(e),str_7(lan))
                except SystemExit:
                    pass
                                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_7(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:All Elements on Selected Levels] Level Filtering
        #
        # Handles selection and filtering of elements based on levels:
        # - Filters elements by level
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:LEVEL_FILTERING]
        elif button_text == tool_str_11(lan):
            """
            This script handles the "Select All Elements on Selected Levels" functionality 
            within a Revit project in the BIM Pars app.

            Workflow:
            1. Hides the Windows Form temporarily.
            2. Imports necessary modules, including Revit API, pyRevit, and system-related libraries.
            3. Displays a custom Windows Form with buttons for selecting elements on levels in the current view or across multiple views.
            4. Allows the user to select levels and elements associated with them in the active view.
            5. Collects information about the selected elements, including their ID, name, level, category, and view.
            6. Highlights the selected elements in the Revit model.
            7. Displays a report showing the collected data in a tabular format.
            8. Implements error handling to ensure the form is always restored, even in case of errors or user cancellations.
            9. Restores the Windows Form after execution.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                clr.AddReference('System')
                import System.Windows.Forms as WinForms
                from System.Windows.Forms import Form, Button, Label, Cursors
                from System.Drawing import Icon, Point, Color, FontStyle, Size, Font, GraphicsUnit
                from RevitServices.Persistence import DocumentManager
                import os
                import sys
                import webbrowser
                sys.path.append(os.path.dirname(__file__))
                from structure.root import wurl_path, level_icon, level_button, levelview_button, lan_path
                from UI.strings_all_elements_on_selected_levels import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                str_17, str_18, str_19, str_20, str_21)
                from UI.url import parsweb

                lan = lan_path()
                wurl= wurl_path()

                # [SCRIPT:LEVEL_CLASS] Define custom Windows Form
                class LEVEL(Form):
                    # [SCRIPT:INITIALIZATION] Initialize the form
                    def __init__(self, doc):
                        self.Text = str_1(lan)
                        self.Width = 350
                        self.Height = 300
                        self.BackColor = Color.White
                        self.doc = doc
                        self.CenterToScreen()
                        self.Icon = Icon(level_icon())
                        self.elements_info = []

                        # [UI:LABEL1] Add first label
                        self.label1 = Label()
                        self.label1.Text = str_2(lan)
                        self.label1.AutoSize = True
                        self.label1.Left = 150
                        self.label1.Top = 35
                        self.label1.ForeColor = Color.Black
                        self.label1.MaximumSize = Size(150,100)
                        self.Controls.Add(self.label1)

                        # [UI:LABEL2] Add second label
                        self.label2 = Label()
                        self.label2.Text = str_3(lan)
                        self.label2.AutoSize = True
                        self.label2.Left = 150
                        self.label2.Top = 135
                        self.label2.ForeColor = Color.Black
                        self.label2.MaximumSize = Size(150,100)
                        self.Controls.Add(self.label2)

                        # [UI:BUTTON1] Add first button
                        self.button = Button()
                        self.button.Size = Size(100, 100)
                        self.button.Location = Point(15, 15)
                        icon_path = level_button()
                        self.button.Image = Icon(icon_path).ToBitmap()
                        self.button.Click += self.button_Click
                        self.Controls.Add(self.button)

                        # [UI:BUTTON2] Add second button
                        self.button2 = Button()
                        self.button2.Size = Size(100, 100)
                        self.button2.Location = Point(15, 115)
                        icon2_path = levelview_button()
                        self.button2.Image = Icon(icon2_path).ToBitmap()
                        self.button2.Click += self.button2_Click
                        self.Controls.Add(self.button2)
                
                        # [UI:CREATED_BY_LABEL] Add "Created by" label
                        self.created_by_label = Label()
                        self.created_by_label.AutoSize = True
                        self.created_by_label.Text = "BIM Pars"
                        self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                        self.created_by_label.ForeColor = Color.Blue
                        self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                        self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                        self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                        self.created_by_label.Cursor = Cursors.Hand  
                        self.created_by_label.Click += self.Label_Click
                        self.Controls.Add(self.created_by_label)

                    # [SCRIPT:LABEL_CLICK] Handle "Created by" label click
                    def Label_Click(self, sender, event):
                        url = parsweb(wurl)
                        webbrowser.open(url)
                        
                    # [SCRIPT:CURRENT_VIEW] Handle "Current View" button click
                    def button_Click(self, sender, e):
                        try:
                            # [SCRIPT:IMPORTS] Import necessary modules
                            from Autodesk.Revit.DB import FilteredElementCollector, ElementLevelFilter, LogicalOrFilter, ElementId
                            from System.Collections.Generic import List
                            from pyrevit import forms, revit
                            
                            # [SCRIPT:ACTIVE_VIEW] Get active view and document
                            view = __revit__.ActiveUIDocument.ActiveView
                            doc = __revit__.ActiveUIDocument.Document
                            level_ids = set()
                            elements = FilteredElementCollector(doc, view.Id).WhereElementIsNotElementType().ToElements()
                            view_level_ids = set(element.LevelId for element in elements)
                            level_ids.update(view_level_ids)
                            level_ids_list = list(level_ids)
                            
                            # [SCRIPT:LEVEL_CHECK] Check if there are levels available
                            if len(level_ids_list) == 1:
                                forms.alert(str_4(lan))
                                return []
                            else:
                                # [UI:LEVEL_SELECTION] Display form for level selection
                                selected_levels = forms.select_levels(
                                    title= str_5(lan),
                                    button_name= str_6(lan),
                                    width=500,
                                    multiple=True,
                                    filterfunc=lambda level: level.Id in level_ids_list,
                                    doc=doc,
                                    use_selection=False
                                )

                                if selected_levels:
                                    doc = __revit__.ActiveUIDocument.Document
                                    view = __revit__.ActiveUIDocument.ActiveView
                                    level_filters = [ElementLevelFilter(level.Id) for level in selected_levels]
                                    combined_filter = LogicalOrFilter(level_filters)
                                    elements = FilteredElementCollector(doc, view.Id).WherePasses(combined_filter).ToElements()
                                    
                                    # [SCRIPT:STORE_ELEMENT_INFO] Store element information
                                    self.elements_info = []
                                    for element in elements:
                                        try:
                                            level = doc.GetElement(element.LevelId)
                                            element_info = {
                                                'element_id': element.Id.IntegerValue,
                                                'element_name': element.Name,
                                                'level_name': level.Name if level else str_20(lan),
                                                'view_name': view.Name,
                                                'category': element.Category.Name if element.Category else str_21(lan)
                                            }
                                            self.elements_info.append(element_info)
                                        except:
                                            continue

                                    # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit
                                    element_ids = [element.Id for element in elements]
                                    element_ids_collection = List[ElementId](element_ids)
                                    __revit__.ActiveUIDocument.Selection.SetElementIds(element_ids_collection)
                                    revit.uidoc.ShowElements(element_ids_collection)
                                    
                                    # [SCRIPT:ELEMENT_CHECK] Check if any elements were selected
                                    if len(element_ids_collection) ==0:
                                        forms.alert(str_7(lan))
                                else:
                                    forms.alert(str_8(lan))
                            self.Close()

                        except StopIteration:
                            pass
                        except Exception:
                            pass            
                        except SystemExit:
                            pass

                    # [SCRIPT:ANY_VIEW] Handle "Any View" button click
                    def button2_Click(self, sender, e):
                        try:
                            # [SCRIPT:IMPORTS] Import necessary modules
                            from Autodesk.Revit.DB import FilteredElementCollector, ElementLevelFilter, ElementId
                            from System.Collections.Generic import List
                            from pyrevit import forms, revit
                            
                            # [UI:VIEW_SELECTION] Display form for view selection
                            selected_views = forms.select_views(title=str_9(lan), button_name = str_6(lan))
                            if selected_views:
                                # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                                doc = __revit__.ActiveUIDocument.Document
                                level_ids = set()

                                # [SCRIPT:COLLECT_LEVEL_IDS] Collect level IDs from selected views
                                for view in selected_views:
                                    elements = FilteredElementCollector(doc, view.Id).WhereElementIsNotElementType().ToElements()
                                    view_level_ids = set(element.LevelId for element in elements)
                                    level_ids.update(view_level_ids)
                                level_ids_list = list(level_ids)
                                
                                # [SCRIPT:LEVEL_CHECK] Check if there are levels available for selection
                                if len(level_ids_list) == 1:
                                    forms.alert(str_4(lan))
                                    return []
                                else:
                                    # [UI:LEVEL_SELECTION] Display form for level selection
                                    selected_levels = forms.select_levels(
                                        title=str_5(lan),
                                        button_name=str_6(lan),
                                        width=500,
                                        multiple=True,
                                        filterfunc=lambda level: level.Id in level_ids_list,
                                        doc=doc,
                                        use_selection=False
                                    )

                                    if selected_levels:
                                        self.elements_info = []
                                        element_ids = []
                                        
                                        # [SCRIPT:SEARCH_ELEMENTS] Search for elements in selected levels and views
                                        for level in selected_levels:
                                            level_filter = ElementLevelFilter(level.Id)
                                            for view in selected_views:
                                                elements = FilteredElementCollector(doc, view.Id).WherePasses(level_filter).ToElements()
                                                
                                                for element in elements:
                                                    try:
                                                        element_info = {
                                                            'element_id': element.Id.IntegerValue,
                                                            'element_name': element.Name,
                                                            'level_name': level.Name,
                                                            'view_name': view.Name,
                                                            'category': element.Category.Name if element.Category else str_21(lan)
                                                        }
                                                        self.elements_info.append(element_info)
                                                        element_ids.append(element.Id)
                                                    except:
                                                        continue

                                        # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit
                                        element_ids_collection = List[ElementId](element_ids)
                                        if len(element_ids_collection) > 0:
                                            __revit__.ActiveUIDocument.Selection.SetElementIds(element_ids_collection)
                                            revit.uidoc.ShowElements(element_ids_collection)
                                        else:
                                            forms.alert(str_11(lan))
                                    else:
                                        forms.alert(str_12(lan))
                            else:
                                forms.alert(str_13(lan))
                            
                            self.Close()
                            
                        except StopIteration:
                            pass
                        except Exception:
                            pass            
                        except SystemExit:
                            pass
                        
                    # [SCRIPT:GET_COLLECTED_ELEMENTS] Return collected element information
                    def get_collected_elements(self):
                        """Returns the collected element information"""
                        return self.elements_info

                    # [SCRIPT:ON_CLOSED] Handle form closing
                    def OnClosed(self, e):
                        self.Dispose()

                # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                doc = DocumentManager.Instance.CurrentDBDocument
                form = None
                elements_data = []

                if 'form' not in globals():
                    pass
                else:
                    # [UI:SHOW_FORM] Display the form and collect element data
                    form = LEVEL(doc)
                    form.ShowDialog()
                    elements_data = form.get_collected_elements()
                    
                    if elements_data:
                        # [SCRIPT:PREPARE_DATA] Prepare data for the report table
                        headers = [str_15(lan), str_16(lan), str_19(lan), str_18(lan), str_17(lan)]
                        
                        # [SCRIPT:INITIALIZE_LISTS] Initialize empty lists for each column
                        ids = []
                        names = []
                        levels = []
                        views = []
                        categories = []
                        
                        # [SCRIPT:POPULATE_LISTS] Populate the column lists
                        for element in elements_data:
                            ids.append(str(element['element_id']))
                            names.append(str(element['element_name']))
                            levels.append(str(element['level_name']))
                            views.append(str(element['view_name']))
                            categories.append(str(element['category']))
                        
                        # [SCRIPT:COMBINE_DATA] Combine all columns
                        data = [
                            ids,
                            names,
                            levels,
                            views,
                            categories
                        ]
                        
                        # [SCRIPT:CREATE_REPORT] Create the report table
                        editable = [False, False, False, False, False]
                        self.create_report_tab(headers, data, editable, title=button_text)

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_14(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Ownership of Elements] Ownership Filtering
        #
        # Handles selection and filtering of elements based on ownership:
        # - Filters elements by owner
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:OWNERSHIP_FILTERING]
        elif button_text == tool_str_12(lan):
            """
            This script handles the "Ownership of Elements" functionality within a Revit project in the BIM Pars app.

            Workflow:
            1. Hides the Windows Form temporarily.
            2. Imports necessary modules, including Revit API, pyRevit, and system-related libraries.
            3. Displays a custom Windows Form with buttons for selecting elements based on ownership in the current view.
            4. Allows the user to select elements owned by the current user or another user in a workshared Revit model.
            5. Collects information about the selected elements, including their ID, name, category, and owner.
            6. Highlights the selected elements in the Revit model.
            7. Displays a report showing the collected data in a tabular format, including element ID, name, category, and owner.
            8. Implements error handling to ensure the form is always restored, even in case of errors or user cancellations.
            9. Restores the Windows Form after execution.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                clr.AddReference('System')
                import System.Windows.Forms as WinForms
                from System.Windows.Forms import Form, Button, Label, Cursors
                from System.Drawing import Icon, Point, Color, FontStyle, Size, Font, GraphicsUnit
                from RevitServices.Persistence import DocumentManager
                from pyrevit import forms, revit
                import Autodesk.Revit.DB as DB
                from System.Collections.Generic import List
                import os
                import sys
                import webbrowser
                sys.path.append(os.path.dirname(__file__))
                from structure.root import wurl_path,lan_path
                from UI.strings_all_elements_based_on_ownership import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16
                from UI.url import parsweb
                
                lan = lan_path()
                wurl= wurl_path()

                # [SCRIPT:OWNERFORM_CLASS] Define custom Windows Form
                class OwnerForm(Form):
                    def __init__(self, doc):
                        self.Text = str_1(lan)
                        self.Width = 350
                        self.Height = 300
                        self.BackColor = Color.White
                        self.doc = doc
                        self.CenterToScreen()
                        sys.path.append(os.path.dirname(__file__))
                        from structure.root import owned_icon, own_button, xpown_button
                        self.Icon = Icon(owned_icon())
                        self.elements_info = []

                        # [UI:LABEL1] Add first label
                        self.label1 = Label()
                        self.label1.Text = str_2(lan)
                        self.label1.AutoSize = True
                        self.label1.Left = 150
                        self.label1.Top = 35
                        self.label1.ForeColor = Color.Black
                        self.label1.MaximumSize = Size(150,100)
                        self.label1.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                        self.Controls.Add(self.label1)

                        # [UI:LABEL2] Add second label
                        self.label2 = Label()
                        self.label2.Text = str_3(lan)
                        self.label2.AutoSize = True
                        self.label2.Left = 150
                        self.label2.Top = 135
                        self.label2.ForeColor = Color.Black
                        self.label2.MaximumSize = Size(150,100)
                        self.label2.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                        self.Controls.Add(self.label2)

                        # [UI:BUTTON1] Add first button
                        self.button = Button()
                        self.button.Size = Size(100, 100)
                        self.button.Location = Point(15, 15)
                        icon_path = own_button()
                        self.button.Image = Icon(icon_path).ToBitmap()
                        self.button.Click += self.button_Click
                        self.button.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                        self.Controls.Add(self.button)

                        # [UI:BUTTON2] Add second button
                        self.button2 = Button()
                        self.button2.Size = Size(100, 100)
                        self.button2.Location = Point(15, 115)
                        icon2_path = xpown_button()
                        self.button2.Image = Icon(icon2_path).ToBitmap()
                        self.button2.Click += self.button2_Click
                        self.button2.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                        self.Controls.Add(self.button2)
                
                        # [UI:CREATED_BY_LABEL] Add "Created by" label
                        self.created_by_label = Label()
                        self.created_by_label.AutoSize = True
                        self.created_by_label.Text = "BIM Pars"
                        self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                        self.created_by_label.ForeColor = Color.Blue
                        self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                        self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                        self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                        self.created_by_label.Cursor = Cursors.Hand  
                        self.created_by_label.Click += self.Label_Click
                        self.Controls.Add(self.created_by_label)

                    # [SCRIPT:LABEL_CLICK] Handle "Created by" label click
                    def Label_Click(self, sender, event):
                        url = parsweb(wurl)
                        webbrowser.open(url)
                        
                    # [SCRIPT:CURRENT_USER_ELEMENTS] Handle "Current User Elements" button click
                    def button_Click(self, sender, e):
                        try:
                            # [SCRIPT:IMPORTS] Import necessary modules
                            from Autodesk.Revit.DB import FilteredElementCollector, ElementId
                            from System.Collections.Generic import List
                            from pyrevit import revit, forms
                            
                            # [SCRIPT:RESET_ELEMENTS_INFO] Reset elements info
                            self.elements_info = []  
                            
                            if revit.doc.IsWorkshared:
                                # [SCRIPT:ACTIVE_VIEW] Get active view
                                active_view = revit.doc.ActiveView
                                collector = FilteredElementCollector(revit.doc, active_view.Id)
                                elements = collector.ToElements()
                                current_user_name = revit.doc.Application.Username
                                filtered_element_ids = []
                                
                                # [SCRIPT:FILTER_ELEMENTS] Filter elements by current user
                                for element in elements:
                                    eh = revit.query.get_history(element)
                                    if eh.owner.strip() == current_user_name:
                                        filtered_element_ids.append(element.Id)
                                        # [SCRIPT:STORE_ELEMENT_INFO] Store element information
                                        try:
                                            element_info = {
                                                'element_id': element.Id.IntegerValue,
                                                'element_name': element.Name,
                                                'category': element.Category.Name if element.Category else str_16(lan),
                                                'owner': current_user_name
                                            }
                                            self.elements_info.append(element_info)
                                        except:
                                            continue

                                # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit
                                if len(filtered_element_ids) > 0:
                                    revit.uidoc.Selection.SetElementIds(List[ElementId](filtered_element_ids))
                                    revit.uidoc.ShowElements(List[ElementId](filtered_element_ids))
                                else:
                                    forms.alert(str_4(lan))
                            else:
                                forms.alert(str_5(lan))
                        except Exception:
                            pass
                        self.Close()

                    # [SCRIPT:OTHER_USER_ELEMENTS] Handle "Other User Elements" button click
                    def button2_Click(self, sender, e):
                        try:
                            # [SCRIPT:IMPORTS] Import necessary modules
                            from Autodesk.Revit.DB import FilteredElementCollector, ElementId
                            from System.Collections.Generic import List
                            from pyrevit import revit, forms
                            
                            # [SCRIPT:RESET_ELEMENTS_INFO] Reset elements info
                            self.elements_info = []  
                            
                            if revit.doc.IsWorkshared:
                                # [SCRIPT:ACTIVE_VIEW] Get active view
                                active_view = revit.doc.ActiveView
                                collector = FilteredElementCollector(revit.doc, active_view.Id)
                                elements = collector.ToElements()
                                owner_names = set()
                                
                                # [SCRIPT:COLLECT_OWNER_NAMES] Collect owner names
                                for element in elements:
                                    eh = revit.query.get_history(element)
                                    owner_name = eh.owner.strip() 
                                    if owner_name:
                                        owner_names.add(owner_name)
                                        
                                if owner_names:
                                    owner_names = list(owner_names)
                                    if len(owner_names) == 1:
                                        selected_owner = owner_names[0]
                                    else:
                                        # [UI:OWNER_SELECTION] Display form for owner selection
                                        selected_owner = forms.SelectFromList.show(owner_names,title=str_7(lan),multiselect=False,button_name=str_6(lan))
                                    
                                    if selected_owner:
                                        filtered_element_ids = []
                                        # [SCRIPT:FILTER_ELEMENTS] Filter elements by selected owner
                                        for element in elements:
                                            eh = revit.query.get_history(element)
                                            if eh.owner.strip() == selected_owner:
                                                filtered_element_ids.append(element.Id)
                                                # [SCRIPT:STORE_ELEMENT_INFO] Store element information
                                                try:
                                                    element_info = {
                                                        'element_id': element.Id.IntegerValue,
                                                        'element_name': element.Name,
                                                        'category': element.Category.Name if element.Category else str_16(lan),
                                                        'owner': selected_owner
                                                    }
                                                    self.elements_info.append(element_info)
                                                except:
                                                    continue

                                        # [SCRIPT:SELECT_ELEMENTS] Select elements in Revit 
                                        if len(filtered_element_ids) > 0:
                                            revit.uidoc.Selection.SetElementIds(List[ElementId](filtered_element_ids))
                                            revit.uidoc.ShowElements(List[ElementId](filtered_element_ids))
                                        else:
                                            forms.alert(str_8(lan))
                                    else:
                                        forms.alert(str_10(lan))
                                else:
                                    forms.alert(str_9(lan))
                            else:
                                forms.alert(str_5(lan))
                        except Exception:
                            pass
                        self.Close()

                    # [SCRIPT:GET_COLLECTED_ELEMENTS] Return collected element information
                    def get_collected_elements(self):
                        """Returns the collected element information"""
                        return self.elements_info

                    # [SCRIPT:ON_CLOSED] Handle form closing
                    def OnClosed(self, e):
                        self.Dispose()

                # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                doc = DocumentManager.Instance.CurrentDBDocument
                form = None
                elements_data = []

                if 'form' not in globals():
                    pass
                else:
                    # [UI:SHOW_FORM] Display the form and collect element data
                    form = OwnerForm(doc)
                    form.ShowDialog()
                    elements_data = form.get_collected_elements()
                    
                    if elements_data:
                        # [SCRIPT:PREPARE_DATA] Prepare data for the report table
                        headers = [str_12(lan), str_13(lan), str_14(lan), str_15(lan)]
                        
                        # [SCRIPT:INITIALIZE_LISTS] Initialize empty lists for each column
                        ids = []
                        names = []
                        categories = []
                        owners = []
                        
                        # [SCRIPT:POPULATE_LISTS] Populate the column lists
                        for element in elements_data:
                            ids.append(str(element['element_id']))
                            names.append(str(element['element_name']))
                            categories.append(str(element['category']))
                            owners.append(str(element['owner']))
                        
                        # [SCRIPT:COMBINE_DATA] Combine all columns
                        data = [
                            ids,
                            names,
                            categories,
                            owners
                        ]
                        
                        # [SCRIPT:CREATE_REPORT] Create the report table
                        editable = [False, False, False, False]
                        self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_11(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Unbound Rooms] Unbound Rooms Filtering
        #
        # Handles selection and filtering of unbound rooms:
        # - Filters rooms by unbound status
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:UNBOUND_ROOMS]
        elif button_text == tool_str_13(lan):
            """
            This script handles the "Unbound Rooms" functionality within a Revit project in the BIM Pars app.

            Workflow:
            1. Hides the Windows Form temporarily.
            2. Imports necessary modules, including Revit API, pyRevit, and system-related libraries.
            3. Collects all rooms in the Revit document.
            4. Filters out rooms that are unbound (i.e., rooms with zero area).
            5. Selects all unbound rooms in the current Revit model and highlights them in the UI.
            6. Collects data for each unbound room, including element ID and room name.
            7. Creates a report displaying the collected room data in a table format with columns for Element ID and Room Name.
            8. Implements error handling to ensure the form is restored, even in case of errors or user cancellations.
            9. Restores the Windows Form after execution.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                from Autodesk.Revit.DB import BuiltInCategory, FilteredElementCollector, ElementId, BuiltInParameter
                from System.Collections.Generic import List
                from pyrevit import script, revit
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from structure.root import unboundrooms_icon, lan_path, cuslogo_path, logo_path
                from UI.strings_unbound_rooms import str_1, str_2, str_3, str_4, str_5, str_6, str_h1, str_h2

                lan = lan_path()

                try:
                    # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    
                    # [SCRIPT:COLLECT_ROOMS] Collect all rooms
                    rooms = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms)
                    ub_rooms = []

                    # [SCRIPT:FILTER_UNBOUND_ROOMS] Filter unbound rooms
                    for r in rooms:
                        if r.Area > 0:
                            pass
                        else:
                            ub_rooms.append(r)
                            
                    # [SCRIPT:SELECT_UNBOUND_ROOMS] Select unbound rooms
                    collection = List[ElementId]([r.Id for r in ub_rooms])
                    selection = uidoc.Selection
                    selection.SetElementIds(collection)

                    # [SCRIPT:PREPARE_DATA] Prepare data for table
                    element_ids = []
                    room_names = []
                    
                    for room in ub_rooms:
                        element_ids.append(str(room.Id.IntegerValue)) 
                        room_name = room.get_Parameter(BuiltInParameter.ROOM_NAME).AsString()
                        room_names.append(room_name)

                    # [SCRIPT:CREATE_TABLE_DATA] Create table data
                    headers = [str_3(lan), str_4(lan)]  
                    data = [
                        element_ids,
                        room_names
                    ]
                    editable = [False, False]
                    
                    # [SCRIPT:CREATE_REPORT] Create the report tab
                    self.create_report_tab(headers, data, editable, title=button_text)

                except Exception as e:
                    MessageBox.Show(str(e),str_6(lan))

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_6(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Mirrored Doors] Mirrored Doors Filtering
        #
        # Handles selection and filtering of mirrored doors:
        # - Filters doors by mirrored status
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:MIRRORED_DOORS]
        elif button_text == tool_str_14(lan):
            """
            This script handles the "Mirrored Doors" functionality within a Revit project in the BIM Pars app.

            Workflow:
            1. Hides the Windows Form temporarily.
            2. Imports necessary modules, including Revit API, pyRevit, and system-related libraries.
            3. Collects all doors in the Revit document.
            4. Filters out doors that are mirrored.
            5. Selects all mirrored doors in the current Revit model and highlights them in the UI.
            6. Collects data for each mirrored door, including element ID and door name.
            7. Creates a report displaying the collected mirrored door data in a table format with columns for Element ID and Door Name.
            8. Implements error handling to ensure the form is restored, even in case of errors or user cancellations.
            9. Restores the Windows Form after execution.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()
                
                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitAPIUI')
                clr.AddReference("System")
                from Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, ElementId
                from System.Collections.Generic import List
                from pyrevit import forms, revit
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from structure.root import unbounddoors_icon, lan_path
                from UI.strings_mirrored_doors import str_1, str_2, str_3, str_4, str_5, str_6

                lan = lan_path()

                try:
                    # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                    doc = __revit__.ActiveUIDocument.Document
                    uidoc = __revit__.ActiveUIDocument
                    
                    # [SCRIPT:COLLECT_DOORS] Collect all doors
                    collector = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors)
                    doors = collector.WhereElementIsNotElementType().ToElements()
                    mir_doors = []

                    # [SCRIPT:FILTER_MIRRORED_DOORS] Filter mirrored doors
                    for door in doors:
                        try:
                            if door.Mirrored:
                                mir_doors.append(door)
                        except AttributeError:
                            pass  
                    
                    # [SCRIPT:SELECT_DOORS] Select mirrored doors
                    selection = uidoc.Selection
                    collection = List[ElementId]([door.Id for door in mir_doors])
                    selection.SetElementIds(collection)
                    revit.uidoc.ShowElements(collection)
                    
                    # [SCRIPT:PREPARE_DATA] Prepare data for table
                    door_ids = []
                    door_names = []
                    
                    for door in mir_doors:
                        door_ids.append(str(door.Id.IntegerValue))
                        door_names.append(door.Name)
                    
                    # [SCRIPT:CREATE_TABLE_DATA] Create table data
                    headers = [str_3(lan), str_4(lan)]  
                    data = [
                        door_ids,
                        door_names
                    ]
                    editable = [False, False]
                    
                    # [SCRIPT:CREATE_REPORT] Create the report tab
                    self.create_report_tab(headers, data, editable, title=button_text)

                except Exception as e:
                    MessageBox.Show(str(e),str_6(lan))
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_6(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:IDs from Excel] Excel ID Filtering
        #
        # Handles selection and filtering of elements based on IDs from Excel:
        # - Imports element IDs from Excel
        # - Filters elements by imported IDs
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:EXCEL_ID_FILTERING]
        elif button_text == tool_str_15(lan):
            """
            This function handles the event when the "IDs from Excel" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the Excel-based selection operations.
            2. Displays a form with three tabs for different Excel import options:
            - Tab 1: Import Excel file and select elements based on row data.
            - Tab 2: Import Excel file and select elements based on column data.
            - Tab 3: Import Excel file and select elements based on cell data.
            3. Reads element IDs from the selected Excel file and updates the selection in the Revit model.
            4. Creates a report table with the collected element data.
            5. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows selecting elements by reading their IDs from an Excel file.
            - Supports three different Excel import options (row, column, cell).
            - Updates the UI to reflect the selected elements and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [SCRIPT:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                from pyrevit import revit, forms, DB

                def select_using_element_ids_from_excel():
                    try:
                        # [SCRIPT:IMPORTS] Import necessary modules
                        import clr
                        import clr
                        clr.AddReference('System.Windows.Forms')
                        clr.AddReference('System.Drawing')
                        clr.AddReference('RevitAPI')
                        clr.AddReference('RevitServices')
                        import System.Windows.Forms as WinForms
                        import os
                        import sys
                        import webbrowser
                        import System.Drawing as Drawing
                        from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit
                        from System.Windows.Forms import Form, Label, TextBox, Button, PictureBox, Cursors
                        import Autodesk.Revit.DB as DB
                        from RevitServices.Persistence import DocumentManager
                        import xlrd
                        from pyrevit import revit, forms, DB
                        from System.Collections.Generic import List
                        sys.path.append(os.path.dirname(__file__))
                        from structure.root import wurl_path, excelid_back, excelid_icon, importexc_button, green_light, red_light, lan_path, cancel_icon, ok_icon
                        from UI.strings_select_ids_from_excel import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, 
                        str_18, str_19, str_20, str_21, str_22, str_23, str_24)
                        from UI.url import parsweb

                        # [SCRIPT:SETUP_VARIABLES] Initialize variables
                        lan = lan_path()
                        wurl= wurl_path()

                        # [SCRIPT:EXCEL_FORM_SETUP] Set up Excel form
                        icon_path = excelid_icon()
                        search_image_path = excelid_back()
                        import_icon = importexc_button()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        ready_light = green_light()
                        not_ready_light = red_light()
                        parameter_label = str_2(lan)
                        value_label = str_3(lan)
                        window_name = str_20(lan)
                        url = parsweb(wurl)
                        doc = __revit__.ActiveUIDocument.Document

                        # [SCRIPT:EXCEL_FORM] Initialize Excel form
                        class EXCEL(Form):
                            def __init__(self, doc): 
                                """
                                This function initializes the form for selecting elements based on Excel data.

                                Workflow:
                                1. Sets up the form with three tabs for different Excel import options:
                                - Tab 1: Import Excel file and select elements based on row data.
                                - Tab 2: Import Excel file and select elements based on column data.
                                - Tab 3: Import Excel file and select elements based on cell data.
                                2. Configures the form's layout, including labels, textboxes, buttons, and picture boxes.
                                3. Implements event handlers for button clicks and textbox changes.
                                4. Ensures proper handling of exceptions to maintain application stability.

                                Key Features:
                                - Provides a user-friendly interface for importing Excel data.
                                - Supports three different Excel import options (row, column, cell).
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:FORM_SETUP] Set up form properties
                                self.Text = window_name
                                self.Width = 500
                                self.Height = 450
                                self.BackColor = Color.White
                                self.doc = doc
                                self.CenterToScreen()
                                self.Icon = Drawing.Icon(icon_path)

                                # [UI:TAB_CONTROL] Create tab control
                                self.tabControl = WinForms.TabControl()
                                self.tabControl.Dock = WinForms.DockStyle.Fill

                                # [UI:TAB1] Create first tab
                                tabPage1 = WinForms.TabPage()
                                tabPage1.Text = str_1(lan)
                                tabPage1.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage1)

                                # [UI:TAB2] Create second tab
                                tabPage2 = WinForms.TabPage()
                                tabPage2.Text = str_4(lan)
                                tabPage2.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage2)

                                # [UI:TAB3] Create third tab
                                tabPage3 = WinForms.TabPage()
                                tabPage3.Text = str_5(lan)
                                tabPage3.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage3)

                                # [UI:PICTURE_BOX] Add picture box
                                self.pictureBoxSFIPV = PictureBox()
                                self.pictureBoxSFIPV.Location = Point(185, 25)
                                self.pictureBoxSFIPV.Size = Size(100, 100)
                                imageSFIPV = Image.FromFile(search_image_path)
                                self.pictureBoxSFIPV.Image = imageSFIPV
                                self.Controls.Add(self.pictureBoxSFIPV)

                                # [UI:STATUS_INDICATORS] Add status indicators
                                self.pictureBoxSFIPV = PictureBox()
                                self.pictureBoxSFIPV.Location = Point(80, 150)
                                self.pictureBoxSFIPV.Size = Size(25, 25)
                                imageSFIPV = Image.FromFile(not_ready_light)
                                self.pictureBoxSFIPV.Image = imageSFIPV
                                tabPage1.Controls.Add(self.pictureBoxSFIPV)

                                self.pictureBoxSFIPV_t2 = PictureBox()
                                self.pictureBoxSFIPV_t2.Location = Point(80, 150)
                                self.pictureBoxSFIPV_t2.Size = Size(25, 25)
                                imageSFIPV_t2 = Image.FromFile(not_ready_light)
                                self.pictureBoxSFIPV_t2.Image = imageSFIPV_t2
                                tabPage2.Controls.Add(self.pictureBoxSFIPV_t2)

                                self.pictureBoxSFIPV_t3 = PictureBox()
                                self.pictureBoxSFIPV_t3.Location = Point(80, 150)
                                self.pictureBoxSFIPV_t3.Size = Size(25, 25)
                                imageSFIPV_t3 = Image.FromFile(not_ready_light)
                                self.pictureBoxSFIPV_t3.Image = imageSFIPV_t3
                                tabPage3.Controls.Add(self.pictureBoxSFIPV_t3)

                                # [UI:LABEL0] Add label for file path
                                self.label0 = Label()
                                self.label0.Text = ""
                                self.label0.Location = Point(40, 210)
                                self.label0.AutoSize = True
                                self.label0.MaximumSize = Size(420, 100)
                                self.Controls.Add(self.label0)

                                # [UI:LABEL1] Add label for parameter
                                self.label1 = Label()
                                self.label1.Text = parameter_label
                                self.label1.Location = Point(190, 145)
                                self.label1.AutoSize = True
                                self.label1.Font = Font(self.label1.Font, FontStyle.Bold)
                                tabPage1.Controls.Add(self.label1)

                                # [UI:TEXTBOX1] Add textbox for parameter
                                self.textbox1 = TextBox()
                                self.textbox1.Width = 35
                                self.textbox1.Location = Point(255, 140)
                                self.textbox1.TextChanged += self.textbox_TextChanged
                                self.textbox1.Enabled = False
                                tabPage1.Controls.Add(self.textbox1)

                                # [UI:LABEL1_T2] Add label for parameter in tab 2
                                self.label1_t2 = Label()
                                self.label1_t2.Text = parameter_label
                                self.label1_t2.Location = Point(190, 145)
                                self.label1_t2.AutoSize = True
                                self.label1_t2.Font = Font(self.label1_t2.Font, FontStyle.Bold)
                                tabPage2.Controls.Add(self.label1_t2)

                                # [UI:TEXTBOX1_T2] Add textbox for parameter in tab 2
                                self.textbox1_t2 = TextBox()
                                self.textbox1_t2.Width = 35
                                self.textbox1_t2.Location = Point(255, 140)
                                self.textbox1_t2.TextChanged += self.textbox_TextChanged2
                                self.textbox1_t2.Enabled = False
                                tabPage2.Controls.Add(self.textbox1_t2)

                                # [UI:LABEL2] Add label for value
                                self.label2 = Label()
                                self.label2.Text = value_label
                                self.label2.Location = Point(300, 145)
                                self.label2.AutoSize = True
                                self.label2.Font = Font(self.label2.Font, FontStyle.Bold)
                                tabPage1.Controls.Add(self.label2)

                                # [UI:TEXTBOX2] Add textbox for value
                                self.textbox2 = TextBox()
                                self.textbox2.Width = 35
                                self.textbox2.Location = Point(365, 140)
                                self.textbox2.TextChanged += self.textbox_TextChanged
                                self.textbox2.Enabled = False
                                tabPage1.Controls.Add(self.textbox2)

                                # [UI:LABEL2_T3] Add label for value in tab 3
                                self.label2_t3 = Label()
                                self.label2_t3.Text = value_label
                                self.label2_t3.Location = Point(190, 145)
                                self.label2_t3.AutoSize = True
                                self.label2_t3.Font = Font(self.label2_t3.Font, FontStyle.Bold)
                                tabPage3.Controls.Add(self.label2_t3)

                                # [UI:TEXTBOX2_T3] Add textbox for value in tab 3
                                self.textbox2_t3 = TextBox()
                                self.textbox2_t3.Width = 35
                                self.textbox2_t3.Location = Point(255, 140)
                                self.textbox2_t3.TextChanged += self.textbox_TextChanged3
                                self.textbox2_t3.Enabled = False
                                tabPage3.Controls.Add(self.textbox2_t3)

                                # [UI:IMPORT_BUTTON] Add import button for tab 1
                                self.import_button = Button()
                                self.import_button.Location = Point(40, 145)
                                self.import_button.Width = 35
                                self.import_button.Height = 35
                                self.import_button.Image = Icon(import_icon).ToBitmap()
                                self.import_button.Enabled = True
                                self.import_button.Click += self.import_clicked
                                tabPage1.Controls.Add(self.import_button)

                                # [UI:IMPORT_BUTTON_T2] Add import button for tab 2
                                self.import_button_t2 = Button()
                                self.import_button_t2.Location = Point(40, 145)
                                self.import_button_t2.Width = 35
                                self.import_button_t2.Height = 35
                                self.import_button_t2.Image = Icon(import_icon).ToBitmap()
                                self.import_button_t2.Enabled = True
                                self.import_button_t2.Click += self.import_clicked2
                                tabPage2.Controls.Add(self.import_button_t2)

                                # [UI:IMPORT_BUTTON_T3] Add import button for tab 3
                                self.import_button_t3 = Button()
                                self.import_button_t3.Location = Point(40, 145)
                                self.import_button_t3.Width = 35
                                self.import_button_t3.Height = 35
                                self.import_button_t3.Image = Icon(import_icon).ToBitmap()
                                self.import_button_t3.Enabled = True
                                self.import_button_t3.Click += self.import_clicked3
                                tabPage3.Controls.Add(self.import_button_t3)

                                # [UI:OK_BUTTON] Add OK button for tab 1
                                self.ok_button = Button()
                                self.ok_button.Location = Point(190, 300)
                                self.ok_button.Width = 35
                                self.ok_button.Height = 35
                                self.ok_button.Image = Icon(ok_icon_path).ToBitmap()
                                self.ok_button.Enabled = False
                                self.ok_button.Click += self.ok_clicked
                                tabPage1.Controls.Add(self.ok_button)

                                # [UI:OK_BUTTON_T2] Add OK button for tab 2
                                self.ok_button_t2 = Button()
                                self.ok_button_t2.Location = Point(190, 300)
                                self.ok_button_t2.Width = 35
                                self.ok_button_t2.Height = 35
                                self.ok_button_t2.Image = Icon(ok_icon_path).ToBitmap()
                                self.ok_button_t2.Enabled = False
                                self.ok_button_t2.Click += self.ok2_clicked
                                tabPage2.Controls.Add(self.ok_button_t2)

                                # [UI:OK_BUTTON_T3] Add OK button for tab 3
                                self.ok_button_t3 = Button()
                                self.ok_button_t3.Location = Point(190, 300)
                                self.ok_button_t3.Width = 35
                                self.ok_button_t3.Height = 35
                                self.ok_button_t3.Image = Icon(ok_icon_path).ToBitmap()
                                self.ok_button_t3.Enabled = False
                                self.ok_button_t3.Click += self.ok3_clicked
                                tabPage3.Controls.Add(self.ok_button_t3)

                                # [UI:CANCEL_BUTTON] Add cancel button for tab 1
                                self.cancel_button = Button()
                                self.cancel_button.Location = Point(230, 300)
                                self.cancel_button.Width = 35
                                self.cancel_button.Height = 35
                                self.cancel_button.Image = Icon(cancel_icon_path).ToBitmap()
                                self.cancel_button.Click += self.cancel_clicked
                                tabPage1.Controls.Add(self.cancel_button)

                                # [UI:CANCEL_BUTTON_T2] Add cancel button for tab 2
                                self.cancel_button_t2 = Button()
                                self.cancel_button_t2.Location = Point(230, 300)
                                self.cancel_button_t2.Width = 35
                                self.cancel_button_t2.Height = 35
                                self.cancel_button_t2.Image = Icon(cancel_icon_path).ToBitmap()
                                self.cancel_button_t2.Click += self.cancel2_clicked
                                tabPage2.Controls.Add(self.cancel_button_t2)

                                # [UI:CANCEL_BUTTON_T3] Add cancel button for tab 3
                                self.cancel_button_t3 = Button()
                                self.cancel_button_t3.Location = Point(230, 300)
                                self.cancel_button_t3.Width = 35
                                self.cancel_button_t3.Height = 35
                                self.cancel_button_t3.Image = Icon(cancel_icon_path).ToBitmap()
                                self.cancel_button_t3.Click += self.cancel3_clicked
                                tabPage3.Controls.Add(self.cancel_button_t3)

                                # [UI:CREATED_BY_LABEL] Add "Created by" label
                                self.created_by_label = Label()
                                self.created_by_label.AutoSize = True
                                self.created_by_label.Text = "BIM Pars"
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.created_by_label.ForeColor = Color.Blue
                                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                self.created_by_label.Cursor = Cursors.Hand  
                                self.created_by_label.Click += self.Label_Click
                                self.Controls.Add(self.created_by_label)

                                # [UI:TAB_CONTROL] Add tab control to form
                                self.Controls.Add(self.tabControl)

                            # [SCRIPT:LABEL_CLICK] Handle "BIM Pars" label click
                            def Label_Click(self, sender, event):
                                """
                                This function handles the event when the "BIM Pars" label is clicked.

                                Workflow:
                                1. Opens the specified URL in the default web browser when the label is clicked.

                                Key Features:
                                - Provides a quick link to the BIM Pars website.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                webbrowser.open(url)

                            # [SCRIPT:IMPORT_CLICKED] Handle import button click for Tab 1
                            def import_clicked(self, sender, e):
                                """
                                This function handles the event when the "Import" button is clicked in Tab 1.

                                Workflow:
                                1. Enables the textboxes for row and column input.
                                2. Disables the "Import" button to prevent multiple clicks.
                                3. Prompts the user to select an Excel file.
                                4. Updates the UI to reflect the selected file and readiness status.

                                Key Features:
                                - Provides a user-friendly interface for importing Excel files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if self.import_button.Click:
                                    self.textbox1.Enabled = True
                                    self.textbox2.Enabled = True
                                    self.import_button.Enabled = False
                                    self.excel_file_path = forms.pick_excel_file()
                                    if self.excel_file_path is not None:
                                        self.label0.Text = str(self.excel_file_path)
                                        imageSFIPV = Image.FromFile(ready_light)
                                        self.pictureBoxSFIPV.Image = imageSFIPV
                                    else:
                                        self.import_button.Enabled = True
                                        self.label0.Text = ""
                                        imageSFIPV = Image.FromFile(not_ready_light)
                                        self.pictureBoxSFIPV.Image = imageSFIPV

                            # [SCRIPT:IMPORT_CLICKED2] Handle import button click for Tab 2
                            def import_clicked2(self, sender, e):
                                """
                                This function handles the event when the "Import" button is clicked in Tab 2.

                                Workflow:
                                1. Enables the textbox for column input.
                                2. Disables the "Import" button to prevent multiple clicks.
                                3. Prompts the user to select an Excel file.
                                4. Updates the UI to reflect the selected file and readiness status.

                                Key Features:
                                - Provides a user-friendly interface for importing Excel files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if self.import_button_t2.Click:
                                    self.textbox1_t2.Enabled = True
                                    self.import_button_t2.Enabled = False
                                    self.excel_file_path2 = forms.pick_excel_file()
                                    if self.excel_file_path2 is not None:
                                        self.label0.Text = str(self.excel_file_path2)
                                        imageSFIPV_t2 = Image.FromFile(ready_light)
                                        self.pictureBoxSFIPV_t2.Image = imageSFIPV_t2
                                    else:
                                        self.import_button.Enabled = True
                                        self.label0.Text = ""
                                        imageSFIPV = Image.FromFile(not_ready_light)
                                        self.pictureBoxSFIPV_t2.Image = imageSFIPV

                            # [SCRIPT:IMPORT_CLICKED3] Handle import button click for Tab 3
                            def import_clicked3(self, sender, e):
                                """
                                This function handles the event when the "Import" button is clicked in Tab 3.

                                Workflow:
                                1. Enables the textbox for cell input.
                                2. Disables the "Import" button to prevent multiple clicks.
                                3. Prompts the user to select an Excel file.
                                4. Updates the UI to reflect the selected file and readiness status.

                                Key Features:
                                - Provides a user-friendly interface for importing Excel files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if self.import_button_t3.Click:
                                    self.textbox2_t3.Enabled = True
                                    self.import_button_t3.Enabled = False
                                    self.excel_file_path3 = forms.pick_excel_file()
                                    if self.excel_file_path3 is not None:
                                        self.label0.Text = str(self.excel_file_path3)
                                        imageSFIPV = Image.FromFile(ready_light)
                                        self.pictureBoxSFIPV_t3.Image = imageSFIPV
                                    else:
                                        self.import_button.Enabled = True
                                        self.label0.Text = ""
                                        imageSFIPV_t3 = Image.FromFile(not_ready_light)
                                        self.pictureBoxSFIPV_t3.Image = imageSFIPV_t3

                            # [SCRIPT:OK_CLICKED] Handle "OK" button click for Tab 1
                            def ok_clicked(self, sender, e):
                                """
                                This function handles the event when the "OK" button is clicked in Tab 1.

                                Workflow:
                                1. Retrieves the starting row and column numbers from the textboxes.
                                2. Reads element IDs from the selected Excel file starting at the specified cell.
                                3. Filters and validates the element IDs.
                                4. Updates the selection in the Revit model to include the valid elements.
                                5. Displays a message with any invalid IDs encountered.

                                Key Features:
                                - Allows selecting elements based on Excel data starting from a specific cell.
                                - Validates element IDs to ensure they exist in the Revit model.
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [SCRIPT:SELECT_ELEMENTS] Select elements from Excel
                                    def select_elements_from_excel():
                                        if self.excel_file_path:
                                            # [SCRIPT:GET_CELL_ADDRESS] Get row and column numbers
                                            start_row, start_column = _get_row_column_numbers()
                                            workbook = xlrd.open_workbook(self.excel_file_path)
                                            sheet = workbook.sheet_by_index(0)
                                            
                                            # [SCRIPT:READ_ELEMENT_IDS] Read element IDs from Excel
                                            element_ids = []
                                            invalid_ids = []
                                            for row in range(start_row - 1, sheet.nrows):
                                                for col in range(start_column - 1, sheet.ncols):
                                                    cell_value = sheet.cell_value(row, col)
                                                    if cell_value != '':
                                                        try:
                                                            element_id = int(cell_value)
                                                            element_ids.append(element_id)
                                                        except ValueError:
                                                            invalid_ids.append(str_6(lan).format(row + 1, col + 1))
                                            
                                            # [SCRIPT:VALIDATE_ELEMENTS] Validate element IDs
                                            doc = revit.doc
                                            element_id_objects = List[DB.ElementId]()
                                            for element_id in element_ids:
                                                try:
                                                    element = doc.GetElement(DB.ElementId(element_id))
                                                    if element is None:
                                                        invalid_ids.append(str(element_id))
                                                    else:
                                                        element_id_objects.Add(DB.ElementId(element_id))
                                                except Exception:
                                                    invalid_ids.append(str(element_id))
                                            
                                            # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                                            if element_id_objects.Count > 0:
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                            
                                            # [SCRIPT:DISPLAY_MESSAGE] Display message with invalid IDs
                                            msg = ''
                                            if invalid_ids:
                                                msg += str_7(lan)
                                                for invalid_id in invalid_ids:
                                                    msg += invalid_id + '\n'
                                            if not msg:
                                                msg = str_8(lan)
                                            forms.alert(msg.strip(), title= str_9(lan))
                                        self.Close()

                                    # [SCRIPT:GET_ROW_COLUMN] Get row and column numbers from textboxes
                                    def _get_row_column_numbers():
                                        start_row = self.textbox1.Text
                                        start_column = self.textbox2.Text
                                        try:
                                            start_row = int(start_row)
                                            start_column = int(start_column)
                                            return start_row, start_column
                                        except ValueError:
                                            forms.alert(str_10(lan), title=str_11(lan))
                                            pass
                                    
                                    # [SCRIPT:EXECUTE_SELECTION] Execute element selection
                                    select_elements_from_excel()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [SCRIPT:OK2_CLICKED] Handle "OK" button click for Tab 2
                            def ok2_clicked(self, sender, e):
                                """
                                This function handles the event when the "OK" button is clicked in Tab 2.

                                Workflow:
                                1. Retrieves the row number from the textbox.
                                2. Reads element IDs from the selected Excel file in the specified row.
                                3. Filters and validates the element IDs.
                                4. Updates the selection in the Revit model to include the valid elements.
                                5. Displays a message with any invalid IDs encountered.

                                Key Features:
                                - Allows selecting elements based on Excel data from a specific row.
                                - Validates element IDs to ensure they exist in the Revit model.
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [SCRIPT:SELECT_ELEMENTS] Select elements from Excel
                                    def select_elements_from_excel():
                                        if self.excel_file_path2:
                                            # [SCRIPT:GET_ROW_NUMBER] Get row number from textbox
                                            row_number = _get_valid_integer(str_12(lan), str_13(lan))
                                            workbook = xlrd.open_workbook(self.excel_file_path2)
                                            sheet = workbook.sheet_by_index(0)
                                            
                                            # [SCRIPT:READ_ELEMENT_IDS] Read element IDs from Excel
                                            element_ids = []
                                            invalid_ids = []
                                            for col in range(sheet.ncols):
                                                cell_value = sheet.cell_value(row_number - 1, col)
                                                if cell_value != '':
                                                    try:
                                                        element_id = int(cell_value)
                                                        element_ids.append(element_id)
                                                    except ValueError:
                                                        invalid_ids.append(str_14(lan).format(col + 1))
                                            
                                            # [SCRIPT:VALIDATE_ELEMENTS] Validate element IDs
                                            doc = revit.doc
                                            element_id_objects = List[DB.ElementId]()
                                            for element_id in element_ids:
                                                try:
                                                    element = doc.GetElement(DB.ElementId(element_id))
                                                    if element is None:
                                                        invalid_ids.append(str(element_id))
                                                    else:
                                                        element_id_objects.Add(DB.ElementId(element_id))
                                                except Exception:
                                                    invalid_ids.append(str(element_id))
                                            
                                            # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                                            if element_id_objects.Count > 0:
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                            
                                            # [SCRIPT:DISPLAY_MESSAGE] Display message with invalid IDs
                                            msg = ''
                                            if invalid_ids:
                                                msg += str_7(lan)
                                                for invalid_id in invalid_ids:
                                                    msg += invalid_id + '\n'
                                            if not msg:
                                                msg = str_8(lan)
                                            forms.alert(msg.strip(), title=str_9(lan))
                                        self.Close()

                                    # [SCRIPT:GET_VALID_INTEGER] Get valid integer from textbox
                                    def _get_valid_integer(prompt, title):
                                        while True:
                                            number = self.textbox1_t2.Text
                                            try:
                                                number = int(number)
                                                if number > 0:
                                                    return number
                                                else:
                                                    number == ""
                                                    forms.alert(str_15(lan), title=str_11(lan))
                                                    sys.exit()
                                            except ValueError:
                                                forms.alert(str_16(lan), title=str_11(lan))
                                                sys.exit()
                                    
                                    # [SCRIPT:EXECUTE_SELECTION] Execute element selection
                                    select_elements_from_excel()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [SCRIPT:OK3_CLICKED] Handle "OK" button click for Tab 3
                            def ok3_clicked(self, sender, e):
                                """
                                This function handles the event when the "OK" button is clicked in Tab 3.

                                Workflow:
                                1. Retrieves the column number from the textbox.
                                2. Reads element IDs from the selected Excel file in the specified column.
                                3. Filters and validates the element IDs.
                                4. Updates the selection in the Revit model to include the valid elements.
                                5. Displays a message with any invalid IDs encountered.

                                Key Features:
                                - Allows selecting elements based on Excel data from a specific column.
                                - Validates element IDs to ensure they exist in the Revit model.
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [SCRIPT:SELECT_ELEMENTS] Select elements from Excel
                                    def select_elements_from_excel():
                                        if self.excel_file_path3:
                                            # [SCRIPT:GET_COLUMN_NUMBER] Get column number from textbox
                                            column_number = _get_valid_integer(str_17(lan), str_18(lan))
                                            workbook = xlrd.open_workbook(self.excel_file_path3)
                                            sheet = workbook.sheet_by_index(0)
                                            
                                            # [SCRIPT:READ_ELEMENT_IDS] Read element IDs from Excel
                                            element_ids = []
                                            invalid_ids = []
                                            for row in range(sheet.nrows):
                                                cell_value = sheet.cell_value(row, column_number - 1)
                                                if cell_value != '':
                                                    try:
                                                        element_id = int(cell_value)
                                                        element_ids.append(element_id)
                                                    except ValueError:
                                                        invalid_ids.append(str_19(lan).format(row + 1))
                                            
                                            # [SCRIPT:VALIDATE_ELEMENTS] Validate element IDs
                                            doc = revit.doc
                                            element_id_objects = List[DB.ElementId]()
                                            for element_id in element_ids:
                                                try:
                                                    element = doc.GetElement(DB.ElementId(element_id))
                                                    if element is None:
                                                        invalid_ids.append(str(element_id))
                                                    else:
                                                        element_id_objects.Add(DB.ElementId(element_id))
                                                except Exception:
                                                    invalid_ids.append(str(element_id))
                                            
                                            # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                                            if element_id_objects.Count > 0:
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)

                                            # [SCRIPT:DISPLAY_MESSAGE] Display message with invalid IDs
                                            msg = ''
                                            if invalid_ids:
                                                msg += str_7(lan)
                                                for invalid_id in invalid_ids:
                                                    msg += invalid_id + '\n'
                                            if not msg:
                                                msg = str_8(lan)
                                            forms.alert(msg.strip(), title=str_9(lan))
                                        self.Close()

                                    # [SCRIPT:GET_VALID_INTEGER] Get valid integer from textbox
                                    def _get_valid_integer(prompt, title):
                                        while True:
                                            number = self.textbox2_t3.Text
                                            try:
                                                number = int(number)
                                                if number > 0:
                                                    return number
                                                else:
                                                    number == ""
                                                    forms.alert(str_15(lan), title=str_11(lan))
                                                    sys.exit()
                                            except ValueError:
                                                forms.alert(str_16(lan), title=str_11(lan))
                                                sys.exit()
                                    # [SCRIPT:EXECUTE_SELECTION] Execute element selection
                                    select_elements_from_excel()

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [SCRIPT:CANCEL_CLICKED] Handle "Cancel" button click for Tab 1
                            def cancel_clicked(self, sender, e):
                                """
                                This function handles the event when the "Cancel" button is clicked in Tab 1.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.Close()

                            # [SCRIPT:CANCEL2_CLICKED] Handle "Cancel" button click for Tab 2
                            def cancel2_clicked(self, sender, e):
                                """
                                This function handles the event when the "Cancel" button is clicked in Tab 2.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.Close()

                            # [SCRIPT:CANCEL3_CLICKED] Handle "Cancel" button click for Tab 3
                            def cancel3_clicked(self, sender, e):
                                """
                                This function handles the event when the "Cancel" button is clicked in Tab 3.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.Close()

                            # [SCRIPT:TEXTBOX_CHANGED] Handle textbox change for Tab 1
                            def textbox_TextChanged(self, sender, e):
                                """
                                This function handles the event when the text in either textbox in Tab 1 is changed.

                                Workflow:
                                1. Enables the "OK" button if both textboxes contain text.
                                2. Disables the "OK" button if either textbox is empty.

                                Key Features:
                                - Ensures the "OK" button is only enabled when both row and column numbers are provided.
                                - Updates the UI dynamically based on user input.
                                """
                                if self.textbox1.Text and self.textbox2.Text:
                                    self.ok_button.Enabled = True
                                else:
                                    self.ok_button.Enabled = False

                            # [SCRIPT:TEXTBOX_CHANGED2] Handle textbox change for Tab 2
                            def textbox_TextChanged2(self, sender, e):
                                """
                                This function handles the event when the text in either textbox in Tab 2 is changed.

                                Workflow:
                                1. Enables the "OK" button if both textboxes contain text.
                                2. Disables the "OK" button if either textbox is empty.

                                Key Features:
                                - Ensures the "OK" button is only enabled when both row and column numbers are provided.
                                - Updates the UI dynamically based on user input.
                                """
                                if self.textbox1_t2.Text:
                                    self.ok_button_t2.Enabled = True
                                else:
                                    self.ok_button_t2.Enabled = False

                            # [SCRIPT:TEXTBOX_CHANGED3] Handle textbox change for Tab 3
                            def textbox_TextChanged3(self, sender, e):
                                """
                                This function handles the event when the text in either textbox in Tab 3 is changed.

                                Workflow:
                                1. Enables the "OK" button if both textboxes contain text.
                                2. Disables the "OK" button if either textbox is empty.

                                Key Features:
                                - Ensures the "OK" button is only enabled when both row and column numbers are provided.
                                - Updates the UI dynamically based on user input.
                                """
                                if self.textbox2_t3.Text:
                                    self.ok_button_t3.Enabled = True
                                else:
                                    self.ok_button_t3.Enabled = False
                            
                        # [SCRIPT:DOCUMENT] Get current document
                        doc = DocumentManager.Instance.CurrentDBDocument
                        if 'form' not in globals():
                            pass
                        else:
                            form = EXCEL(doc)
                            form.ShowDialog()
                    except:
                        pass
                
                # [SCRIPT:EXECUTE_SELECTION] Execute element selection from Excel
                select_using_element_ids_from_excel()
                
                # [SCRIPT:IMPORTS] Import necessary modules
                from UI.strings_select_ids_from_excel import str_21, str_22, str_23, str_24
                from structure.root import lan_path
                lan = lan_path()
                
                # [SCRIPT:GET_SELECTED_ELEMENTS] Get selected elements
                selection = revit.get_selection()

                if selection:  
                    # [SCRIPT:INITIALIZE_DATA] Initialize lists to store element data
                    ids = []
                    names = []
                    categories = []
                    
                    # [SCRIPT:COLLECT_DATA] Collect data from each selected element
                    for element in selection:
                        try:
                            ids.append(element.Id.ToString())
                            names.append(element.Name if hasattr(element, 'Name') else '')
                            categories.append(element.Category.Name if hasattr(element, 'Category') and element.Category else '')
                        except Exception as e:
                            MessageBox.Show(str(e),str_21(lan))
                            continue
                    
                    # [SCRIPT:CREATE_TABLE] Create the data table
                    headers = [str_22(lan), str_23(lan), str_24(lan)]
                    data = [
                        ids,
                        names,
                        categories
                    ]
                    editable = [False, False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                else:
                    # [SCRIPT:EMPTY_TABLE] Create empty table if no elements are selected
                    headers = [str_22(lan), str_23(lan), str_24(lan)]
                    data = [[], [], []]  # Empty data
                    editable = [False, False, False]

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_21(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()
            
        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Reduce Selection by ID] Selection Reduction by ID
        #
        # Handles reduction of element selection based on IDs:
        # - Reduces selection by removing specified IDs
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:REDUCE_SELECTION_BY_ID]
        elif button_text == tool_str_16(lan):
            """
            This script handles the "Reduce Selection by ID" functionality in the BIM Pars app within a Revit project.

            Workflow:
            1. Hides the Windows Form temporarily.
            2. Imports necessary modules, including Revit API, pyRevit, and system-related libraries.
            3. Uses a custom form to input a list of element IDs to be removed from the current selection.
            4. Validates the input IDs and filters the currently selected elements based on the provided IDs to remove.
            5. Updates the selection by removing elements with the specified IDs from the current selection.
            6. If no elements remain after filtering, displays an alert; otherwise, it shows the updated selection in the UI.
            7. Collects data for the selected elements, including Element ID, Name, and Category.
            8. Creates a table showing the filtered element data (ID, Name, Category).
            9. Implements error handling for invalid input or other exceptions.
            10. Restores the Windows Form after execution.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from System.Collections.Generic import List
                from pyrevit import forms, revit, DB
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.single import single_input
                from structure.root import wurl_path, reduId_back, reduId_icon, lan_path, cancel_icon, ok_icon
                from UI.strings_reduce_selection_by_id import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9
                from UI.url import parsweb

                lan = lan_path()
                wurl= wurl_path()

                # [UI:ID_FORM] Set up ID form
                icon_path = reduId_icon()
                search_image_path =reduId_back()
                ok_icon_path = ok_icon()
                cancel_icon_path = cancel_icon()
                parameter_label = str_1(lan)
                window_name = str_5(lan)
                url = parsweb(wurl)
                with forms.ProgressBar(title='', indeterminate=True):
                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                try:
                    # [SCRIPT:VALIDATE_INPUT] Validate user input
                    if user_input is None:
                        forms.alert(str_2(lan))
                        sys.exit()
                    element_ids_to_remove = []
                    try:
                        element_ids_to_remove = [int(id.strip()) for id in user_input.split(',')]
                    except ValueError:
                        forms.alert(str_3(lan))
                        sys.exit()
                    
                    # [SCRIPT:FILTER_SELECTION] Filter selected elements
                    selected_elements = revit.get_selection()
                    element_ids_to_remove_objects = [DB.ElementId(id) for id in element_ids_to_remove]
                    filtered_selection = [element for element in selected_elements if element.Id not in element_ids_to_remove_objects]
                    updated_selection_ids = [element.Id for element in filtered_selection]
                    revit.uidoc.Selection.SetElementIds(List[DB.ElementId](updated_selection_ids))
                    
                    # [SCRIPT:CHECK_SELECTION] Check if any elements remain
                    if len(updated_selection_ids) == 0:
                        forms.alert(str_4(lan))
                        sys.exit()
                    else:
                        # [UI:SHOW_ELEMENTS] Show updated selection
                        revit.uidoc.ShowElements(List[DB.ElementId](updated_selection_ids))

                        # [SCRIPT:GET_SELECTED_ELEMENTS] Get selected elements
                        selection = revit.get_selection()

                        if selection:  
                            # [SCRIPT:INITIALIZE_DATA] Initialize lists to store element data
                            ids = []
                            names = []
                            categories = []
                            
                            # [SCRIPT:COLLECT_DATA] Collect data from each selected element
                            for element in selection:
                                try:
                                    ids.append(element.Id.ToString())
                                    names.append(element.Name if hasattr(element, 'Name') else '')
                                    categories.append(element.Category.Name if hasattr(element, 'Category') and element.Category else '')
                                except Exception as e:
                                    MessageBox.Show(str(e),str_6(lan))
                                    continue
                            
                            # [SCRIPT:CREATE_TABLE] Create the data table
                            headers = [str_7(lan), str_8(lan), str_9(lan)]
                            data = [
                                ids,
                                names,
                                categories
                            ]
                            editable = [False, False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                        else:
                            # [SCRIPT:EMPTY_TABLE] Create empty table if no elements are selected
                            headers = [str_7(lan), str_8(lan), str_9(lan)]
                            data = [[], [], []] 
                            editable = [False, False, False]

                except StopIteration:
                    pass
                except Exception:
                    pass            
                except SystemExit:
                    pass

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_6(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Reduce Selection by OST Categories] Selection Reduction by OST Categories
        #
        # Handles reduction of element selection based on OST categories:
        # - Reduces selection by removing specified categories
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:REDUCE_SELECTION_BY_OST_CATEGORIES]
        elif button_text == tool_str_17(lan):
            """
            This script handles the "Reduce Selection by OST Categories" functionality in the BIM Pars app within a Revit project.

            Workflow:
            1. Hides the Windows Form temporarily.
            2. Imports necessary modules, including Revit API, pyRevit, and system-related libraries.
            3. Defines a function to reduce the selection by filtering elements based on their categories (OST categories).
            4. Retrieves and filters all available categories and their elements in the current document.
            5. Displays a list of categories for the user to select which categories should be removed from the selection.
            6. Filters the current selection by excluding elements from the selected categories.
            7. If no elements remain after filtering, displays an alert; otherwise, it updates the selection in the UI.
            8. Collects data for the selected elements, including Element ID, Name, and Category.
            9. Creates a table showing the updated selection data (ID, Name, Category).
            10. Implements error handling for invalid selection or other exceptions.
            11. Restores the Windows Form after execution.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from pyrevit import revit, forms, DB

                def reduce_selection_using_ost_categories():
                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                    import clr
                    clr.AddReference('RevitAPI')
                    from Autodesk.Revit.DB import ElementId, FilteredElementCollector, BuiltInCategory
                    from System.Collections.Generic import List
                    from pyrevit import script, forms, revit, DB
                    import os
                    import sys
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.modules.inform import category_name
                    from structure.root import lan_path
                    from UI.strings_reduce_selection_by_ost_categories import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8

                    lan = lan_path()

                    try:
                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                        doc = __revit__.ActiveUIDocument.Document
                        uidoc = __revit__.ActiveUIDocument

                        # [SCRIPT:SELECT_ELEMENTS_BY_CATEGORY] Select elements by category
                        def select_individual_elements_of_category_all_views(category_id):
                            elements = FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements()
                            element_ids = List[ElementId]()
                            for element in elements:
                                element_ids.Add(element.Id)
                            uidoc.Selection.SetElementIds(element_ids)
                            uidoc.ShowElements(element_ids)  
                            return element_ids
                        
                        # [SCRIPT:GET_ALL_CATEGORIES] Get all categories
                        all_categories = {}
                        categories = BuiltInCategory.GetValues(BuiltInCategory)
                        for category in categories:
                            category_id = category
                            category_name = category.ToString()
                            if category_name != "INVALID":
                                element_count = len(FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements())
                                if element_count > 0:
                                    all_categories[category_name] = category_id
                        
                        # [UI:SELECT_CATEGORIES] Display category selection dialog
                        selected_categories = forms.SelectFromList.show(
                            all_categories.keys(),
                            title=str_1(lan),
                            multiselect=True,
                            button_name = str_3(lan)
                        )
                        if selected_categories is None:
                            forms.alert(str_2(lan))
                            sys.exit()
                        
                        # [SCRIPT:FILTER_SELECTION] Filter selection by selected categories
                        selected_elements = []
                        for category_name in selected_categories:
                            category_id = all_categories[category_name]
                            elements = FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements()
                            selected_elements.extend(elements)
                        element_ids = [selected_element.Id.IntegerValue for selected_element in selected_elements]
                        element_ids_to_remove = element_ids  
                        selected_elements = revit.get_selection()
                        element_ids_to_remove_objects = [DB.ElementId(id) for id in element_ids_to_remove]
                        filtered_selection = [element for element in selected_elements if element.Id not in element_ids_to_remove_objects]
                        updated_selection_ids = [element.Id for element in filtered_selection]
                        revit.uidoc.Selection.SetElementIds(List[DB.ElementId](updated_selection_ids))
                        
                        # [SCRIPT:CHECK_SELECTION] Check if any elements remain
                        if len(updated_selection_ids) == 0:
                            forms.alert(str_4(lan))
                            sys.exit()
                        else:
                            # [UI:SHOW_ELEMENTS] Show updated selection
                            revit.uidoc.ShowElements(List[DB.ElementId](updated_selection_ids))
  
                    except StopIteration:
                        pass
                    except Exception:
                        pass            
                    except SystemExit:
                        pass

                # [SCRIPT:EXECUTE_REDUCTION] Execute selection reduction by OST categories
                reduce_selection_using_ost_categories()

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from structure.root import lan_path
                from UI.strings_reduce_selection_by_ost_categories import str_5, str_6, str_7, str_8

                lan = lan_path()

                # [SCRIPT:GET_SELECTED_ELEMENTS] Get selected elements
                selection = revit.get_selection()

                if selection: 
                    # [SCRIPT:INITIALIZE_DATA] Initialize lists to store element data
                    ids = []
                    names = []
                    categories = []
                    
                    # [SCRIPT:COLLECT_DATA] Collect data from each selected element
                    for element in selection:
                        try:
                            ids.append(element.Id.ToString())
                            names.append(element.Name if hasattr(element, 'Name') else '')
                            categories.append(element.Category.Name if hasattr(element, 'Category') and element.Category else '')
                        except Exception as e:
                            MessageBox.Show(str(e),str_5(lan))
                            continue
                    
                    # [SCRIPT:CREATE_TABLE] Create the data table
                    headers = [str_6(lan), str_7(lan), str_8(lan)]
                    data = [
                        ids,
                        names,
                        categories
                    ]
                    editable = [False, False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                else:
                    # [SCRIPT:EMPTY_TABLE] Create empty table if no elements are selected
                    headers = [str_6(lan), str_7(lan), str_8(lan)]
                    data = [[], [], []]
                    editable = [False, False, False]
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_5(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Reduce Selection by Searching Value of Instance Parameters] Selection Reduction by Instance Parameter Value
        #
        # Handles reduction of element selection based on instance parameter values:
        # - Reduces selection by removing elements with specified parameter values
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:REDUCE_SELECTION_BY_INSTANCE_PARAMETER]
        elif button_text == tool_str_18(lan):
            """
            This script handles the "Reduce Selection by Searching Value of Instance Parameters" functionality in the BIM Pars app for Revit projects.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Defines a dictionary with common Revit categories and their corresponding functions for getting element IDs.
            4. Displays a form to prompt the user for selecting an instance parameter and its value to filter the selection.
            5. Based on the user's input, reduces the selection by excluding elements that match the selected parameter's value.
            6. If any elements are removed from the selection, the selection is updated in the Revit UI.
            7. If no elements are left, an alert is shown. Otherwise, the updated selection is focused on.
            8. Collects data for the remaining selected elements, including Element ID, Name, and Category.
            9. Creates a table showing the updated selection data (ID, Name, Category).
            10. Implements error handling for invalid selection, missing input, or other exceptions.
            11. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                import clr
                clr.AddReference("RevitAPI")
                from System.Collections.Generic import List
                from Autodesk.Revit.DB import ElementId
                from pyrevit import revit, DB, forms
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.categories import (Doors, Windows, Walls, AirTerminals, CableTrayFittings, CableTrays, Casework, Ceilings, Columns, CommunicationDevices, ConduitFitting, 
                Conduit, CurtainWallPanels, CurtainWallMullions, DataDevices, DuctAccessory, DuctFitting, DuctInsulations, DuctLinings, DuctCurves, ElectricalEquipment, ElectricalFixtures, 
                FireAlarmDevices, FlexDuctCurves, FlexPipeCurves, Floors, Furniture, FurnitureSystems, GenericModel, LightingDevices, LightingFixtures, MechanicalEquipment, NurseCallDevices, 
                PipeAccessory, PipeFitting, PipeInsulations, PipeCurves, Planting, PlumbingFixtures, StairsRailing, Ramps, Roofs, Rooms, SecurityDevices, Site, SpecialityEquipment, Sprinklers, 
                Stairs, AreaRein, StructuralColumns, StructConnections, StructuralFoundation, StructuralFraming, PathRein, Rebar, StructuralStiffener, StructuralTruss, TelephoneDevices)
                from sajdmo.forms.double import double_input_plusnote
                from sajdmo.scripts.select import category_id_param_value
                from structure.root import wurl_path, sinstancepv_icon, sinstancepv_back, lan_path, cancel_icon, ok_icon
                from UI.strings_reduce_selection_based_on_value_of_instance_parameters import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12
                from UI.url import parsweb

                lan = lan_path()
                wurl= wurl_path()

                # [UI:PARAMETER_FORM] Set up parameter value form
                icon_path = sinstancepv_icon()
                search_image_path = sinstancepv_back()
                ok_icon_path = ok_icon()
                cancel_icon_path = cancel_icon()
                parameter_label = str_1(lan)
                value_label = str_2(lan)
                window_name = str_8(lan)
                note = str_7(lan)
                url = parsweb(wurl)
                with forms.ProgressBar(title='', indeterminate=True):
                    selected_parameter, selected_value = double_input_plusnote(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, url)
                
                if selected_parameter:
                    if selected_value:
                        # [SCRIPT:COMMON_CATEGORIES] Define common categories
                        categories = {
                            'Doors': Doors,
                            'Windows': Windows,
                            'Walls': Walls,
                            'AirTerminals': AirTerminals,
                            'Doors': Doors,
                            'CableTrayFittings': CableTrayFittings,
                            'CableTrays': CableTrays,
                            'Casework': Casework,
                            'Ceilings': Ceilings,
                            'Columns': Columns,
                            'CommunicationDevices': CommunicationDevices,
                            'ConduitFitting': ConduitFitting,
                            'Conduit': Conduit,
                            'CurtainWallPanels': CurtainWallPanels,
                            'CurtainWallMullions': CurtainWallMullions,
                            'DataDevices': DataDevices,
                            'DuctAccessory': DuctAccessory,
                            'DuctFitting': DuctFitting,
                            'DuctInsulations': DuctInsulations,
                            'DuctLinings': DuctLinings,
                            'DuctCurves': DuctCurves,
                            'ElectricalEquipment': ElectricalEquipment,
                            'ElectricalFixtures': ElectricalFixtures,
                            'FireAlarmDevices': FireAlarmDevices,
                            'FlexDuctCurves': FlexDuctCurves,
                            'FlexPipeCurves': FlexPipeCurves,
                            'Floors': Floors,
                            'Furniture': Furniture,
                            'FurnitureSystems': FurnitureSystems,
                            'GenericModel': GenericModel,
                            'LightingDevices': LightingDevices,
                            'LightingFixtures': LightingFixtures,
                            'MechanicalEquipment': MechanicalEquipment,
                            'NurseCallDevices': NurseCallDevices,
                            'PipeAccessory': PipeAccessory,
                            'PipeFitting': PipeFitting,
                            'PipeInsulations': PipeInsulations,
                            'PipeCurves': PipeCurves,
                            'Planting': Planting,
                            'PlumbingFixtures': PlumbingFixtures,
                            'StairsRailing': StairsRailing,
                            'Ramps': Ramps,
                            'Roofs': Roofs,
                            'Rooms': Rooms,
                            'SecurityDevices': SecurityDevices,
                            'Site': Site,
                            'SpecialityEquipment': SpecialityEquipment,
                            'Sprinklers': Sprinklers,
                            'Stairs': Stairs,
                            'AreaRein': AreaRein,
                            'StructuralColumns': StructuralColumns,
                            'StructConnections': StructConnections,
                            'StructuralFoundation': StructuralFoundation,
                            'StructuralFraming': StructuralFraming,
                            'PathRein': PathRein,
                            'Rebar': Rebar,
                            'StructuralStiffener': StructuralStiffener,
                            'StructuralTruss': StructuralTruss,
                            'TelephoneDevices': TelephoneDevices,
                        }

                        # [SCRIPT:GET_ELEMENT_IDS] Get element IDs for selected parameter and value
                        all_selected_element_ids = []  
                        for category_name, get_element_ids_func in categories.items():
                            selected_element_ids = category_id_param_value(category_name, get_element_ids_func, selected_parameter, selected_value)
                            all_selected_element_ids.extend(selected_element_ids) 
                        
                        if all_selected_element_ids:
                            element_id_collection = List[ElementId](all_selected_element_ids)  
                            id_list = [element_id.IntegerValue for element_id in all_selected_element_ids if isinstance(element_id, ElementId)]
                            element_ids_to_remove = id_list
                            
                            # [SCRIPT:FILTER_SELECTION] Filter selected elements
                            selected_elements = revit.get_selection()
                            element_ids_to_remove_objects = [DB.ElementId(id) for id in element_ids_to_remove]
                            filtered_selection = [element for element in selected_elements if element.Id not in element_ids_to_remove_objects]
                            updated_selection_ids = [element.Id for element in filtered_selection]
                            revit.uidoc.Selection.SetElementIds(List[DB.ElementId](updated_selection_ids))
                            
                            # [SCRIPT:CHECK_SELECTION] Check if any elements remain
                            if len(updated_selection_ids) == 0:
                                forms.alert(str_3(lan))
                                pass
                            else:
                                # [UI:SHOW_ELEMENTS] Show updated selection
                                revit.uidoc.ShowElements(List[DB.ElementId](updated_selection_ids))
                        else:
                            forms.alert(str_4(lan))
                    else:
                        forms.alert(str_5(lan))
                else:
                    forms.alert(str_6(lan))

                # [SCRIPT:GET_SELECTED_ELEMENTS] Get selected elements
                selection = revit.get_selection()

                if selection:  
                    # [SCRIPT:INITIALIZE_DATA] Initialize lists to store element data
                    ids = []
                    names = []
                    categories = []
                    
                    # [SCRIPT:COLLECT_DATA] Collect data from each selected element
                    for element in selection:
                        try:
                            ids.append(element.Id.ToString())
                            names.append(element.Name if hasattr(element, 'Name') else '')
                            categories.append(element.Category.Name if hasattr(element, 'Category') and element.Category else '')
                        except Exception as e:
                            MessageBox.Show(str(e),str_9(lan))
                            continue
                    
                    # [SCRIPT:CREATE_TABLE] Create the data table
                    headers = [str_10(lan), str_11(lan), str_12(lan)]
                    data = [
                        ids,
                        names,
                        categories
                    ]
                    editable = [False, False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                else:
                    # [SCRIPT:EMPTY_TABLE] Create empty table if no elements are selected
                    headers = [str_10(lan), str_11(lan), str_12(lan)]
                    data = [[], [], []]
                    editable = [False, False, False]
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_9(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Reduce Selection by Existence of Parameters Values] Selection Reduction by Parameter Existence
        #
        # Handles reduction of element selection based on parameter existence:
        # - Reduces selection by removing elements with/without specified parameters
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:REDUCE_SELECTION_BY_PARAMETER_EXISTENCE]
        elif button_text == tool_str_19(lan):
            """
            This function handles the event when the "Reduce Selection by Existence of Parameter Values" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the parameter-based selection reduction operations.
            2. Displays a task dialog to allow the user to choose between three options:
            - Reduce selection by elements with any parameter value
            - Reduce selection by elements with a specific parameter value
            - Reduce selection by elements with no parameter value
            3. Prompts the user to select a parameter and categories for filtering.
            4. Filters elements based on the selected criteria and updates the selection in the Revit model.
            5. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows reducing the current selection based on the existence or absence of parameter values.
            - Updates the UI to reflect the selected elements and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                import clr
                clr.AddReference("RevitAPI")
                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                from rpw import doc, uidoc
                import Autodesk.Revit.DB as DB
                from System.Collections.Generic import List
                from pyrevit import revit, forms, DB
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.categories import (Doors, Windows, Walls, AirTerminals, CableTrayFittings, CableTrays, Casework, Ceilings, Columns, CommunicationDevices, ConduitFitting, Conduit, 
                CurtainWallPanels, CurtainWallMullions, DataDevices, DuctAccessory, DuctFitting, DuctInsulations, DuctLinings, DuctCurves, ElectricalEquipment, ElectricalFixtures, FireAlarmDevices, 
                FlexDuctCurves, FlexPipeCurves, Floors, Furniture, FurnitureSystems, GenericModel, LightingDevices, LightingFixtures, MechanicalEquipment, NurseCallDevices, PipeAccessory, PipeFitting, 
                PipeInsulations, PipeCurves, Planting, PlumbingFixtures, StairsRailing, Ramps, Roofs, Rooms, SecurityDevices, Site, SpecialityEquipment, Sprinklers, Stairs, AreaRein, StructuralColumns, 
                StructConnections, StructuralFoundation, StructuralFraming, PathRein, Rebar, StructuralStiffener, StructuralTruss, TelephoneDevices)              
                from sajdmo.scripts.select import category_id_param, category_id_param3
                from sajdmo.forms.single import single_input
                from structure.root import wurl_path, lan_path, pvalue_back, pvalue_icon, cancel_icon, ok_icon
                from UI.strings_reduce_selection_based_on_existence_of_parameter_value import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_12_, str_13, 
                str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22)
                from UI.url import parsweb

                lan = lan_path()
                wurl= wurl_path()

                # [SCRIPT:GET_SELECTED_ELEMENTS] Get selected elements
                selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                
                # [SCRIPT:CHECK_SELECTION] Check if any elements are selected
                if len(selection) == 0:
                    forms.alert(str_2(lan), title=str_13(lan))
                else:
                    # [UI:TASK_DIALOG] Set up task dialog for user options
                    title = str_18(lan)
                    dialog = TaskDialog(title)
                    dialog.MainInstruction = str_1(lan)
                    dialog.MainContent = str_3(lan)
                    dialog.TitleAutoPrefix = False
                    dialog.AllowCancellation = True
                    dialog.CommonButtons = TaskDialogCommonButtons.Cancel
                    dialog.DefaultButton = TaskDialogResult.None
                    dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink1,
                                        str_4(lan),
                                        str_5(lan))
                    dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink2,
                                        str_6(lan),
                                        str_7(lan))
                    dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink3,
                                        str_8(lan),
                                        str_9(lan))
                    result = dialog.Show()
                    
                    # [SCRIPT:HANDLE_CANCEL] Handle cancel option
                    if result == TaskDialogResult.Cancel:
                        forms.alert(str_10(lan))
                        sys.exit()

                    # [SCRIPT:REDUCE_SELECTION_BY_ANY_PARAMETER_VALUE] Handle "Reduce Selection by Elements with Any Parameter Value"
                    if result == TaskDialogResult.CommandLink1:
                        """
                        This function handles the event when the "Reduce Selection by Elements with Any Parameter Value" option is chosen.

                        Workflow:
                        1. Displays a form for the user to select a parameter and categories.
                        2. Filters elements based on the selected parameter and categories.
                        3. Updates the selection in the Revit model to exclude elements with any value for the selected parameter.
                        4. Implements exception handling to ensure the form remains stable in case of errors.

                        Key Features:
                        - Allows reducing the current selection by excluding elements with any parameter value.
                        - Updates the UI to reflect the selected elements and their properties.
                        - Ensures proper handling of exceptions to maintain application stability.
                        """
                        # [SCRIPT:COMMON_CATEGORIES] Define common categories
                        categories = {
                            'Doors': Doors,
                                'Windows': Windows,
                                'Walls': Walls,
                                'AirTerminals': AirTerminals,
                                'Doors': Doors,
                                'CableTrayFittings': CableTrayFittings,
                                'CableTrays': CableTrays,
                                'Casework': Casework,
                                'Ceilings': Ceilings,
                                'Columns': Columns,
                                'CommunicationDevices': CommunicationDevices,
                                'ConduitFitting': ConduitFitting,
                                'Conduit': Conduit,
                                'CurtainWallPanels': CurtainWallPanels,
                                'CurtainWallMullions': CurtainWallMullions,
                                'DataDevices': DataDevices,
                                'DuctAccessory': DuctAccessory,
                                'DuctFitting': DuctFitting,
                                'DuctInsulations': DuctInsulations,
                                'DuctLinings': DuctLinings,
                                'DuctCurves': DuctCurves,
                                'ElectricalEquipment': ElectricalEquipment,
                                'ElectricalFixtures': ElectricalFixtures,
                                'FireAlarmDevices': FireAlarmDevices,
                                'FlexDuctCurves': FlexDuctCurves,
                                'FlexPipeCurves': FlexPipeCurves,
                                'Floors': Floors,
                                'Furniture': Furniture,
                                'FurnitureSystems': FurnitureSystems,
                                'GenericModel': GenericModel,
                                'LightingDevices': LightingDevices,
                                'LightingFixtures': LightingFixtures,
                                'MechanicalEquipment': MechanicalEquipment,
                                'NurseCallDevices': NurseCallDevices,
                                'PipeAccessory': PipeAccessory,
                                'PipeFitting': PipeFitting,
                                'PipeInsulations': PipeInsulations,
                                'PipeCurves': PipeCurves,
                                'Planting': Planting,
                                'PlumbingFixtures': PlumbingFixtures,
                                'StairsRailing': StairsRailing,
                                'Ramps': Ramps,
                                'Roofs': Roofs,
                                'Rooms': Rooms,
                                'SecurityDevices': SecurityDevices,
                                'Site': Site,
                                'SpecialityEquipment': SpecialityEquipment,
                                'Sprinklers': Sprinklers,
                                'Stairs': Stairs,
                                'AreaRein': AreaRein,
                                'StructuralColumns': StructuralColumns,
                                'StructConnections': StructConnections,
                                'StructuralFoundation': StructuralFoundation,
                                'StructuralFraming': StructuralFraming,
                                'PathRein': PathRein,
                                'Rebar': Rebar,
                                'StructuralStiffener': StructuralStiffener,
                                'StructuralTruss': StructuralTruss,
                                'TelephoneDevices': TelephoneDevices,
                        }
                        
                        # [UI:PARAMETER_FORM] Set up parameter form
                        icon_path = pvalue_icon()
                        search_image_path = pvalue_back()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        parameter_label = str_11(lan)
                        window_name = str_18(lan)
                        url = parsweb(wurl)
                        with forms.ProgressBar(title='', indeterminate=True):
                            selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                        
                        if selected_parameter is None:
                            forms.alert(str_10(lan))
                            sys.exit()
                        
                        # [UI:SELECT_CATEGORIES] Prompt user to select categories
                        if selected_parameter:
                            selected_categories = forms.SelectFromList.show(
                                categories.keys(),
                                title= str_12(lan),
                                multiselect=True,
                                button_name = str_12_(lan)
                            )
                            if selected_categories is None:
                                forms.alert(str_10(lan))
                                sys.exit()

                            # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories to functions
                            converted_categories = {
                                category: categories[category]
                                for category in selected_categories
                            }

                            # [SCRIPT:GET_ELEMENT_IDS] Get element IDs for selected categories and parameter
                            all_selected_ids = []
                            for category_name, get_element_ids_func in converted_categories.items():
                                table_data, selected_ids = category_id_param(category_name, get_element_ids_func, selected_parameter)
                                all_selected_ids.extend(selected_ids)  
                            
                            if not all_selected_ids:
                                forms.alert(str_15(lan), title=str_13(lan))
                            else:
                                # [SCRIPT:CREATE_ELEMENT_LIST] Create list of Revit elements
                                revit_elements = List[DB.ElementId]()
                                for element_id in all_selected_ids:
                                    revit_elements.Add(element_id)

                                # [SCRIPT:CONVERT_IDS] Convert element IDs to integers
                                id_list = []  
                                for element_id in revit_elements:
                                    id_list.append(element_id.IntegerValue)  
                                    
                                    # [SCRIPT:FILTER_SELECTION] Filter selected elements
                                    element_ids_to_remove = id_list
                                    selected_elements = revit.get_selection()
                                    element_ids_to_remove_objects = [DB.ElementId(id) for id in element_ids_to_remove]
                                    filtered_selection = [element for element in selected_elements if element.Id not in element_ids_to_remove_objects]
                                    
                                    # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                                    updated_selection_ids = [element.Id for element in filtered_selection]
                                    revit.uidoc.Selection.SetElementIds(List[DB.ElementId](updated_selection_ids))
                                    
                                    # [SCRIPT:CHECK_SELECTION] Check if any elements remain
                                    if len(updated_selection_ids) == 0:
                                        forms.alert(str_16(lan), title=str_13(lan))
                                        sys.exit()
                                    else:
                                        # [UI:SHOW_ELEMENTS] Show updated selection
                                        revit.uidoc.ShowElements(List[DB.ElementId](updated_selection_ids))
                        else:
                            forms.alert(str_17(lan))
                    
                    # [SCRIPT:REDUCE_SELECTION_BY_SPECIFIC_PARAMETER_VALUE] Handle "Reduce Selection by Elements with a Specific Parameter Value"
                    if result == TaskDialogResult.CommandLink2:
                        """
                        This function handles the event when the "Reduce Selection by Elements with a Specific Parameter Value" option is chosen.

                        Workflow:
                        1. Displays a form for the user to select a parameter and categories.
                        2. Filters elements based on the selected parameter and categories.
                        3. Updates the selection in the Revit model to exclude elements with a specific value for the selected parameter.
                        4. Implements exception handling to ensure the form remains stable in case of errors.

                        Key Features:
                        - Allows reducing the current selection by excluding elements with a specific parameter value.
                        - Updates the UI to reflect the selected elements and their properties.
                        - Ensures proper handling of exceptions to maintain application stability.
                        """
                        
                        # [SCRIPT:COMMON_CATEGORIES] Define common categories
                        categories = {
                                'Doors': Doors,
                                'Windows': Windows,
                                'Walls': Walls,
                                'AirTerminals': AirTerminals,
                                'Doors': Doors,
                                'CableTrayFittings': CableTrayFittings,
                                'CableTrays': CableTrays,
                                'Casework': Casework,
                                'Ceilings': Ceilings,
                                'Columns': Columns,
                                'CommunicationDevices': CommunicationDevices,
                                'ConduitFitting': ConduitFitting,
                                'Conduit': Conduit,
                                'CurtainWallPanels': CurtainWallPanels,
                                'CurtainWallMullions': CurtainWallMullions,
                                'DataDevices': DataDevices,
                                'DuctAccessory': DuctAccessory,
                                'DuctFitting': DuctFitting,
                                'DuctInsulations': DuctInsulations,
                                'DuctLinings': DuctLinings,
                                'DuctCurves': DuctCurves,
                                'ElectricalEquipment': ElectricalEquipment,
                                'ElectricalFixtures': ElectricalFixtures,
                                'FireAlarmDevices': FireAlarmDevices,
                                'FlexDuctCurves': FlexDuctCurves,
                                'FlexPipeCurves': FlexPipeCurves,
                                'Floors': Floors,
                                'Furniture': Furniture,
                                'FurnitureSystems': FurnitureSystems,
                                'GenericModel': GenericModel,
                                'LightingDevices': LightingDevices,
                                'LightingFixtures': LightingFixtures,
                                'MechanicalEquipment': MechanicalEquipment,
                                'NurseCallDevices': NurseCallDevices,
                                'PipeAccessory': PipeAccessory,
                                'PipeFitting': PipeFitting,
                                'PipeInsulations': PipeInsulations,
                                'PipeCurves': PipeCurves,
                                'Planting': Planting,
                                'PlumbingFixtures': PlumbingFixtures,
                                'StairsRailing': StairsRailing,
                                'Ramps': Ramps,
                                'Roofs': Roofs,
                                'Rooms': Rooms,
                                'SecurityDevices': SecurityDevices,
                                'Site': Site,
                                'SpecialityEquipment': SpecialityEquipment,
                                'Sprinklers': Sprinklers,
                                'Stairs': Stairs,
                                'AreaRein': AreaRein,
                                'StructuralColumns': StructuralColumns,
                                'StructConnections': StructConnections,
                                'StructuralFoundation': StructuralFoundation,
                                'StructuralFraming': StructuralFraming,
                                'PathRein': PathRein,
                                'Rebar': Rebar,
                                'StructuralStiffener': StructuralStiffener,
                                'StructuralTruss': StructuralTruss,
                                'TelephoneDevices': TelephoneDevices,
                            }
                        
                        # [UI:PARAMETER_FORM] Set up parameter form
                        icon_path = pvalue_icon()
                        search_image_path = pvalue_back()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        parameter_label = str_11(lan)
                        window_name = str_18(lan)
                        url = parsweb(wurl)
                        with forms.ProgressBar(title='', indeterminate=True):
                            selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                        
                        if selected_parameter is None:
                            forms.alert(str_10(lan))
                            sys.exit()
                        
                        # [UI:SELECT_CATEGORIES] Prompt user to select categories
                        if selected_parameter:
                            selected_categories = forms.SelectFromList.show(
                                categories.keys(),
                                title=str_12(lan),
                                multiselect=True,
                                button_name = str_12_(lan)
                            )
                            if selected_categories is None:
                                forms.alert(str_10(lan))
                                sys.exit()
                            
                            # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories to functions
                            converted_categories = {
                                category: categories[category]
                                for category in selected_categories
                            }

                            # [SCRIPT:GET_ELEMENT_IDS] Get element IDs for selected categories and parameter
                            all_selected_element_ids = []  
                            for category_name, get_element_ids_func in converted_categories.items():
                                element_ids = get_element_ids_func()
                                for element_id in element_ids:
                                    element = revit.doc.GetElement(element_id)
                                    parameter = element.LookupParameter(selected_parameter)
                                    if parameter and parameter.HasValue:
                                        all_selected_element_ids.append(element_id.IntegerValue)  
                            if not all_selected_element_ids:
                                forms.alert(str_14(lan), title=str_13(lan))
                            else:
                                # [SCRIPT:FILTER_SELECTION] Filter selected elements
                                element_ids_to_remove = all_selected_element_ids
                                selected_elements = revit.get_selection()
                                element_ids_to_remove_objects = [DB.ElementId(id) for id in element_ids_to_remove]
                                filtered_selection = [element for element in selected_elements if element.Id not in element_ids_to_remove_objects]
                                
                                # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                                updated_selection_ids = [element.Id for element in filtered_selection]
                                revit.uidoc.Selection.SetElementIds(List[DB.ElementId](updated_selection_ids))
                                
                                # [UI:SHOW_ELEMENTS] Show updated selection
                                revit.uidoc.ShowElements(List[DB.ElementId](updated_selection_ids))
                    
                    # [SCRIPT:REDUCE_SELECTION_BY_NO_PARAMETER_VALUE] Handle "Reduce Selection by Elements with No Parameter Value"
                    if result == TaskDialogResult.CommandLink3:
                        """
                        This function handles the event when the "Reduce Selection by Elements with No Parameter Value" option is chosen.

                        Workflow:
                        1. Displays a form for the user to select a parameter and categories.
                        2. Filters elements based on the selected parameter and categories.
                        3. Updates the selection in the Revit model to exclude elements with no value for the selected parameter.
                        4. Implements exception handling to ensure the form remains stable in case of errors.

                        Key Features:
                        - Allows reducing the current selection by excluding elements with no parameter value.
                        - Updates the UI to reflect the selected elements and their properties.
                        - Ensures proper handling of exceptions to maintain application stability.
                        """
                        
                        # [SCRIPT:COMMON_CATEGORIES] Define common categories 
                        categories = {
                                    'Doors': Doors,
                                    'Windows': Windows,
                                    'Walls': Walls,
                                    'AirTerminals': AirTerminals,
                                    'Doors': Doors,
                                    'CableTrayFittings': CableTrayFittings,
                                    'CableTrays': CableTrays,
                                    'Casework': Casework,
                                    'Ceilings': Ceilings,
                                    'Columns': Columns,
                                    'CommunicationDevices': CommunicationDevices,
                                    'ConduitFitting': ConduitFitting,
                                    'Conduit': Conduit,
                                    'CurtainWallPanels': CurtainWallPanels,
                                    'CurtainWallMullions': CurtainWallMullions,
                                    'DataDevices': DataDevices,
                                    'DuctAccessory': DuctAccessory,
                                    'DuctFitting': DuctFitting,
                                    'DuctInsulations': DuctInsulations,
                                    'DuctLinings': DuctLinings,
                                    'DuctCurves': DuctCurves,
                                    'ElectricalEquipment': ElectricalEquipment,
                                    'ElectricalFixtures': ElectricalFixtures,
                                    'FireAlarmDevices': FireAlarmDevices,
                                    'FlexDuctCurves': FlexDuctCurves,
                                    'FlexPipeCurves': FlexPipeCurves,
                                    'Floors': Floors,
                                    'Furniture': Furniture,
                                    'FurnitureSystems': FurnitureSystems,
                                    'GenericModel': GenericModel,
                                    'LightingDevices': LightingDevices,
                                    'LightingFixtures': LightingFixtures,
                                    'MechanicalEquipment': MechanicalEquipment,
                                    'NurseCallDevices': NurseCallDevices,
                                    'PipeAccessory': PipeAccessory,
                                    'PipeFitting': PipeFitting,
                                    'PipeInsulations': PipeInsulations,
                                    'PipeCurves': PipeCurves,
                                    'Planting': Planting,
                                    'PlumbingFixtures': PlumbingFixtures,
                                    'StairsRailing': StairsRailing,
                                    'Ramps': Ramps,
                                    'Roofs': Roofs,
                                    'Rooms': Rooms,
                                    'SecurityDevices': SecurityDevices,
                                    'Site': Site,
                                    'SpecialityEquipment': SpecialityEquipment,
                                    'Sprinklers': Sprinklers,
                                    'Stairs': Stairs,
                                    'AreaRein': AreaRein,
                                    'StructuralColumns': StructuralColumns,
                                    'StructConnections': StructConnections,
                                    'StructuralFoundation': StructuralFoundation,
                                    'StructuralFraming': StructuralFraming,
                                    'PathRein': PathRein,
                                    'Rebar': Rebar,
                                    'StructuralStiffener': StructuralStiffener,
                                    'StructuralTruss': StructuralTruss,
                                    'TelephoneDevices': TelephoneDevices,
                                }
                        
                        # [UI:PARAMETER_FORM] Set up parameter form
                        icon_path = pvalue_icon()
                        search_image_path = pvalue_back()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        parameter_label = str_11(lan)
                        window_name = str_18(lan)
                        url = parsweb(wurl)
                        with forms.ProgressBar(title='', indeterminate=True):
                            selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                        
                        if selected_parameter is None:
                            forms.alert(str_10(lan))
                            sys.exit()
                        
                        # [UI:SELECT_CATEGORIES] Prompt user to select categories
                        selected_categories = forms.SelectFromList.show(
                            categories.keys(),
                            title=str_12(lan),
                            multiselect=True,
                            button_name = str_12_(lan)
                        )
                        if selected_categories is None:
                            forms.alert(str_10(lan))
                            sys.exit()
                        
                        # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories to functions
                        converted_categories = {
                            category: categories[category]
                            for category in selected_categories
                        }
                        
                        # [SCRIPT:GET_ELEMENT_IDS] Get element IDs for selected categories and parameter
                        all_selected_element_ids = [] 
                        for category_name, get_element_ids_func in converted_categories.items():
                            selected_element_ids = category_id_param3(category_name, get_element_ids_func, selected_parameter)
                            all_selected_element_ids.extend(selected_element_ids)
                        if not all_selected_element_ids:
                            forms.alert(str_14(lan), title=str_13(lan))
                        else:
                            # [SCRIPT:FILTER_SELECTION] Filter selected elements
                            element_ids_to_remove = all_selected_element_ids
                            selected_elements = revit.get_selection()
                            element_ids_to_remove_objects = [DB.ElementId(id) for id in element_ids_to_remove]
                            filtered_selection = [element for element in selected_elements if element.Id not in element_ids_to_remove_objects]
                            
                            # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                            updated_selection_ids = [element.Id for element in filtered_selection]
                            revit.uidoc.Selection.SetElementIds(List[DB.ElementId](updated_selection_ids))
                            
                            # [UI:SHOW_ELEMENTS] Show updated selection
                            revit.uidoc.ShowElements(List[DB.ElementId](updated_selection_ids))

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from structure.root import lan_path
                from UI.strings_reduce_selection_based_on_existence_of_parameter_value import str_19, str_20, str_21, str_22
                
                lan = lan_path()
                
                # [SCRIPT:GET_SELECTED_ELEMENTS] Get selected elements
                selection = revit.get_selection()

                if selection:  
                    # [SCRIPT:INITIALIZE_DATA] Initialize lists to store element data
                    ids = []
                    names = []
                    categories = []
                    
                    # [SCRIPT:COLLECT_DATA] Collect data from each selected element
                    for element in selection:
                        try:
                            ids.append(element.Id.ToString())
                            names.append(element.Name if hasattr(element, 'Name') else '')
                            categories.append(element.Category.Name if hasattr(element, 'Category') and element.Category else '')
                        except Exception as e:
                            MessageBox.Show(str(e),str_19(lan))
                            continue
                    
                    # [SCRIPT:CREATE_TABLE] Create the data table
                    headers = [str_20(lan), str_21(lan), str_22(lan)]
                    data = [
                        ids,
                        names,
                        categories
                    ]
                    editable = [False, False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                else:
                    # [SCRIPT:EMPTY_TABLE] Create empty table if no elements are selected
                    headers = [str_20(lan), str_21(lan), str_22(lan)]
                    data = [[], [], []]  # Empty data
                    editable = [False, False, False]
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                # [ERROR:HANDLE_EXCEPTION] Handle exceptions and show error message
                from structure.root import lan_path
                from UI.strings_reduce_selection_based_on_existence_of_parameter_value import str_19
                lan = lan_path()
                MessageBox.Show(str(e),str_19(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Delete Elements by ID] Element Deletion by ID
        #
        # Handles deletion of elements based on their IDs:
        # - Deletes elements by specified IDs
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:DELETE_ELEMENTS_BY_ID]
        elif button_text == tool_str_20(lan):
            """
            This script handles the "Delete Elements by ID" functionality in the BIM Pars app for Revit projects.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Checks if any elements are selected in Revit.
            4. If no elements are selected, a user interface (UI) form is displayed to prompt the user for entering a list of element IDs to delete.
            5. The form includes a textbox for the user to input element IDs, a check button to validate the input, a delete button to confirm deletion, and a cancel button to close the form.
            6. The form provides a progress bar and dynamic UI updates based on the user’s actions.
            7. The inputted element IDs are validated, and any invalid IDs are flagged with an error message.
            8. Once valid IDs are confirmed, the deletion process begins, and a report of the deletion is shown, including the number of elements deleted.
            9. If deletion is successful, the selected elements are deleted from the Revit document.
            10. If any errors occur during the process (e.g., invalid input or Revit errors), appropriate messages are displayed.
            11. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                from pyrevit import revit, forms

                def delete_by_element_id():
                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    import os
                    import sys
                    import System.Drawing as Drawing
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit
                    from System.Windows.Forms import Form, Label, TextBox, Button, PictureBox, Cursors
                    import Autodesk.Revit.DB as DB
                    from RevitServices.Persistence import DocumentManager
                    import webbrowser
                    import pyrevit
                    from pyrevit import revit, forms
                    import getpass
                    from datetime import datetime  
                    import os
                    import sys
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.select import idlist_inserted
                    from sajdmo.scripts.delete import selection_delete_el
                    from structure.root import wurl_path, delete_sym, delete_back, reduId_icon, find_button, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon
                    from UI.strings_delete_by_id import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, 
                    str_20, str_21, str_h1, str_h2)
                    from UI.url import parsweb

                    lan = lan_path()
                    wurl= wurl_path()
                    parameter_label = str_1(lan)
                    window_name = str_2(lan)

                    # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document and selection
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    
                    if selection:
                        forms.alert(str_19(lan), title=str_2(lan))
                    else:
                        element_ids = []
                        descriptions = []

                        with forms.ProgressBar(title='', indeterminate=True):
                            class DELETE_BY_ID(Form):
                                def __init__(self, doc):
                                    # [UI:FORM_INIT] Initialize form properties
                                    self.Text = str_2(lan)
                                    self.Width = 300
                                    self.Height = 320
                                    self.BackColor = Color.White
                                    self.doc = doc
                                    self.CenterToScreen()
                                    self.Icon = Drawing.Icon(reduId_icon())

                                    # [UI:PICTUREBOX] Add picture box
                                    self.pictureBoxSFIPV = PictureBox()
                                    self.pictureBoxSFIPV.Location = Point(110, 30)
                                    self.pictureBoxSFIPV.Size = Size(65, 65)
                                    imageSFIPV = Image.FromFile(delete_back())
                                    self.pictureBoxSFIPV.Image = imageSFIPV
                                    self.Controls.Add(self.pictureBoxSFIPV)

                                    # [UI:LABEL1] Add label for parameter input
                                    self.label1 = Label()
                                    self.label1.Text = str_1(lan)
                                    self.label1.Location = Point(40, 125)
                                    self.label1.AutoSize = True
                                    self.label1.Font = Font(self.label1.Font, FontStyle.Bold)
                                    self.Controls.Add(self.label1)

                                    # [UI:LABEL2] Add label for validation messages
                                    self.label2 = Label()
                                    self.label2.Text = ""
                                    self.label2.Location = Point(300, 80)
                                    self.label2.AutoSize = True
                                    self.label2.MaximumSize = Size(240,240)
                                    self.Controls.Add(self.label2)

                                    # [UI:LABEL3] Add label for instructions
                                    self.label3 = Label()
                                    self.label3.Text = str_3(lan)
                                    self.label3.Location = Point(300, 20)
                                    self.label3.AutoSize = True
                                    self.label3.Font = Font(self.label3.Font, FontStyle.Bold)
                                    self.label3.MaximumSize = Size(240,75)

                                    # [UI:TEXTBOX] Add textbox for element IDs
                                    self.textbox1 = TextBox()
                                    self.textbox1.Width = 200
                                    self.textbox1.Location = Point(40, 150)
                                    self.textbox1.TextChanged += self.textbox_TextChanged
                                    self.Controls.Add(self.textbox1)

                                    # [UI:CHECK_BUTTON] Add check button for validation
                                    self.check_button = Button()
                                    self.check_button.Location = Point(80, 200)
                                    self.check_button.Width = 35
                                    self.check_button.Height = 35
                                    self.check_button.Image = Icon(find_button()).ToBitmap()
                                    self.check_button.Enabled = False
                                    self.check_button.Click += self.check_button_clicked
                                    self.Controls.Add(self.check_button)

                                    # [UI:CANCEL_BUTTON] Add cancel button
                                    self.cancel_button = Button()
                                    self.cancel_button.Location = Point(160, 200)
                                    self.cancel_button.Width = 35
                                    self.cancel_button.Height = 35
                                    self.cancel_button.Image = Icon(cancel_icon()).ToBitmap()
                                    self.cancel_button.Click += self.cancel_button_clicked
                                    self.Controls.Add(self.cancel_button)

                                    # [UI:DELETE_BUTTON] Add delete button
                                    self.delete_button = Button()
                                    self.delete_button.Location = Point(120, 200)
                                    self.delete_button.Width = 35
                                    self.delete_button.Height = 35
                                    self.delete_button.Image = Icon(ok_icon()).ToBitmap()
                                    self.delete_button.Enabled = False
                                    self.delete_button.Click += self.delete_button_clicked
                                    self.Controls.Add(self.delete_button)

                                    # [UI:CREATED_BY_LABEL] Add "Created by" label
                                    self.created_by_label = Label()
                                    self.created_by_label.AutoSize = True
                                    self.created_by_label.Text = "BIM Pars"
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.created_by_label.ForeColor = Color.Blue
                                    self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                    self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                    self.created_by_label.Cursor = Cursors.Hand  
                                    self.created_by_label.Click += self.Label_Click
                                    self.Controls.Add(self.created_by_label)

                                # [UI:LABEL_CLICK] Handle label click event
                                def Label_Click(self, sender, event):
                                    url = parsweb(wurl)
                                    webbrowser.open(url)

                                # [UI:TEXTBOX_TEXT_CHANGED] Handle textbox text change event
                                def textbox_TextChanged(self, sender, e):
                                    if self.textbox1.Text:
                                        self.check_button.Enabled = True
                                        self.delete_button.Enabled = False
                                    else:
                                        self.check_button.Enabled = False
                                        self.delete_button.Enabled = False
                                        self.Width = 300
                                        self.created_by_label.Left = 130
                                        self.label2.Text=""
                                        self.Controls.Remove(self.label3)

                                # [UI:CANCEL_BUTTON_CLICKED] Handle cancel button click event
                                def cancel_button_clicked(self, sender, e):
                                    try:
                                        self.Close()
                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass

                                # [UI:CHECK_BUTTON_CLICKED] Handle check button click event
                                def check_button_clicked(self, sender, e):
                                    try:
                                        self.Width = 600
                                        self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                        self.Controls.Add(self.label3)
                                        id_str = self.textbox1.Text
                                        ms_title= str_4(lan)
                                        ms_allinvalid = str_5(lan)
                                        ms_e_integer = str_6(lan)
                                        ms_e_doc = str_7(lan)
                                        ms_valid = str_8(lan)
                                        self.label2.Text = idlist_inserted(id_str, ms_title, ms_allinvalid, ms_e_integer, ms_e_doc, ms_valid)
                                        self.check_button.Enabled = False
                                        self.delete_button.Enabled = True
                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass

                                # [UI:DELETE_BUTTON_CLICKED] Handle delete button click event
                                def delete_button_clicked(self, sender, e):
                                    try:
                                        from pyrevit import script

                                        # [SCRIPT:REPORT] Generate report
                                        selection = revit.uidoc.Selection
                                        selected_ids = selection.GetElementIds()
                                        caunt = len(selected_ids)
                                        if selected_ids:
                                            for element_id in selected_ids:
                                                element_ids.append(element_id.IntegerValue)
                                                descriptions.append(str_9(lan))
                                            element_ids.append(str_16(lan))
                                            descriptions.append(caunt)

                                        # [SCRIPT:DELETE_ELEMENTS] Delete elements
                                        self.delete_button.Enabled = False
                                        tit_msg = str_13(lan)
                                        succ_msg = str_14(lan)
                                        unsucc_msg = str_15(lan)
                                        selection_delete_el(tit_msg, succ_msg, unsucc_msg)

                                    except StopIteration:
                                        pass
                                        self.Close()
                                    except Exception:
                                        forms.alert(str_18(lan), title= str_17(lan))
                                        output = script.get_output()
                                        output.close()
                                        self.Close()   
                                        self.Close()           
                                    except SystemExit:
                                        pass
                                        self.Close()
                                    self.Close()

                            # [SCRIPT:GET_DOCUMENT] Get active document
                            doc = DocumentManager.Instance.CurrentDBDocument
                            if 'form' not in globals():
                                pass
                            else:
                                form =  DELETE_BY_ID(doc)
                                form.ShowDialog()

                        return element_ids, descriptions

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from structure.root import lan_path
                from UI.strings_delete_by_id import str_20, str_21
                
                lan = lan_path()              
                
                # [SCRIPT:INITIALIZE_DATA] Initialize element_ids and descriptions
                element_ids, descriptions = delete_by_element_id()

                # [SCRIPT:CHECK_DATA] Check if the lists are not empty
                if element_ids and descriptions:
                    # [SCRIPT:CREATE_REPORT_TAB] Create report tab
                    headers = [str_20(lan), str_21(lan)]
                    data = [
                        element_ids,
                        descriptions
                    ]
                    editable = [False, False]
                    self.create_report_tab(headers, data, editable, title=button_text) 

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                pass
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Delete Elements by IDs from Excel] Element Deletion by Excel IDs
        #
        # Handles deletion of elements based on IDs from Excel:
        # - Imports element IDs from Excel
        # - Deletes elements by specified IDs
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:DELETE_ELEMENTS_BY_EXCEL_IDS]
        elif button_text == tool_str_21(lan):
            """
            This function handles the event when the "Delete Elements by IDs from Excel" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the Excel-based deletion operations.
            2. Displays a form with three tabs for different Excel import options:
            - Tab 1: Import Excel file and delete elements based on row data.
            - Tab 2: Import Excel file and delete elements based on column data.
            - Tab 3: Import Excel file and delete elements based on cell data.
            3. Reads element IDs from the selected Excel file and deletes the corresponding elements in the Revit model.
            4. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows deleting elements by reading their IDs from an Excel file.
            - Supports three different Excel import options (row, column, cell).
            - Updates the UI to reflect the deleted elements and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                def delete_elements_by_excel():
                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    import System.Windows.Forms as WinForms
                    import System.Drawing as Drawing
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit
                    from System.Windows.Forms import Form, Label, TextBox, Button, PictureBox, Cursors
                    import Autodesk.Revit.DB as DB
                    from RevitServices.Persistence import DocumentManager
                    import webbrowser
                    import xlrd
                    from pyrevit import revit, forms, DB
                    from System.Collections.Generic import List
                    import getpass
                    from datetime import datetime  
                    import os
                    import sys
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.delete import selection_delete_el
                    from structure.root import wurl_path, find_button, delete_back, delete_sym, delete_back, excelid_icon, importexc_button, green_light, red_light, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon
                    from UI.strings_delete_elements_by_ids_from_excel import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                    str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_h1, str_h2)
                    from UI.url import parsweb

                    lan = lan_path()
                    wurl= wurl_path()
                    
                    # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document and selection
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    
                    if selection:
                        forms.alert(str_32(lan), title=str_29(lan))
                    else:
                        # [UI:EXCEL_FORM] Set up Excel form properties
                        icon_path = excelid_icon()
                        search_image_path = delete_back()
                        import_icon = importexc_button()
                        ok_icon_path = find_button()
                        delete_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        ready_light = green_light()
                        not_ready_light = red_light()
                        parameter_label = str_2(lan)
                        value_label = str_3(lan)
                        doc = __revit__.ActiveUIDocument.Document

                        # [UI:DELETE_EXCEL_FORM] Define DELETE_EXCEL form class
                        class DELETE_EXCEL(Form):
                            def __init__(self, doc):
                                """
                                This function initializes the form for deleting elements based on Excel data.

                                Workflow:
                                1. Sets up the form with three tabs for different Excel import options:
                                - Tab 1: Import Excel file and delete elements based on row data.
                                - Tab 2: Import Excel file and delete elements based on column data.
                                - Tab 3: Import Excel file and delete elements based on cell data.
                                2. Configures UI elements such as labels, textboxes, buttons, and picture boxes.
                                3. Implements event handlers for button clicks and text changes.

                                Key Features:
                                - Provides a user-friendly interface for importing Excel data.
                                - Supports three different Excel import options (row, column, cell).
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:FORM_INIT] Initialize form properties
                                self.Text = str_29(lan)
                                self.Width = 420
                                self.Height = 450
                                self.BackColor = Color.White
                                self.doc = doc
                                self.CenterToScreen()
                                self.Icon = Drawing.Icon(icon_path)
                                self.report_excel_data = []

                                # [UI:TAB_CONTROL] Set up tab control
                                self.tabControl = WinForms.TabControl()
                                self.tabControl.Dock = WinForms.DockStyle.Fill

                                # [UI:TAB_PAGE_1] Set up Tab 1
                                tabPage1 = WinForms.TabPage()
                                tabPage1.Text = str_1(lan)
                                tabPage1.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage1)

                                # [UI:TAB_PAGE_2] Set up Tab 2
                                tabPage2 = WinForms.TabPage()
                                tabPage2.Text = str_4(lan)
                                tabPage2.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage2)

                                # [UI:TAB_PAGE_3] Set up Tab 3
                                tabPage3 = WinForms.TabPage()
                                tabPage3.Text = str_5(lan)
                                tabPage3.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage3)

                                # [UI:PICTUREBOX] Add picture box
                                self.pictureBoxSFIPV = PictureBox()
                                self.pictureBoxSFIPV.Location = Point(165, 25)
                                self.pictureBoxSFIPV.Size = Size(65, 65)
                                imageSFIPV = Image.FromFile(search_image_path)
                                self.pictureBoxSFIPV.Image = imageSFIPV
                                self.Controls.Add(self.pictureBoxSFIPV)

                                # [UI:STATUS_INDICATOR_TAB1] Add status indicator for Tab 1
                                self.pictureBoxSFIPV = PictureBox()
                                self.pictureBoxSFIPV.Location = Point(80, 95)
                                self.pictureBoxSFIPV.Size = Size(25, 25)
                                imageSFIPV = Image.FromFile(not_ready_light)
                                self.pictureBoxSFIPV.Image = imageSFIPV
                                tabPage1.Controls.Add(self.pictureBoxSFIPV)

                                # [UI:STATUS_INDICATOR_TAB2] Add status indicator for Tab 2
                                self.pictureBoxSFIPV_t2 = PictureBox()
                                self.pictureBoxSFIPV_t2.Location = Point(80, 95)
                                self.pictureBoxSFIPV_t2.Size = Size(25, 25)
                                imageSFIPV_t2 = Image.FromFile(not_ready_light)
                                self.pictureBoxSFIPV_t2.Image = imageSFIPV_t2
                                tabPage2.Controls.Add(self.pictureBoxSFIPV_t2)

                                # [UI:STATUS_INDICATOR_TAB3] Add status indicator for Tab 3
                                self.pictureBoxSFIPV_t3 = PictureBox()
                                self.pictureBoxSFIPV_t3.Location = Point(80, 95)
                                self.pictureBoxSFIPV_t3.Size = Size(25, 25)
                                imageSFIPV_t3 = Image.FromFile(not_ready_light)
                                self.pictureBoxSFIPV_t3.Image = imageSFIPV_t3
                                tabPage3.Controls.Add(self.pictureBoxSFIPV_t3)

                                # [UI:LABEL0] Add label for file path display
                                self.label0 = Label()
                                self.label0.Text = ""
                                self.label0.Location = Point(40, 210)
                                self.label0.AutoSize = True
                                self.label0.MaximumSize = Size(330, 100)
                                self.Controls.Add(self.label0)

                                # [UI:NOTELABEL] Add label for notes
                                self.notelabel = Label()
                                self.notelabel.Text = ""
                                self.notelabel.Location = Point(420, 40)
                                self.notelabel.AutoSize = True
                                self.notelabel.MaximumSize = Size(330, 100)
                                self.notelabel.Font = Font(self.notelabel.Font, FontStyle.Bold)
                                self.Controls.Add(self.notelabel)

                                # [UI:REPORTLABEL] Add label for report
                                self.reportlabel = Label()
                                self.reportlabel.Text = ""
                                self.reportlabel.Location = Point(420, 80)
                                self.reportlabel.AutoSize = True
                                self.reportlabel.MaximumSize = Size(330, 400)
                                self.Controls.Add(self.reportlabel)

                                # [UI:LABEL1_TAB1] Add label for parameter input in Tab 1
                                self.label1 = Label()
                                self.label1.Text = parameter_label
                                self.label1.Location = Point(140, 100)
                                self.label1.AutoSize = True
                                self.label1.Font = Font(self.label1.Font, FontStyle.Bold)
                                tabPage1.Controls.Add(self.label1)

                                # [UI:TEXTBOX1_TAB1] Add textbox for parameter input in Tab 1
                                self.textbox1 = TextBox()
                                self.textbox1.Width = 35
                                self.textbox1.Location = Point(205, 95)
                                self.textbox1.TextChanged += self.textbox_TextChanged
                                self.textbox1.Enabled = False
                                tabPage1.Controls.Add(self.textbox1)

                                # [UI:LABEL1_TAB2] Add label for parameter input in Tab 2
                                self.label1_t2 = Label()
                                self.label1_t2.Text = parameter_label
                                self.label1_t2.Location = Point(140, 95)
                                self.label1_t2.AutoSize = True
                                self.label1_t2.Font = Font(self.label1_t2.Font, FontStyle.Bold)
                                tabPage2.Controls.Add(self.label1_t2)

                                # [UI:TEXTBOX1_TAB2] Add textbox for parameter input in Tab 2
                                self.textbox1_t2 = TextBox()
                                self.textbox1_t2.Width = 35
                                self.textbox1_t2.Location = Point(205, 95)
                                self.textbox1_t2.TextChanged += self.textbox_TextChanged2
                                self.textbox1_t2.Enabled = False
                                tabPage2.Controls.Add(self.textbox1_t2)

                                # [UI:LABEL2_TAB1] Add label for value input in Tab 1
                                self.label2 = Label()
                                self.label2.Text = value_label
                                self.label2.Location = Point(250, 100)
                                self.label2.AutoSize = True
                                self.label2.Font = Font(self.label2.Font, FontStyle.Bold)
                                tabPage1.Controls.Add(self.label2)

                                # [UI:TEXTBOX2_TAB1] Add textbox for value input in Tab 1
                                self.textbox2 = TextBox()
                                self.textbox2.Width = 35
                                self.textbox2.Location = Point(315, 95)
                                self.textbox2.TextChanged += self.textbox_TextChanged
                                self.textbox2.Enabled = False
                                tabPage1.Controls.Add(self.textbox2)

                                # [UI:LABEL2_TAB3] Add label for value input in Tab 3
                                self.label2_t3 = Label()
                                self.label2_t3.Text = value_label
                                self.label2_t3.Location = Point(140, 100)
                                self.label2_t3.AutoSize = True
                                self.label2_t3.Font = Font(self.label2_t3.Font, FontStyle.Bold)
                                tabPage3.Controls.Add(self.label2_t3)

                                # [UI:TEXTBOX2_TAB3] Add textbox for value input in Tab 3
                                self.textbox2_t3 = TextBox()
                                self.textbox2_t3.Width = 35
                                self.textbox2_t3.Location = Point(205, 95)
                                self.textbox2_t3.TextChanged += self.textbox_TextChanged3
                                self.textbox2_t3.Enabled = False
                                tabPage3.Controls.Add(self.textbox2_t3)

                                # [UI:IMPORT_BUTTON_TAB1] Add import button for Tab 1
                                self.import_button = Button()
                                self.import_button.Location = Point(40, 90)
                                self.import_button.Width = 35
                                self.import_button.Height = 35
                                self.import_button.Image = Icon(import_icon).ToBitmap()
                                self.import_button.Enabled = True
                                self.import_button.Click += self.import_clicked
                                tabPage1.Controls.Add(self.import_button)

                                # [UI:IMPORT_BUTTON_TAB2] Add import button for Tab 2
                                self.import_button_t2 = Button()
                                self.import_button_t2.Location = Point(40, 90)
                                self.import_button_t2.Width = 35
                                self.import_button_t2.Height = 35
                                self.import_button_t2.Image = Icon(import_icon).ToBitmap()
                                self.import_button_t2.Enabled = True
                                self.import_button_t2.Click += self.import_clicked2
                                tabPage2.Controls.Add(self.import_button_t2)

                                # [UI:IMPORT_BUTTON_TAB3] Add import button for Tab 3
                                self.import_button_t3 = Button()
                                self.import_button_t3.Location = Point(40, 90)
                                self.import_button_t3.Width = 35
                                self.import_button_t3.Height = 35
                                self.import_button_t3.Image = Icon(import_icon).ToBitmap()
                                self.import_button_t3.Enabled = True
                                self.import_button_t3.Click += self.import_clicked3
                                tabPage3.Controls.Add(self.import_button_t3)

                                # [UI:CHECK_BUTTON_TAB1] Add check button for Tab 1
                                self.check_button = Button()
                                self.check_button.Location = Point(140, 300)
                                self.check_button.Width = 35
                                self.check_button.Height = 35
                                self.check_button.Image = Icon(ok_icon_path).ToBitmap()
                                self.check_button.Enabled = False
                                self.check_button.Click += self.check_clicked
                                tabPage1.Controls.Add(self.check_button)

                                # [UI:CHECK_BUTTON_TAB2] Add check button for Tab 2
                                self.check_button_t2 = Button()
                                self.check_button_t2.Location = Point(140, 300)
                                self.check_button_t2.Width = 35
                                self.check_button_t2.Height = 35
                                self.check_button_t2.Image = Icon(ok_icon_path).ToBitmap()
                                self.check_button_t2.Enabled = False
                                self.check_button_t2.Click += self.check2_clicked
                                tabPage2.Controls.Add(self.check_button_t2)

                                # [UI:CHECK_BUTTON_TAB3] Add check button for Tab 3
                                self.check_button_t3 = Button()
                                self.check_button_t3.Location = Point(140, 300)
                                self.check_button_t3.Width = 35
                                self.check_button_t3.Height = 35
                                self.check_button_t3.Image = Icon(ok_icon_path).ToBitmap()
                                self.check_button_t3.Enabled = False
                                self.check_button_t3.Click += self.check3_clicked
                                tabPage3.Controls.Add(self.check_button_t3)

                                # [UI:CANCEL_BUTTON_TAB1] Add cancel button for Tab 1
                                self.cancel_button = Button()
                                self.cancel_button.Location = Point(220, 300)
                                self.cancel_button.Width = 35
                                self.cancel_button.Height = 35
                                self.cancel_button.Image = Icon(cancel_icon_path).ToBitmap()
                                self.cancel_button.Click += self.cancel_clicked
                                tabPage1.Controls.Add(self.cancel_button)

                                # [UI:CANCEL_BUTTON_TAB2] Add cancel button for Tab 2
                                self.cancel_button_t2 = Button()
                                self.cancel_button_t2.Location = Point(220, 300)
                                self.cancel_button_t2.Width = 35
                                self.cancel_button_t2.Height = 35
                                self.cancel_button_t2.Image = Icon(cancel_icon_path).ToBitmap()
                                self.cancel_button_t2.Click += self.cancel2_clicked
                                tabPage2.Controls.Add(self.cancel_button_t2)

                                # [UI:CANCEL_BUTTON_TAB3] Add cancel button for Tab 3
                                self.cancel_button_t3 = Button()
                                self.cancel_button_t3.Location = Point(220, 300)
                                self.cancel_button_t3.Width = 35
                                self.cancel_button_t3.Height = 35
                                self.cancel_button_t3.Image = Icon(cancel_icon_path).ToBitmap()
                                self.cancel_button_t3.Click += self.cancel3_clicked
                                tabPage3.Controls.Add(self.cancel_button_t3)

                                # [UI:DELETE_BUTTON_TAB1] Add delete button for Tab 1
                                self.delete_button = Button()
                                self.delete_button.Location = Point(180, 300)
                                self.delete_button.Width = 35
                                self.delete_button.Height = 35
                                self.delete_button.Image = Icon(delete_icon_path).ToBitmap()
                                self.delete_button.Click += self.delete_clicked
                                tabPage1.Controls.Add(self.delete_button)
                                self.delete_button.Enabled = False

                                # [UI:DELETE_BUTTON_TAB2] Add delete button for Tab 2
                                self.delete_button_t2 = Button()
                                self.delete_button_t2.Location = Point(180, 300)
                                self.delete_button_t2.Width = 35
                                self.delete_button_t2.Height = 35
                                self.delete_button_t2.Image = Icon(delete_icon_path).ToBitmap()
                                self.delete_button_t2.Click += self.delete2_clicked
                                tabPage2.Controls.Add(self.delete_button_t2)
                                self.delete_button_t2.Enabled = False

                                # [UI:DELETE_BUTTON_TAB3] Add delete button for Tab 3
                                self.delete_button_t3 = Button()
                                self.delete_button_t3.Location = Point(180, 300)
                                self.delete_button_t3.Width = 35
                                self.delete_button_t3.Height = 35
                                self.delete_button_t3.Image = Icon(delete_icon_path).ToBitmap()
                                self.delete_button_t3.Click += self.delete3_clicked
                                tabPage3.Controls.Add(self.delete_button_t3)
                                self.delete_button_t3.Enabled = False

                                # [UI:CREATED_BY_LABEL] Add "Created by" label
                                self.created_by_label = Label()
                                self.created_by_label.AutoSize = True
                                self.created_by_label.Text = "BIM Pars"
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.created_by_label.ForeColor = Color.Blue
                                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                self.created_by_label.Cursor = Cursors.Hand  
                                self.created_by_label.Click += self.Label_Click
                                self.Controls.Add(self.created_by_label)

                                # [UI:ADD_TAB_CONTROL] Add tab control to the form
                                self.Controls.Add(self.tabControl)

                            # [UI:LABEL_CLICK] Handle label click event
                            def Label_Click(self, sender, event):
                                """
                                This function handles the event when the "BIM Pars" label is clicked.

                                Workflow:
                                1. Opens the specified URL in the default web browser when the label is clicked.

                                Key Features:
                                - Provides a quick link to the BIM Pars website.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                url = parsweb(wurl)
                                webbrowser.open(url)

                            # [UI:IMPORT_CLICKED_TAB1] Handle import button click for Tab 1
                            def import_clicked(self, sender, e):
                                """
                                This function handles the event when the "Import" button is clicked in Tab 1.

                                Workflow:
                                1. Enables the textboxes for row and column input.
                                2. Disables the "Import" button to prevent multiple clicks.
                                3. Prompts the user to select an Excel file.
                                4. Updates the UI to reflect the selected file and readiness status.

                                Key Features:
                                - Provides a user-friendly interface for importing Excel files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if self.import_button.Click:
                                    self.textbox1.Enabled = True
                                    self.textbox2.Enabled = True
                                    self.import_button.Enabled = False
                                    self.excel_file_path = forms.pick_excel_file()
                                    if self.excel_file_path is not None:
                                        self.label0.Text = str(self.excel_file_path)
                                        imageSFIPV = Image.FromFile(ready_light)
                                        self.pictureBoxSFIPV.Image = imageSFIPV
                                    else:
                                        self.import_button.Enabled = True
                                        self.label0.Text = ""
                                        imageSFIPV = Image.FromFile(not_ready_light)
                                        self.pictureBoxSFIPV.Image = imageSFIPV

                            # [UI:IMPORT_CLICKED_TAB2] Handle import button click for Tab 2
                            def import_clicked2(self, sender, e):
                                """
                                This function handles the event when the "Import" button is clicked in Tab 2.

                                Workflow:
                                1. Enables the textboxes for row and column input.
                                2. Disables the "Import" button to prevent multiple clicks.
                                3. Prompts the user to select an Excel file.
                                4. Updates the UI to reflect the selected file and readiness status.

                                Key Features:
                                - Provides a user-friendly interface for importing Excel files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if self.import_button_t2.Click:
                                    self.textbox1_t2.Enabled = True
                                    self.import_button_t2.Enabled = False
                                    self.excel_file_path2 = forms.pick_excel_file()
                                    if self.excel_file_path2 is not None:
                                        self.label0.Text = str(self.excel_file_path2)
                                        imageSFIPV_t2 = Image.FromFile(ready_light)
                                        self.pictureBoxSFIPV_t2.Image = imageSFIPV_t2
                                    else:
                                        self.import_button.Enabled = True
                                        self.label0.Text = ""
                                        imageSFIPV = Image.FromFile(not_ready_light)
                                        self.pictureBoxSFIPV_t2.Image = imageSFIPV

                            # [UI:IMPORT_CLICKED_TAB3] Handle import button click for Tab 3
                            def import_clicked3(self, sender, e):
                                """
                                This function handles the event when the "Import" button is clicked in Tab 3.

                                Workflow:
                                1. Enables the textboxes for row and column input.
                                2. Disables the "Import" button to prevent multiple clicks.
                                3. Prompts the user to select an Excel file.
                                4. Updates the UI to reflect the selected file and readiness status.

                                Key Features:
                                - Provides a user-friendly interface for importing Excel files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if self.import_button_t3.Click:
                                    self.textbox2_t3.Enabled = True
                                    self.import_button_t3.Enabled = False
                                    self.excel_file_path3 = forms.pick_excel_file()
                                    if self.excel_file_path3 is not None:
                                        self.label0.Text = str(self.excel_file_path3)
                                        imageSFIPV = Image.FromFile(ready_light)
                                        self.pictureBoxSFIPV_t3.Image = imageSFIPV
                                    else:
                                        self.import_button.Enabled = True
                                        self.label0.Text = ""
                                        imageSFIPV_t3 = Image.FromFile(not_ready_light)
                                        self.pictureBoxSFIPV_t3.Image = imageSFIPV_t3

                            # [UI:CHECK_CLICKED_TAB1] Handle check button click for Tab 1
                            def check_clicked(self, sender, e):
                                """
                                This function handles the event when the "Check" button is clicked in Tab 1.

                                Workflow:
                                1. Retrieves the starting row and column numbers from the textboxes.
                                2. Reads element IDs from the selected Excel file starting at the specified cell.
                                3. Filters and validates the element IDs.
                                4. Updates the selection in the Revit model to include the valid elements.
                                5. Displays a message with any invalid IDs encountered.

                                Key Features:
                                - Allows selecting elements based on Excel data starting from a specific cell.
                                - Validates element IDs to ensure they exist in the Revit model.
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [UI:UPDATE_FORM_SIZE] Update form size and label position
                                    self.Width = 800
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.notelabel.Text = str_28(lan)
                                    
                                    # [SCRIPT:SELECT_ELEMENTS_FROM_EXCEL] Select elements from Excel
                                    def select_elements_from_excel():
                                        if self.excel_file_path:
                                            # [SCRIPT:GET_ROW_COLUMN_NUMBERS] Get starting row and column numbers
                                            start_row, start_column = _get_row_column_numbers()
                                            workbook = xlrd.open_workbook(self.excel_file_path)
                                            sheet = workbook.sheet_by_index(0)
                                            
                                            # [SCRIPT:READ_EXCEL] Read element IDs from Excel
                                            element_ids = []
                                            invalid_ids = []
                                            for row in range(start_row - 1, sheet.nrows):
                                                for col in range(start_column - 1, sheet.ncols):
                                                    cell_value = sheet.cell_value(row, col)
                                                    if cell_value != '':
                                                        try:
                                                            element_id = int(cell_value)
                                                            element_ids.append(element_id)
                                                        except ValueError:
                                                            invalid_ids.append(str_6(lan).format(row + 1, col + 1))
                                            
                                            # [SCRIPT:VALIDATE_ELEMENT_IDS] Validate element IDs
                                            doc = revit.doc
                                            element_id_objects = List[DB.ElementId]()
                                            for element_id in element_ids:
                                                try:
                                                    element = doc.GetElement(DB.ElementId(element_id))
                                                    if element is None:
                                                        invalid_ids.append(str(element_id))
                                                    else:
                                                        element_id_objects.Add(DB.ElementId(element_id))
                                                except Exception:
                                                    invalid_ids.append(str(element_id))
                                            
                                            # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                                            if element_id_objects.Count > 0:
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                            
                                            # [UI:DISPLAY_REPORT] Display report of invalid IDs
                                            msg = ''
                                            if invalid_ids:
                                                msg += str_7(lan)
                                                for invalid_id in invalid_ids:
                                                    msg += invalid_id + '\n'
                                            if not msg:
                                                msg = str_8(lan)
                                            self.reportlabel.Text = msg.strip()

                                    # [SCRIPT:GET_ROW_COLUMN_NUMBERS] Get row and column numbers from textboxes
                                    def _get_row_column_numbers():
                                        start_row = self.textbox1.Text
                                        start_column = self.textbox2.Text
                                        try:
                                            start_row = int(start_row)
                                            start_column = int(start_column)
                                            return start_row, start_column
                                        except ValueError:
                                            forms.alert(str_10(lan), title=str_11(lan))
                                            pass
                                    
                                    # [SCRIPT:SELECT_ELEMENTS] Select elements from Excel
                                    select_elements_from_excel()
                                    self.delete_button.Enabled = True

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [UI:CHECK_CLICKED_TAB2] Handle check button click for Tab 2
                            def check2_clicked(self, sender, e):
                                """
                                This function handles the event when the "Check" button is clicked in Tab 2.

                                Workflow:
                                1. Retrieves the starting row and column numbers from the textboxes.
                                2. Reads element IDs from the selected Excel file starting at the specified cell.
                                3. Filters and validates the element IDs.
                                4. Updates the selection in the Revit model to include the valid elements.
                                5. Displays a message with any invalid IDs encountered.

                                Key Features:
                                - Allows selecting elements based on Excel data starting from a specific cell.
                                - Validates element IDs to ensure they exist in the Revit model.
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:UPDATE_FORM_SIZE] Update form size and label position
                                self.Width = 800
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.notelabel.Text = str_28(lan)  

                                try:
                                    # [SCRIPT:SELECT_ELEMENTS_FROM_EXCEL] Select elements from Excel
                                    def select_elements_from_excel():
                                        if self.excel_file_path2:
                                            # [SCRIPT:GET_ROW_NUMBER] Get row number from textbox
                                            row_number = _get_valid_integer(str_12(lan), str_13(lan))
                                            workbook = xlrd.open_workbook(self.excel_file_path2)
                                            sheet = workbook.sheet_by_index(0)
                                            
                                            # [SCRIPT:READ_EXCEL] Read element IDs from Excel
                                            element_ids = []
                                            invalid_ids = []
                                            for col in range(sheet.ncols):
                                                cell_value = sheet.cell_value(row_number - 1, col)
                                                if cell_value != '':
                                                    try:
                                                        element_id = int(cell_value)
                                                        element_ids.append(element_id)
                                                    except ValueError:
                                                        invalid_ids.append(str_14(lan).format(col + 1))
                                            
                                            # [SCRIPT:VALIDATE_ELEMENT_IDS] Validate element IDs
                                            doc = revit.doc
                                            element_id_objects = List[DB.ElementId]()
                                            for element_id in element_ids:
                                                try:
                                                    element = doc.GetElement(DB.ElementId(element_id))
                                                    if element is None:
                                                        invalid_ids.append(str(element_id))
                                                    else:
                                                        element_id_objects.Add(DB.ElementId(element_id))
                                                except Exception:
                                                    invalid_ids.append(str(element_id))
                                            
                                            # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                                            if element_id_objects.Count > 0:
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                            
                                            # [UI:DISPLAY_REPORT] Display report of invalid IDs
                                            msg = ''
                                            if invalid_ids:
                                                msg += str_7(lan)
                                                for invalid_id in invalid_ids:
                                                    msg += invalid_id + '\n'
                                            if not msg:
                                                msg = str_8(lan)
                                            self.reportlabel.Text = msg.strip()

                                    # [SCRIPT:GET_VALID_INTEGER] Get valid integer from textbox
                                    def _get_valid_integer(prompt, title):
                                        while True:
                                            number = self.textbox1_t2.Text
                                            try:
                                                number = int(number)
                                                if number > 0:
                                                    return number
                                                else:
                                                    number == ""
                                                    forms.alert(str_15(lan), title=str_11(lan))
                                                    sys.exit()
                                            except ValueError:
                                                forms.alert(str_16(lan), title=str_11(lan))
                                                sys.exit()
                                    
                                    # [SCRIPT:SELECT_ELEMENTS] Select elements from Excel
                                    select_elements_from_excel()
                                    self.delete_button_t2.Enabled = True

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [UI:CHECK_CLICKED_TAB3] Handle check button click for Tab 3
                            def check3_clicked(self, sender, e):
                                """
                                This function handles the event when the "Check" button is clicked in Tab 3.

                                Workflow:
                                1. Retrieves the starting row and column numbers from the textboxes.
                                2. Reads element IDs from the selected Excel file starting at the specified cell.
                                3. Filters and validates the element IDs.
                                4. Updates the selection in the Revit model to include the valid elements.
                                5. Displays a message with any invalid IDs encountered.

                                Key Features:
                                - Allows selecting elements based on Excel data starting from a specific cell.
                                - Validates element IDs to ensure they exist in the Revit model.
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:UPDATE_FORM_SIZE] Update form size and label position
                                self.Width = 800
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.notelabel.Text = str_28(lan)
                                
                                try:
                                    # [SCRIPT:SELECT_ELEMENTS_FROM_EXCEL] Select elements from Excel
                                    def select_elements_from_excel():
                                        if self.excel_file_path3:
                                            # [SCRIPT:GET_COLUMN_NUMBER] Get column number from textbox
                                            column_number = _get_valid_integer(str_17(lan), str_18(lan))
                                            workbook = xlrd.open_workbook(self.excel_file_path3)
                                            sheet = workbook.sheet_by_index(0)
                                            
                                            # [SCRIPT:READ_EXCEL] Read element IDs from Excel
                                            element_ids = []
                                            invalid_ids = []
                                            for row in range(sheet.nrows):
                                                cell_value = sheet.cell_value(row, column_number - 1)
                                                if cell_value != '':
                                                    try:
                                                        element_id = int(cell_value)
                                                        element_ids.append(element_id)
                                                    except ValueError:
                                                        invalid_ids.append(str_19(lan).format(row + 1))
                                            
                                            # [SCRIPT:VALIDATE_ELEMENT_IDS] Validate element IDs
                                            doc = revit.doc
                                            element_id_objects = List[DB.ElementId]()
                                            for element_id in element_ids:
                                                try:
                                                    element = doc.GetElement(DB.ElementId(element_id))
                                                    if element is None:
                                                        invalid_ids.append(str(element_id))
                                                    else:
                                                        element_id_objects.Add(DB.ElementId(element_id))
                                                except Exception:
                                                    invalid_ids.append(str(element_id))
                                            
                                            # [SCRIPT:UPDATE_SELECTION] Update selection in Revit
                                            if element_id_objects.Count > 0:
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                            
                                            # [UI:DISPLAY_REPORT] Display report of invalid IDs
                                            msg = ''
                                            if invalid_ids:
                                                msg += str_7(lan)
                                                for invalid_id in invalid_ids:
                                                    msg += invalid_id + '\n'
                                            if not msg:
                                                msg = str_8(lan)
                                            self.reportlabel.Text = msg.strip()

                                    # [SCRIPT:GET_VALID_INTEGER] Get valid integer from textbox
                                    def _get_valid_integer(prompt, title):
                                        while True:
                                            number = self.textbox2_t3.Text
                                            try:
                                                number = int(number)
                                                if number > 0:
                                                    return number
                                                else:
                                                    number == ""
                                                    forms.alert(str_15(lan), title=str_11(lan))
                                                    sys.exit()
                                            except ValueError:
                                                forms.alert(str_16(lan), title=str_11(lan))
                                                sys.exit()
                                    
                                    # [SCRIPT:SELECT_ELEMENTS] Select elements from Excel
                                    select_elements_from_excel()
                                    self.delete_button_t3.Enabled = True

                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [UI:DELETE_CLICKED_TAB1] Handle delete button click for Tab 1
                            def delete_clicked(self, sender, e):
                                """
                                This function handles the event when the "Delete" button is clicked in Tab 1.

                                Workflow:
                                1. Retrieves the selected element IDs from the Revit model.
                                2. Prepares a report of the elements to be deleted.
                                3. Deletes the selected elements from the Revit model.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows deleting elements based on the selected Excel data.
                                - Updates the UI to reflect the deleted elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                                    from pyrevit import script
                                    
                                    # [SCRIPT:GET_SELECTED_IDS] Get selected element IDs
                                    selection = revit.uidoc.Selection
                                    selected_ids = selection.GetElementIds()
                                    caunt = len(selected_ids)
                                    
                                    # [SCRIPT:PREPARE_REPORT] Prepare report data
                                    if selected_ids:
                                        data = []
                                        for element_id in selected_ids:
                                            data.append([element_id.IntegerValue, str_20(lan)])
                                        data.append([str_27(lan), caunt])  
                                    
                                    # [SCRIPT:UPDATE_REPORT_DATA] Update report data
                                    self.report_excel_data.extend(data)
                                    
                                    # [SCRIPT:DELETE_ELEMENTS] Delete selected elements
                                    self.delete_button.Enabled = False
                                    tit_msg = str_24(lan)
                                    succ_msg = str_25(lan)
                                    unsucc_msg = str_26(lan)
                                    selection_delete_el(tit_msg, succ_msg, unsucc_msg)

                                except StopIteration:
                                    pass
                                    self.Close()
                                except Exception:
                                    forms.alert(str_31(lan), title= str_30(lan))
                                    output = script.get_output()
                                    output.close()
                                    self.Close()   
                                    self.Close()           
                                except SystemExit:
                                    pass
                                    self.Close()
                                self.Close()

                            # [UI:DELETE_CLICKED_TAB2] Handle delete button click for Tab 2
                            def delete2_clicked(self, sender, e):
                                """
                                This function handles the event when the "Delete" button is clicked in Tab 2.

                                Workflow:
                                1. Retrieves the selected element IDs from the Revit model.
                                2. Prepares a report of the elements to be deleted.
                                3. Deletes the selected elements from the Revit model.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows deleting elements based on the selected Excel data.
                                - Updates the UI to reflect the deleted elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                                    from pyrevit import script

                                    # [SCRIPT:GET_SELECTED_IDS] Get selected element IDs
                                    selection = revit.uidoc.Selection
                                    selected_ids = selection.GetElementIds()
                                    caunt = len(selected_ids)
                                    
                                    # [SCRIPT:PREPARE_REPORT] Prepare report data
                                    if selected_ids:
                                        data = []
                                        for element_id in selected_ids:
                                            data.append([element_id.IntegerValue, str_20(lan)])
                                        data.append([str_27(lan), caunt])  
                                    
                                    # [SCRIPT:UPDATE_REPORT_DATA] Update report data
                                    self.report_excel_data.extend(data)
                                    
                                    # [SCRIPT:DELETE_ELEMENTS] Delete selected elements
                                    self.delete_button.Enabled = False
                                    tit_msg = str_24(lan)
                                    succ_msg = str_25(lan)
                                    unsucc_msg = str_26(lan)
                                    selection_delete_el(tit_msg, succ_msg, unsucc_msg)
                                
                                except StopIteration:
                                    pass
                                    self.Close()
                                except Exception:
                                    forms.alert(str_31(lan), title= str_30(lan))
                                    output = script.get_output()
                                    output.close()  
                                    self.Close()     
                                except SystemExit:
                                    pass
                                    self.Close()
                                self.Close()

                            # [UI:DELETE_CLICKED_TAB3] Handle delete button click for Tab 3
                            def delete3_clicked(self, sender, e):
                                """
                                This function handles the event when the "Delete" button is clicked in Tab 3.

                                Workflow:
                                1. Retrieves the selected element IDs from the Revit model.
                                2. Prepares a report of the elements to be deleted.
                                3. Deletes the selected elements from the Revit model.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows deleting elements based on the selected Excel data.
                                - Updates the UI to reflect the deleted elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                                    from pyrevit import script

                                    # [SCRIPT:GET_SELECTED_IDS] Get selected element IDs
                                    selection = revit.uidoc.Selection
                                    selected_ids = selection.GetElementIds()
                                    caunt = len(selected_ids)
                                    
                                    # [SCRIPT:PREPARE_REPORT] Prepare report data
                                    if selected_ids:
                                        data = []
                                        for element_id in selected_ids:
                                            data.append([element_id.IntegerValue, str_20(lan)])
                                        data.append([str_27(lan), caunt]) 

                                    # [SCRIPT:UPDATE_REPORT_DATA] Update report data
                                    self.report_excel_data.extend(data)
                                    
                                    # [SCRIPT:DELETE_ELEMENTS] Delete selected elements
                                    self.delete_button.Enabled = False
                                    tit_msg = str_24(lan)
                                    succ_msg = str_25(lan)
                                    unsucc_msg = str_26(lan)
                                    selection_delete_el(tit_msg, succ_msg, unsucc_msg)

                                except StopIteration:
                                    pass
                                    self.Close()
                                except Exception:
                                    forms.alert(str_31(lan), title= str_30(lan))
                                    output = script.get_output()
                                    output.close()
                                    self.Close()      
                                except SystemExit:
                                    pass
                                    self.Close()
                                self.Close()

                            # [UI:CANCEL_CLICKED_TAB1] Handle cancel button click for Tab 1
                            def cancel_clicked(self, sender, e):
                                """
                                This function handles the event when the "Cancel" button is clicked in Tab 1.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.Close()

                            # [UI:CANCEL_CLICKED_TAB2] Handle cancel button click for Tab 2
                            def cancel2_clicked(self, sender, e):
                                """
                                This function handles the event when the "Cancel" button is clicked in Tab 2.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.Close()

                            # [UI:CANCEL_CLICKED_TAB3] Handle cancel button click for Tab 3
                            def cancel3_clicked(self, sender, e):
                                """
                                This function handles the event when the "Cancel" button is clicked in Tab 3.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.Close()
                            
                            # [UI:TEXTBOX_TEXT_CHANGED_TAB1] Handle text change in Tab 1 textboxes
                            def textbox_TextChanged(self, sender, e):
                                """
                                This function handles the event when the text in either textbox in Tab 1 is changed.

                                Workflow:
                                1. Enables the "Check" button if both textboxes contain text.
                                2. Disables the "Check" button if either textbox is empty.
                                3. Resets the form width and clears the report labels if the textboxes are empty.

                                Key Features:
                                - Ensures the "Check" button is only enabled when both row and column numbers are provided.
                                - Updates the UI dynamically based on user input.
                                """
                                if self.textbox1.Text and self.textbox2.Text:
                                    self.check_button.Enabled = True
                                else:
                                    self.check_button.Enabled = False
                                    self.Width = 420
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.notelabel.Text = ""
                                    self.reportlabel.Text = ""
                                    self.delete_button.Enabled = False

                            # [UI:TEXTBOX_TEXT_CHANGED_TAB2] Handle text change in Tab 2 textboxes
                            def textbox_TextChanged2(self, sender, e):
                                """
                                This function handles the event when the text in either textbox in Tab 2 is changed.

                                Workflow:
                                1. Enables the "Check" button if both textboxes contain text.
                                2. Disables the "Check" button if either textbox is empty.
                                3. Resets the form width and clears the report labels if the textboxes are empty.

                                Key Features:
                                - Ensures the "Check" button is only enabled when both row and column numbers are provided.
                                - Updates the UI dynamically based on user input.
                                """
                                if self.textbox1_t2.Text:
                                    self.check_button_t2.Enabled = True
                                else:
                                    self.check_button_t2.Enabled = False
                                    self.Width = 420
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.notelabel.Text = ""
                                    self.reportlabel.Text = ""
                                    self.delete_button_t2.Enabled = False

                            # [UI:TEXTBOX_TEXT_CHANGED_TAB3] Handle text change in Tab 3 textboxes
                            def textbox_TextChanged3(self, sender, e):
                                """
                                This function handles the event when the text in either textbox in Tab 3 is changed.

                                Workflow:
                                1. Enables the "Check" button if both textboxes contain text.
                                2. Disables the "Check" button if either textbox is empty.
                                3. Resets the form width and clears the report labels if the textboxes are empty.

                                Key Features:
                                - Ensures the "Check" button is only enabled when both row and column numbers are provided.
                                - Updates the UI dynamically based on user input.
                                """
                                if self.textbox2_t3.Text:
                                    self.check_button_t3.Enabled = True
                                else:
                                    self.check_button_t3.Enabled = False
                                    self.Width = 420
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.notelabel.Text = ""
                                    self.reportlabel.Text = ""
                                    self.delete_button_t3.Enabled = False
                            
                         # [SCRIPT:GET_CURRENT_DOCUMENT] Get current document
                        doc = DocumentManager.Instance.CurrentDBDocument

                        # [UI:SHOW_FORM] Show the form if not already open
                        if 'form' not in globals():
                            pass
                        else:
                            form = DELETE_EXCEL(doc)
                            form.ShowDialog()

                        # [SCRIPT:RETURN_REPORT_DATA] Return report data
                        return form.report_excel_data 

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from structure.root import lan_path
                from UI.strings_delete_elements_by_ids_from_excel import str_27, str_33, str_34, str_35, str_36, str_37, str_38, str_39 
                from Autodesk.Revit.DB import FilteredElementCollector, ElementId
                
                # [SCRIPT:SET_LANGUAGE] Set language
                lan = lan_path()
                
                # [SCRIPT:DELETE_ELEMENTS] Delete elements by Excel
                deleted_ids_of_excel_list = delete_elements_by_excel()

                # [SCRIPT:VERIFY_DELETION] Verify deletion status for each element
                if deleted_ids_of_excel_list:
                    try:
                        # [SCRIPT:IMPORT_MODULES] Import necessary modules
                        from pyrevit import revit, forms, DB
                        import clr
                        clr.AddReference('RevitAPI')
                        clr.AddReference('RevitAPIUI')
                        from Autodesk.Revit.DB import FilteredElementCollector, ElementId
                        from System.Collections.Generic import List
                        
                        # [SCRIPT:INITIALIZE_DATA] Initialize verified deletion data
                        verified_deletion_data = []
                        doc = __revit__.ActiveUIDocument.Document
                        
                        # [SCRIPT:GET_ALL_ELEMENTS] Get all elements in the model
                        all_elements = DB.FilteredElementCollector(doc).WhereElementIsNotElementType().ToElements()
                        
                        # [SCRIPT:CREATE_ELEMENT_ID_SET] Create a set of all element IDs for faster lookup
                        existing_element_ids = set()
                        for element in all_elements:
                            existing_element_ids.add(element.Id.IntegerValue)
                        
                        # [SCRIPT:VERIFY_ELEMENT_IDS] Verify each element ID
                        for row in deleted_ids_of_excel_list:
                            element_id = row[0]
                            # [SCRIPT:SKIP_TOTAL_ROW] Skip the total count row
                            if isinstance(element_id, str) and str_27(lan) in element_id:  # "Total"
                                verified_deletion_data.append(row)
                                continue
                                
                            try:
                                # [SCRIPT:CHECK_ELEMENT_EXISTENCE] Check if element ID exists in the model
                                if int(element_id) in existing_element_ids:
                                    verified_deletion_data.append([element_id, str_36(lan)])
                                    self.Close()
                                else:
                                    verified_deletion_data.append([element_id, str_37(lan)])
                            except Exception:
                                continue
                        
                        # [SCRIPT:CREATE_REPORT] Create report if verified data exists
                        if verified_deletion_data:
                            # [SCRIPT:FORMAT_REPORT_DATA] Format data for table display
                            headers = [str_33(lan), str_34(lan)]
                            data = [
                                [str(row[0]) for row in verified_deletion_data],  
                                [str(row[1]) for row in verified_deletion_data]   
                            ]
                            editable = [False, False]
                            
                            # [SCRIPT:CREATE_REPORT_TAB] Create the report tab with verified data
                            self.create_report_tab(headers, data, editable, title=button_text)
                        else:
                            forms.alert(str_38(lan), title=str_39(lan))  
                    except Exception as e:
                        MessageBox.Show(str(e),str_35(lan))

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                pass
                MessageBox.Show(str(e),str_35(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()
        
        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Delete Elements by Type Filter] Element Deletion by Type Filter
        #
        # Handles deletion of elements based on type filters:
        # - Filters elements by category, family, and type
        # - Deletes elements based on the filter criteria
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:DELETE_ELEMENTS_USING_TYPE_FILTER]
        elif button_text == tool_str_22(lan):
            """
            This function handles the event when the "Delete Elements by Type Filter" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the type-based deletion operations.
            2. Displays a form with multiple options for filtering elements by type:
            - Current view (include/exclude level)
            - Multiple views (include/exclude level)
            3. Prompts the user to select views, levels, categories, families, and types for filtering.
            4. Filters elements based on the selected criteria and deletes them from the Revit model.
            5. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows deleting elements based on type filters in different views and levels.
            - Updates the UI to reflect the deleted elements and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                    
                def delete_elements_using_type_filter():
                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    import System.Drawing as Drawing
                    from System.Windows.Forms import  Form, Button, PictureBox, Label, Cursors
                    from System.Drawing import Point, Size, Color, Icon, Font, FontStyle, Image, GraphicsUnit
                    from RevitServices.Persistence import DocumentManager
                    from Autodesk.Revit.DB import FilteredElementCollector, BuiltInParameter
                    import Autodesk.Revit.DB as DB
                    from System.Collections.Generic import List
                    from pyrevit import script, forms, revit, DB
                    import getpass
                    from datetime import datetime  
                    import os
                    import sys
                    import webbrowser
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.forms.option import Filter
                    from structure.root import wurl_path, mod_path, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon, submit_icon, filterbytype_icon, cfilterbytype_back, delete_sym, delete_back, reduId_icon
                    from UI.strings_delete_elements_by_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_h1, str_h2
                    from UI.skin import skin_mode
                    from UI.url import parsweb

                    # [SCRIPT:SET_LANGUAGE_AND_PATHS] Set language and paths
                    lan = lan_path()
                    wurl= wurl_path()
                    skin = mod_path()
                    coo = cfilterbytype_back()
                    bor = cfilterbytype_back()
                    
                    # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    
                    # [SCRIPT:CHECK_SELECTION] Check if selection is empty
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    if selection:
                        forms.alert(str_8(lan), title=str_7(lan))
                    else:
                        # [UI:TYPE_FILTER_FORM] Create type filter form
                        icon_path = filterbytype_icon()
                        search_image_path = skin_mode(skin, coo, bor)
                        ok_icon_path = submit_icon()
                        radio_label = str_1(lan)
                        radio_op1 = str_2(lan)
                        radio_op2 = str_3(lan)
                        radio_label2 = str_4(lan)
                        radio_op3 = str_5(lan)
                        radio_op4 = str_6(lan)
                        window_name = str_7(lan)
                        url = parsweb(wurl)
                        selected_option1, selected_option2 = Filter(icon_path, search_image_path, ok_icon_path, radio_label, radio_op1, radio_op2, radio_label2, radio_op3, radio_op4, window_name, url)
                        
                        # [SCRIPT:CURRENT_VIEW_IGNORE_LEVEL] Handle "Current View (Ignore Level)" option
                        if selected_option1 == "C1R1" and selected_option2 == "C2R2":
                            """
                            This function handles the event when the "Current View (Ignore Level)" option is chosen.

                            Workflow:
                            1. Retrieves the active view from the Revit model.
                            2. Prompts the user to select a category and family for filtering.
                            3. Filters elements based on the selected category and family.
                            4. Updates the selection in the Revit model to include the filtered elements.
                            5. Implements exception handling to ensure the form remains stable in case of errors.

                            Key Features:
                            - Allows filtering elements in the current view based on category and family.
                            - Updates the UI to reflect the selected elements and their properties.
                            - Ensures proper handling of exceptions to maintain application stability.
                            """
                            # [SCRIPT:IMPORT_MODULES] Import necessary modules
                            from sajdmo.modules.inform import count_elements_in_categories2, catch_family_names_and_types_for_category
                            from UI.strings1_delete_elements_by_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20
                            
                            output = script.get_output()
                            
                            try:
                                # [SCRIPT:GET_ACTIVE_VIEW] Get active view
                                view = __revit__.ActiveUIDocument.ActiveView  
                                
                                # [SCRIPT:COUNT_ELEMENTS_IN_CATEGORIES] Count elements in categories
                                category_names = count_elements_in_categories2(view)
                                
                                # [UI:SELECT_CATEGORY] Prompt user to select a category
                                selected_category = forms.SelectFromList.show(category_names, title=str_2(lan), button_name=str_1(lan))
                                if selected_category is None:
                                        sys.exit()  
                                if selected_category:
                                    try:
                                        # [SCRIPT:GET_FAMILIES_AND_TYPES] Retrieve families and types for the selected category
                                        family_info = catch_family_names_and_types_for_category(view, selected_category)
                                        a = []  
                                        if family_info is not None:
                                            family_names = list(family_info.keys())
                                            family_names.insert(0, str_5(lan)) 

                                            # [UI:SELECT_FAMILY] Prompt user to select a family
                                            selected_family = forms.SelectFromList.show(family_names, title=str_4(lan), button_name=str_3(lan))
                                            if selected_family is None:
                                                sys.exit()  
                                            if selected_family:
                                                if selected_family == str_5(lan):
                                                    for family_name, types in family_info.items():
                                                        for type_info in types:
                                                            a.append(type_info[1])  
                                                            linkified_id = output.linkify(type_info[1]) 
                                                            
                                                            # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                            element_ids = a  
                                                            doc = revit.doc
                                                            element_id_objects = List[DB.ElementId]()
                                                            for element_id in element_ids:
                                                                element_id_objects.Add(element_id)
                                                            revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                            revit.uidoc.ShowElements(element_id_objects)
                                                else:
                                                    types = family_info[selected_family]
                                                    unique_types = list(set([t[0] for t in types]))  
                                                    
                                                    # [UI:SELECT_TYPE] Prompt user to select a type
                                                    selected_type = forms.SelectFromList.show(unique_types,title = str_10(lan), button_name=str_9(lan))
                                                    if selected_type is None:
                                                            sys.exit()  
                                                    if selected_type:
                                                        type_info = [t for t in types if t[0] == selected_type]
                                                        for info in type_info:
                                                            a.append(info[1])  
                                                            linkified_id = output.linkify(info[1])  
                                                            
                                                            # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                            element_ids = a 
                                                            doc = revit.doc
                                                            element_id_objects = List[DB.ElementId]()
                                                            for element_id in element_ids:
                                                                element_id_objects.Add(element_id)
                                                            revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                            revit.uidoc.ShowElements(element_id_objects)
                                                    else:
                                                        output.print_stdout(str_14(lan))
                                            else:
                                                output.print_stdout(str_15(lan))
                                        else:
                                            forms.alert(str_16(lan), title=str_17(lan))
                                    except Exception as e:
                                        forms.alert(str_18(lan).format(e), title=str_19(lan))
                                else:
                                    output.print_stdout(str_20(lan))

                            except StopIteration:
                                pass
                            except Exception:
                                pass            
                            except SystemExit:
                                pass

                        # [SCRIPT:MULTIPLE_VIEWS_IGNORE_LEVEL] Handle "Multiple Views (Ignore Level)" option
                        if selected_option1 == "C1R2" and selected_option2 == "C2R2":
                            """
                            This function handles the event when the "Multiple Views (Ignore Level)" option is chosen.

                            Workflow:
                            1. Prompts the user to select multiple views from the Revit model.
                            2. Retrieves categories and families for the selected views.
                            3. Filters elements based on the selected category and family.
                            4. Updates the selection in the Revit model to include the filtered elements.
                            5. Implements exception handling to ensure the form remains stable in case of errors.

                            Key Features:
                            - Allows filtering elements across multiple views based on category and family.
                            - Updates the UI to reflect the selected elements and their properties.
                            - Ensures proper handling of exceptions to maintain application stability.
                            """
                            # [SCRIPT:IMPORT_MODULES] Import necessary modules
                            from Autodesk.Revit.DB import FilteredElementCollector, BuiltInParameter
                            from sajdmo.modules.inform import count_elements_in_categories2, catch_family_names_and_types_for_category
                            from UI.strings2_delete_elements_by_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22
                            
                            output = script.get_output()
                            
                            try:
                                # [UI:SELECT_VIEWS] Prompt user to select multiple views
                                selected_views = forms.select_views(title=str_21(lan), button_name=str_22(lan), width=500, multiple=True, filterfunc=None, doc=None, use_selection=True)
                                if not selected_views:
                                    sys.exit()  

                                # [SCRIPT:COUNT_ELEMENTS_IN_CATEGORIES] Count elements in categories for selected views
                                for view in selected_views:
                                    category_names = count_elements_in_categories2(view)
                                
                                # [UI:SELECT_CATEGORY] Prompt user to select a category
                                selected_category = forms.SelectFromList.show(category_names,title = str_2(lan), button_name=str_1(lan))
                                if selected_category is None:
                                        sys.exit() 
                                
                                if selected_category:
                                    try:
                                        # [SCRIPT:GET_FAMILIES_AND_TYPES] Retrieve families and types for the selected category
                                        family_info = catch_family_names_and_types_for_category(view, selected_category)
                                        a = [] 
                                        if family_info is not None:
                                            family_names = list(family_info.keys())
                                            family_names.insert(0, str_5(lan))  

                                            # [UI:SELECT_FAMILY] Prompt user to select a family
                                            selected_family = forms.SelectFromList.show(family_names, title = str_4(lan), button_name=str_3(lan))
                                            if selected_family is None:
                                                sys.exit()  

                                            if selected_family:
                                                if selected_family == str_5(lan):
                                                    for family_name, types in family_info.items():
                                                        for type_info in types:
                                                            a.append(type_info[1])  
                                                            linkified_id = output.linkify(type_info[1])  
                                                            
                                                            # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                            element_ids = a 
                                                            doc = revit.doc
                                                            element_id_objects = List[DB.ElementId]()
                                                            for element_id in element_ids:
                                                                element_id_objects.Add(element_id)
                                                            revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                            revit.uidoc.ShowElements(element_id_objects)
                                                else:
                                                    types = family_info[selected_family]
                                                    unique_types = list(set([t[0] for t in types]))  
                                                    
                                                    # [UI:SELECT_TYPE] Prompt user to select a type
                                                    selected_type = forms.SelectFromList.show(unique_types,title = str_10(lan), button_name=str_9(lan))
                                                    if selected_type is None:
                                                            sys.exit()  

                                                    if selected_type:
                                                        type_info = [t for t in types if t[0] == selected_type]
                                                        for info in type_info:
                                                            a.append(info[1])  
                                                            linkified_id = output.linkify(info[1])  
                                                            
                                                            # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                            element_ids = a  
                                                            doc = revit.doc
                                                            element_id_objects = List[DB.ElementId]()
                                                            for element_id in element_ids:
                                                                element_id_objects.Add(element_id)
                                                            revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                            revit.uidoc.ShowElements(element_id_objects)
                                                    else:
                                                        output.print_stdout(str_14(lan))
                                            else:
                                                output.print_stdout(str_15(lan))
                                        else:
                                            forms.alert(str_16(lan), title=str_17(lan))
                                    except Exception as e:
                                        forms.alert(str_18(lan).format(e), title=str_19(lan))
                                else:
                                    output.print_stdout(str_20(lan))

                            except StopIteration:
                                pass
                            except Exception:
                                pass            
                            except SystemExit:
                                pass
                        
                        # [SCRIPT:CURRENT_VIEW_INCLUDE_LEVEL] Handle "Current View (Include Level)" option
                        if selected_option1 == "C1R1" and selected_option2 == "C2R1":
                            """
                            This function handles the event when the "Current View (Include Level)" option is chosen.

                            Workflow:
                            1. Retrieves the active view and associated levels from the Revit model.
                            2. Prompts the user to select levels, categories, families, and types for filtering.
                            3. Filters elements based on the selected criteria and includes level information.
                            4. Updates the selection in the Revit model to include the filtered elements.
                            5. Implements exception handling to ensure the form remains stable in case of errors.

                            Key Features:
                            - Allows filtering elements in the current view based on levels, categories, families, and types.
                            - Updates the UI to reflect the selected elements and their properties.
                            - Ensures proper handling of exceptions to maintain application stability.
                            """
                            # [SCRIPT:IMPORT_MODULES] Import necessary modules
                            from Autodesk.Revit.DB import (FilteredElementCollector,BuiltInCategory,BuiltInParameter,ElementLevelFilter,LogicalOrFilter,ElementId,)
                            from System.Collections.Generic import List
                            from sajdmo.modules.inform import count_elements_in_categories3, catch_families_for_levels, catch_types_for_family, catch_family_names_and_types_for_category
                            from UI.strings3_delete_elements_by_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22
                            output = script.get_output()
                            
                            # [SCRIPT:LINKIFY_ELEMENT_ID] Function to create clickable links for Element IDs
                            def linkify_element_id(element_id):
                                return output.linkify(element_id)

                            try:
                                try:
                                    # [SCRIPT:GET_ACTIVE_VIEW_AND_DOCUMENT] Get active view and document
                                    view = __revit__.ActiveUIDocument.ActiveView
                                    doc = __revit__.ActiveUIDocument.Document

                                    # [SCRIPT:GET_LEVEL_IDS] Get level IDs from elements in the view
                                    level_ids = set()
                                    elements = FilteredElementCollector(doc, view.Id).WhereElementIsNotElementType().ToElements()
                                    view_level_ids = set(element.LevelId for element in elements)
                                    level_ids.update(view_level_ids)
                                    level_ids_list = list(level_ids)
                                    
                                    # [SCRIPT:CHECK_LEVEL_COUNT] Check if there is more than one level
                                    if len(level_ids_list) == 1:
                                        forms.alert(str_11(lan))
                                    else:
                                        # [UI:SELECT_LEVELS] Prompt user to select levels
                                        selected_levels = forms.select_levels(
                                            title=str_1(lan),
                                            button_name=str_2(lan),
                                            width=500,
                                            multiple=True,
                                            filterfunc=lambda level: level.Id in level_ids_list,
                                            doc=doc,
                                            use_selection=False,
                                        )
                                        if selected_levels is None:
                                            forms.alert(str_12(lan))
                                            sys.exit()

                                        if selected_levels:
                                            doc = __revit__.ActiveUIDocument.Document
                                            
                                            # [SCRIPT:FILTER_CATEGORIES] Filter categories based on selected levels
                                            category_names = count_elements_in_categories3(view, [level.Id for level in selected_levels])
                                            if not category_names:
                                                forms.alert(str_13(lan))
                                                sys.exit()

                                            # [UI:SELECT_CATEGORY] Prompt user to select a category
                                            selected_category = forms.SelectFromList.show(
                                                [cat for cat in category_names.keys() if cat != "INVALID"],
                                                title=str_6(lan),
                                                button_name=str_5(lan),
                                            )
                                            if selected_category is None:
                                                sys.exit()

                                            if selected_category:
                                                # [SCRIPT:FILTER_FAMILIES] Filter families based on selected levels and category
                                                family_info = catch_families_for_levels(view, [level.Id for level in selected_levels], selected_category)
                                                if not family_info:
                                                    forms.alert(str_14(lan))
                                                    sys.exit()

                                                family_names = list(family_info.keys())
                                                selected_family = forms.SelectFromList.show(
                                                    [family for family in family_names if family != "INVALID"],
                                                    title=str_8(lan),
                                                    button_name=str_7(lan),
                                                )
                                                if selected_family is None:
                                                    sys.exit()

                                                if selected_family:
                                                    # [SCRIPT:FILTER_TYPES] Filter types based on selected levels, category, and family
                                                    type_info = catch_types_for_family(view, [level.Id for level in selected_levels], selected_category, selected_family)
                                                    if not type_info:
                                                        forms.alert(str_15(lan))
                                                        sys.exit()

                                                    type_names = list(type_info.keys())
                                                    selected_type = forms.SelectFromList.show(
                                                        [type for type in type_names if type != "INVALID"],
                                                        title=str_10(lan),
                                                        button_name=str_9(lan),
                                                    )
                                                    if selected_type is None:
                                                        sys.exit()

                                                    if selected_type:
                                                        selected_elements = type_info[selected_type]
                                                        family_elements_on_levels = [
                                                            elem
                                                            for elem in FilteredElementCollector(doc, view.Id)
                                                            .WhereElementIsNotElementType()
                                                            .ToElements()
                                                            if elem.Id in selected_elements
                                                        ]
                                                        element_ids_on_levels = [
                                                            (elem.Id, elem.Name, view.Document.GetElement(elem.GetTypeId())
                                                            .get_Parameter(BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM)
                                                            .AsString(), view.Document.GetElement(elem.GetTypeId())
                                                            .get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM)
                                                            .AsString()) for elem in family_elements_on_levels
                                                        ]
                                                        element_ids_collection = List[ElementId](
                                                            [element[0] for element in element_ids_on_levels]
                                                        )
                                                        
                                                        # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                        __revit__.ActiveUIDocument.Selection.SetElementIds(
                                                            element_ids_collection
                                                        )
                                                        __revit__.ActiveUIDocument.ShowElements(
                                                            element_ids_collection
                                                        )
                                                        for element_info in element_ids_on_levels:
                                                            clickable_id = linkify_element_id(element_info[0])
                                                    else:
                                                        output.print_stdout(str_18(lan))
                                                else:
                                                    output.print_stdout(str_19(lan))
                                            else:
                                                output.print_stdout(str_20(lan))
                                        else:
                                            output.print_stdout(str_21(lan))
                                except:
                                    forms.alert(str_22(lan))
                                    pass

                            except StopIteration:
                                pass
                            except Exception:
                                pass            
                            except SystemExit:
                                pass
                        
                        # [SCRIPT:MULTIPLE_VIEWS_INCLUDE_LEVEL] Handle "Multiple Views (Include Level)" option
                        if selected_option1 == "C1R2" and selected_option2 == "C2R1":
                            """
                            This function handles the event when the "Multiple Views (Include Level)" option is chosen.

                            Workflow:
                            1. Prompts the user to select multiple views and associated levels from the Revit model.
                            2. Filters elements based on the selected levels, categories, families, and types.
                            3. Updates the selection in the Revit model to include the filtered elements.
                            4. Implements exception handling to ensure the form remains stable in case of errors.

                            Key Features:
                            - Allows filtering elements across multiple views based on levels, categories, families, and types.
                            - Updates the UI to reflect the selected elements and their properties.
                            - Ensures proper handling of exceptions to maintain application stability.
                            """
                            # [SCRIPT:IMPORT_MODULES] Import necessary modules
                            from Autodesk.Revit.DB import (FilteredElementCollector,BuiltInCategory,BuiltInParameter,ElementLevelFilter,LogicalOrFilter,ElementId,)
                            from System.Collections.Generic import List
                            from sajdmo.modules.inform import count_elements_in_categories3, catch_families_for_levels, catch_types_for_family, catch_family_names_and_types_for_category
                            from UI.strings4_delete_elements_by_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23
                            
                            output = script.get_output()
                            
                            # [SCRIPT:LINKIFY_ELEMENT_ID] Function to create clickable links for Element IDs
                            def linkify_element_id(element_id):
                                return output.linkify(element_id)

                            try:
                                try:
                                    # [UI:SELECT_VIEWS] Prompt user to select multiple views
                                    selected_views = forms.select_views(title= str_3(lan), button_name=str_4(lan))
                                    if selected_views:
                                        selected_view = selected_views[0]  
                                        if selected_view is None:
                                            forms.alert(str_12(lan))
                                            sys.exit()

                                        doc = selected_view.Document
                                        level_ids = set()
                                        for view in selected_views:
                                            elements = FilteredElementCollector(doc, view.Id).WhereElementIsNotElementType().ToElements()
                                            view_level_ids = set(element.LevelId for element in elements)
                                            level_ids.update(view_level_ids)
                                        level_ids_list = list(level_ids)
                                        
                                        # [SCRIPT:CHECK_LEVEL_COUNT] Check if there are levels available
                                        if len(level_ids_list) == 1:
                                            forms.alert(str_11(lan))
                                        else:
                                            # [UI:SELECT_LEVELS] Prompt user to select levels
                                            selected_levels = forms.select_levels(
                                                title=str_1(lan),
                                                button_name=str_2(lan),
                                                width=500,
                                                multiple=True,
                                                filterfunc=lambda level: level.Id in level_ids_list,
                                                doc=doc,
                                                use_selection=False,
                                            )
                                            if selected_levels is None:
                                                forms.alert(str_12(lan))
                                                sys.exit()

                                            if selected_levels:
                                                doc = selected_view.Document
                                                level_ids = []
                                                selected_level_names = []
                                                for level in selected_levels:
                                                    level_ids.append(level.Id)
                                                    selected_level_names.append(level.Name)
                                                level_filters = [ElementLevelFilter(level.Id) for level in selected_levels]
                                                combined_filter = LogicalOrFilter(level_filters)
                                                
                                                # [SCRIPT:COUNT_ELEMENTS_IN_CATEGORIES] Count elements in categories for levels
                                                category_names = count_elements_in_categories3(selected_view, [level.Id for level in selected_levels])
                                                if not category_names:
                                                    forms.alert(str_13(lan))
                                                    sys.exit()

                                                # [UI:SELECT_CATEGORY] Prompt user to select a category
                                                selected_category = forms.SelectFromList.show(
                                                    [cat for cat in category_names.keys() if cat != "INVALID"],
                                                    title = str_6(lan),
                                                    button_name=str_5(lan),
                                                )
                                                if selected_category is None:
                                                    sys.exit()

                                                if selected_category:
                                                    # [SCRIPT:GET_FAMILIES_FOR_LEVELS] Retrieve families for selected levels and category
                                                    family_info = catch_families_for_levels(selected_view, [level.Id for level in selected_levels], selected_category)
                                                    if not family_info:
                                                        forms.alert(str_14(lan))
                                                        sys.exit()

                                                    family_names = list(family_info.keys())
                                                    selected_family = forms.SelectFromList.show(
                                                        [family for family in family_names if family != "INVALID"],
                                                        title= str_8(lan),
                                                        button_name=str_7(lan),
                                                    )
                                                    if selected_family is None:
                                                        sys.exit()

                                                    if selected_family:
                                                        # [SCRIPT:GET_TYPES_FOR_FAMILY] Retrieve types for selected levels, category, and family
                                                        type_info = catch_types_for_family(selected_view, [level.Id for level in selected_levels], selected_category, selected_family)
                                                        if not type_info:
                                                            forms.alert(str_15(lan))
                                                            sys.exit()

                                                        type_names = list(type_info.keys())
                                                        selected_type = forms.SelectFromList.show(
                                                            [type for type in type_names if type != "INVALID"],
                                                            title= str_10(lan),
                                                            button_name=str_9(lan),
                                                        )
                                                        if selected_type is None:
                                                            sys.exit()

                                                        if selected_type:
                                                            selected_elements = type_info[selected_type]
                                                            family_elements_on_levels = [
                                                                elem
                                                                for elem in FilteredElementCollector(doc, selected_view.Id)
                                                                .WhereElementIsNotElementType()
                                                                .ToElements()
                                                                if elem.Id in selected_elements
                                                            ]
                                                            element_ids_on_levels = [
                                                                (elem.Id, elem.Name, selected_view.Document.GetElement(elem.GetTypeId())
                                                                .get_Parameter(BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM)
                                                                .AsString(), selected_view.Document.GetElement(elem.GetTypeId())
                                                                .get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM)
                                                                .AsString()) for elem in family_elements_on_levels
                                                            ]
                                                            element_ids_collection = List[ElementId](
                                                                [element[0] for element in element_ids_on_levels]
                                                            )
                                                            
                                                            # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                            __revit__.ActiveUIDocument.Selection.SetElementIds(
                                                                element_ids_collection
                                                            )
                                                            __revit__.ActiveUIDocument.ShowElements(
                                                                element_ids_collection
                                                            )
                                                            for element_info in element_ids_on_levels:
                                                                clickable_id = linkify_element_id(element_info[0])
                                                        else:
                                                            output.print_stdout(str_18(lan))
                                                    else:
                                                        output.print_stdout(str_19(lan))
                                                else:
                                                    output.print_stdout(str_20(lan))
                                            else:
                                                output.print_stdout(str_21(lan))
                                    else:
                                        forms.alert(str_23(lan))
                                except:
                                    forms.alert(str_22(lan))
                                    pass

                            except StopIteration:
                                pass
                            except Exception:
                                pass            
                            except SystemExit:
                                pass
                        
                        # [SCRIPT:CHECK_USER_DECISION] Check if user made a decision
                        if selected_option1 is None:
                            sys.exit()
                        
                        # [SCRIPT:IMPORT_MODULES] Import necessary modules
                        from sajdmo.scripts.delete import selection_delete_el
                        from UI.strings5_delete_elements_by_type_filter import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_h1, str_h2

                        # [SCRIPT:SET_LANGUAGE] Set language
                        lan = lan_path()

                        # [SCRIPT:CHECK_SELECTION] Check if there are any selected elements
                        selection = revit.uidoc.Selection
                        selected_ids = selection.GetElementIds()
                        caunt = len(selected_ids)
                        if caunt == 0:
                            sys.exit()

                        # [UI:DELETE_FORM] Form for deleting elements based on type filters
                        class DELETE_FORM(Form):
                            # [SCRIPT:INITIALIZE_FORM] Initialize the form
                            def __init__(self, doc):
                                """
                                This function initializes the form for deleting elements based on type filters.

                                Workflow:
                                1. Sets up the form with a title, size, and background color.
                                2. Configures UI elements such as labels, buttons, and picture boxes.
                                3. Implements event handlers for button clicks and label clicks.

                                Key Features:
                                - Provides a user-friendly interface for deleting elements based on type filters.
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.Text = str_9(lan)
                                self.Width = 300
                                self.Height = 320
                                self.BackColor = Color.White
                                self.doc = doc
                                self.CenterToScreen()
                                self.report_type_filter_data = []
                                self.Icon = Drawing.Icon(reduId_icon())

                                # [UI:ADD_PICTURE_BOX] Add picture box to form
                                self.pictureBoxSFIPV = PictureBox()
                                self.pictureBoxSFIPV.Location = Point(110, 30)
                                self.pictureBoxSFIPV.Size = Size(65, 65)
                                imageSFIPV = Image.FromFile(delete_back())
                                self.pictureBoxSFIPV.Image = imageSFIPV
                                self.Controls.Add(self.pictureBoxSFIPV)

                                # [UI:ADD_LABEL] Add label to display element count
                                self.label = Label()
                                self.label.Text = str_10(lan) + str(caunt)
                                self.label.Location = Point(30, 120)
                                self.label.Width = 40
                                self.label.AutoSize = True
                                self.label.Font = Font(self.label.Font, FontStyle.Bold)
                                self.label.MaximumSize = Size(240,240)
                                self.Controls.Add(self.label)

                                # [UI:ADD_LABEL1] Add label to display instructions
                                self.label1 = Label()
                                self.label1.Text = str_11(lan)
                                self.label1.Location = Point(30, 160)
                                self.label1.AutoSize = True
                                self.label1.MaximumSize = Size(240,240)
                                self.Controls.Add(self.label1)
                                
                                # [UI:ADD_CANCEL_BUTTON] Add cancel button
                                self.cancel_button = Button()
                                self.cancel_button.Location = Point(140, 200)
                                self.cancel_button.Width = 35
                                self.cancel_button.Height = 35
                                self.cancel_button.Image = Icon(cancel_icon()).ToBitmap()
                                self.cancel_button.Click += self.cancel_button_clicked
                                self.Controls.Add(self.cancel_button)

                                # [UI:ADD_DELETE_BUTTON] Add delete button
                                self.delete_button = Button()
                                self.delete_button.Location = Point(100, 200)
                                self.delete_button.Width = 35
                                self.delete_button.Height = 35
                                self.delete_button.Image = Icon(ok_icon()).ToBitmap()
                                self.delete_button.Click += self.delete_button_clicked
                                self.Controls.Add(self.delete_button)

                                # [UI:ADD_CREATED_BY_LABEL] Add "BIM Pars" label
                                self.created_by_label = Label()
                                self.created_by_label.AutoSize = True
                                self.created_by_label.Text = "BIM Pars"
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.created_by_label.ForeColor = Color.Blue
                                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                self.created_by_label.Cursor = Cursors.Hand  
                                self.created_by_label.Click += self.Label_Click
                                self.Controls.Add(self.created_by_label)

                            # [SCRIPT:HANDLE_LABEL_CLICK] Handle "BIM Pars" label click
                            def Label_Click(self, sender, event):
                                """
                                This function handles the event when the "BIM Pars" label is clicked.

                                Workflow:
                                1. Opens the specified URL in the default web browser when the label is clicked.

                                Key Features:
                                - Provides a quick link to the BIM Pars website.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                url = parsweb(wurl)
                                webbrowser.open(url)

                            # [SCRIPT:HANDLE_CANCEL_BUTTON_CLICK] Handle cancel button click
                            def cancel_button_clicked(self, sender, e):
                                """
                                This function handles the event when the "Cancel" button is clicked.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    self.Close()
                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass
                            
                            # [SCRIPT:HANDLE_DELETE_BUTTON_CLICK] Handle delete button click
                            def delete_button_clicked(self, sender, e):
                                """
                                This function handles the event when the "Delete" button is clicked.

                                Workflow:
                                1. Retrieves the selected element IDs from the Revit model.
                                2. Prepares a report of the elements to be deleted.
                                3. Deletes the selected elements from the Revit model.
                                4. Implements exception handling to ensure the form remains stable in case of errors.

                                Key Features:
                                - Allows deleting elements based on the selected type filters.
                                - Updates the UI to reflect the deleted elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                                    from pyrevit import script

                                    # [SCRIPT:CREATE_REPORT] Prepare report of elements to be deleted
                                    selection = revit.uidoc.Selection
                                    selected_ids = selection.GetElementIds()
                                    caunt = len(selected_ids)
                                    if selected_ids:
                                        data = []
                                        for element_id in selected_ids:
                                            data.append([element_id.IntegerValue, str_1(lan)])
                                        data.append([str_8(lan), caunt]) 

                                    self.report_type_filter_data.extend(data)
                                    
                                    # [SCRIPT:DELETE_ELEMENTS] Delete selected elements
                                    self.delete_button.Enabled = False
                                    tit_msg = str_5(lan)
                                    succ_msg = str_6(lan)
                                    unsucc_msg = str_7(lan)
                                    selection_delete_el(tit_msg, succ_msg, unsucc_msg)  

                                except StopIteration:
                                    pass
                                    self.Close()
                                except Exception:
                                    output = script.get_output()
                                    output.close()
                                    forms.alert(str_12(lan), title=str_5(lan))
                                    self.Close()   
                                except SystemExit:
                                    pass
                                    self.Close()
                                self.Close()
                        
                        # [SCRIPT:GET_DOCUMENT] Get current document
                        doc = DocumentManager.Instance.CurrentDBDocument
                        if 'form' not in globals():
                            pass
                        else:
                            form = DELETE_FORM(doc)
                            form.ShowDialog()

                        return form.report_type_filter_data

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from structure.root import lan_path
                from UI.strings_delete_elements_by_type_filter import str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16
                
                lan = lan_path()

                delete_elements_using_type_filter = delete_elements_using_type_filter()

                # [SCRIPT:VERIFY_DELETION] Verify deletion status for each element
                if delete_elements_using_type_filter:
                    try:
                        # [SCRIPT:IMPORT_MODULES] Import necessary modules
                        from pyrevit import revit, forms, DB
                        import clr
                        clr.AddReference('RevitAPI')
                        clr.AddReference('RevitAPIUI')
                        from Autodesk.Revit.DB import FilteredElementCollector, ElementId
                        from System.Collections.Generic import List

                        verified_deletion_data = []
                        doc = __revit__.ActiveUIDocument.Document
                        
                        # [SCRIPT:GET_ALL_ELEMENTS] Get all elements in the model
                        all_elements = DB.FilteredElementCollector(doc).WhereElementIsNotElementType().ToElements()
                        
                        # [SCRIPT:CREATE_ELEMENT_ID_SET] Create a set of all element IDs for faster lookup
                        existing_element_ids = set()
                        for element in all_elements:
                            existing_element_ids.add(element.Id.IntegerValue)
                        
                        for row in delete_elements_using_type_filter:
                            element_id = row[0]
                            # [SCRIPT:SKIP_TOTAL_ROW] Skip the total count row
                            if isinstance(element_id, str) and str_9(lan) in element_id:
                                verified_deletion_data.append(row)
                                continue
                                
                            try:
                                # [SCRIPT:CHECK_ELEMENT_EXISTENCE] Check if element ID exists in the model
                                if int(element_id) in existing_element_ids:
                                    verified_deletion_data.append([element_id, str_13(lan)])
                                    self.Close()
                                else:
                                    verified_deletion_data.append([element_id, str_14(lan)]) 
                            except Exception:
                                continue
                        
                        # [SCRIPT:CREATE_REPORT] Create report if verified data exists
                        if verified_deletion_data:
                            headers = [str_10(lan), str_11(lan)]
                            data = [
                                [str(row[0]) for row in verified_deletion_data],  
                                [str(row[1]) for row in verified_deletion_data]   
                            ]
                            editable = [False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                        else:
                            forms.alert(str_15(lan), title=str_16(lan))  
                    except Exception as e:
                        MessageBox.Show(str(e),str_12(lan))
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_12(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Delete All DirectShape Elements] DirectShape Element Deletion
        #
        # Handles deletion of all DirectShape elements:
        # - Collects all DirectShape elements in the model
        # - Deletes all DirectShape elements
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:DELETE_DIRECTSHAPES]
        elif button_text == tool_str_23(lan):
            """
            This script handles the "Delete All DirectShape Elements" functionality in the BIM Pars app for Revit projects.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Collects all DirectShape elements in the active Revit document.
            4. Displays a user interface (UI) form with details about the number of DirectShape elements to be deleted.
            5. The form includes buttons for cancelling or confirming the deletion of the selected elements.
            6. If confirmed, the deletion process begins, and a report is generated with the status of each DirectShape element (whether it was deleted or not).
            7. If any errors occur during the process (e.g., invalid IDs or other issues), appropriate messages are displayed.
            8. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                def delete_all_direct_shapes_in_model():
                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                    import clr
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitAPIUI')
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitServices')
                    from Autodesk.Revit.DB import (
                        DirectShape,
                        FilteredElementCollector,
                        ElementId
                    )
                    from Autodesk.Revit.UI import TaskDialog, TaskDialogCommonButtons, TaskDialogResult
                    from RevitServices.Persistence import DocumentManager
                    import os
                    import sys
                    import System.Drawing as Drawing
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit
                    from System.Windows.Forms import Form, Label, Button, PictureBox, Cursors
                    import Autodesk.Revit.DB as DB
                    from RevitServices.Persistence import DocumentManager
                    from System.Collections.Generic import List
                    import pyrevit
                    from pyrevit import revit, DB, forms, script
                    import webbrowser
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.delete import selection_delete_el
                    from structure.root import wurl_path, directshapedelete_icon, delete_sym, delete_back, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon
                    from UI.strings_delete_all_direct_shapes import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11,str_12, str_13, str_14, str_h1, str_h2
                    from UI.url import parsweb

                    lan = lan_path()
                    wurl= wurl_path()

                    # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    
                    # [SCRIPT:CHECK_SELECTION] Check if selection is empty
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    if selection:
                        forms.alert(str_13(lan), title=str_14(lan))
                    else:
                        # [SCRIPT:COLLECT_DIRECTSHAPES] Collect all DirectShape elements
                        doc = revit.doc
                        collector = FilteredElementCollector(doc)
                        direct_shapes = collector.OfClass(DirectShape).ToElements()
                        ids = [direct_shape.Id for direct_shape in direct_shapes]
                        element_ids = List[ElementId](ids)  
                        uidoc = revit.uidoc
                        uidoc.Selection.SetElementIds(element_ids)  

                        # [SCRIPT:CHECK_ELEMENT_COUNT] Check if there are any elements
                        selection = revit.uidoc.Selection
                        selected_ids = selection.GetElementIds()
                        caunt = len(selected_ids)
                        if caunt == 0:
                            sys.exit()

                        # [UI:DELETE_FORM] Form for deleting DirectShape elements
                        class DELETE_FORM(Form):
                            # [SCRIPT:INITIALIZE_FORM] Initialize the form
                            def __init__(self, doc):
                                self.Text = str_9(lan)
                                self.Width = 300
                                self.Height = 320
                                self.BackColor = Color.White
                                self.doc = doc
                                self.CenterToScreen()
                                self.Icon = Drawing.Icon(directshapedelete_icon())#
                                self.report_direct_shape_delete_data = []

                                # [UI:ADD_PICTURE_BOX] Add picture box to form
                                self.pictureBoxSFIPV = PictureBox()
                                self.pictureBoxSFIPV.Location = Point(110, 30)
                                self.pictureBoxSFIPV.Size = Size(65, 65)
                                imageSFIPV = Image.FromFile(delete_back())
                                self.pictureBoxSFIPV.Image = imageSFIPV
                                self.Controls.Add(self.pictureBoxSFIPV)

                                # [UI:ADD_LABEL] Add label to display element count
                                self.label = Label()
                                self.label.Text = str_10(lan) + str(caunt)
                                self.label.Location = Point(30, 120)
                                self.label.Width = 40
                                self.label.AutoSize = True
                                self.label.Font = Font(self.label.Font, FontStyle.Bold)
                                self.label.MaximumSize = Size(240,240)
                                self.Controls.Add(self.label)

                                # [UI:ADD_LABEL1] Add label to display instructions
                                self.label1 = Label()
                                self.label1.Text = str_11(lan)
                                self.label1.Location = Point(30, 160)
                                self.label1.AutoSize = True
                                self.label1.MaximumSize = Size(240,240)
                                self.Controls.Add(self.label1)
                                
                                # [UI:ADD_CANCEL_BUTTON] Add cancel button
                                self.cancel_button = Button()
                                self.cancel_button.Location = Point(140, 200)
                                self.cancel_button.Width = 35
                                self.cancel_button.Height = 35
                                self.cancel_button.Image = Icon(cancel_icon()).ToBitmap()
                                self.cancel_button.Click += self.cancel_button_clicked
                                self.Controls.Add(self.cancel_button)

                                # [UI:ADD_DELETE_BUTTON] Add delete button
                                self.delete_button = Button()
                                self.delete_button.Location = Point(100, 200)
                                self.delete_button.Width = 35
                                self.delete_button.Height = 35
                                self.delete_button.Image = Icon(ok_icon()).ToBitmap()
                                self.delete_button.Click += self.delete_button_clicked
                                self.Controls.Add(self.delete_button)

                                # [UI:ADD_CREATED_BY_LABEL] Add "BIM Pars" label
                                self.created_by_label = Label()
                                self.created_by_label.AutoSize = True
                                self.created_by_label.Text = "BIM Pars"
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.created_by_label.ForeColor = Color.Blue
                                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                self.created_by_label.Cursor = Cursors.Hand  
                                self.created_by_label.Click += self.Label_Click
                                self.Controls.Add(self.created_by_label)

                            # [SCRIPT:HANDLE_LABEL_CLICK] Handle "BIM Pars" label click
                            def Label_Click(self, sender, event):
                                url = parsweb(wurl)
                                webbrowser.open(url)

                            # [SCRIPT:HANDLE_CANCEL_BUTTON_CLICK] Handle cancel button click
                            def cancel_button_clicked(self, sender, e):
                                try:
                                    self.Close()
                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [SCRIPT:HANDLE_DELETE_BUTTON_CLICK] Handle delete button click
                            def delete_button_clicked(self, sender, e):
                                try:
                                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                                    from pyrevit import script

                                    # [SCRIPT:CREATE_REPORT] Prepare report of elements to be deleted
                                    selection = revit.uidoc.Selection
                                    selected_ids = selection.GetElementIds()
                                    caunt = len(selected_ids)
                                    if selected_ids:
                                        data = []
                                        for element_id in selected_ids:
                                            data.append([element_id.IntegerValue, str_1(lan)])
                                        data.append([str_8(lan), caunt])  
                                    self.report_direct_shape_delete_data.extend(data)

                                    # [SCRIPT:DELETE_ELEMENTS] Delete selected elements
                                    self.delete_button.Enabled = False
                                    tit_msg = str_5(lan)
                                    succ_msg = str_6(lan)
                                    unsucc_msg = str_7(lan)
                                    selection_delete_el(tit_msg, succ_msg, unsucc_msg)

                                except StopIteration:
                                    pass
                                    self.Close()
                                except Exception:
                                    forms.alert(str_12(lan), title= str_5(lan))
                                    output = script.get_output()
                                    output.close()
                                    self.Close()   
                                    self.Close()           
                                except SystemExit:
                                    pass
                                    self.Close()
                                self.Close()
                                self.Close()

                        # [SCRIPT:GET_DOCUMENT] Get current document
                        doc = DocumentManager.Instance.CurrentDBDocument
                        if 'form' not in globals():
                            pass
                        else:
                            form = DELETE_FORM(doc)
                            form.ShowDialog()

                        return form.report_direct_shape_delete_data

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from structure.root import lan_path
                from UI.strings_delete_all_direct_shapes import str_8, str_15, str_16, str_17, str_18, str_19, str_20, str_21
                
                lan = lan_path()

                delete_all_direct_shapes_in_model = delete_all_direct_shapes_in_model()

                # [SCRIPT:VERIFY_DELETION] Verify deletion status for each element
                if delete_all_direct_shapes_in_model:
                    try:
                        # [SCRIPT:IMPORT_MODULES] Import necessary modules
                        from pyrevit import revit, forms, DB
                        import clr
                        clr.AddReference('RevitAPI')
                        clr.AddReference('RevitAPIUI')
                        from Autodesk.Revit.DB import FilteredElementCollector, ElementId
                        from System.Collections.Generic import List

                        verified_deletion_data = []
                        doc = __revit__.ActiveUIDocument.Document
                        
                        # [SCRIPT:GET_ALL_ELEMENTS] Get all elements in the model
                        all_elements = DB.FilteredElementCollector(doc).WhereElementIsNotElementType().ToElements()
                        
                        # [SCRIPT:CREATE_ELEMENT_ID_SET] Create a set of all element IDs for faster lookup
                        existing_element_ids = set()
                        for element in all_elements:
                            existing_element_ids.add(element.Id.IntegerValue)
                        
                        for row in delete_all_direct_shapes_in_model:
                            element_id = row[0]
                            # [SCRIPT:SKIP_TOTAL_ROW] Skip the total count row
                            if isinstance(element_id, str) and str_8(lan) in element_id:
                                verified_deletion_data.append(row)
                                continue
                                
                            try:
                                # [SCRIPT:CHECK_ELEMENT_EXISTENCE] Check if element ID exists in the model
                                if int(element_id) in existing_element_ids:
                                    verified_deletion_data.append([element_id, str_18(lan)])
                                    self.Close()
                                else:
                                    verified_deletion_data.append([element_id, str_19(lan)])
                            except Exception:
                                continue
                        
                        # [SCRIPT:CREATE_REPORT] Create report if verified data exists
                        if verified_deletion_data:
                            headers = [str_15(lan), str_16(lan)]
                            data = [
                                [str(row[0]) for row in verified_deletion_data],  
                                [str(row[1]) for row in verified_deletion_data]   
                            ]
                            editable = [False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                        else:
                            MessageBox.Show(str_20(lan), title=str_21(lan)) 
                    except Exception as e:
                        MessageBox.Show(str(e),str_17(lan))
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_17(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Delete All Elements of OST Category] OST Category Element Deletion
        #
        # Handles deletion of all elements of a specific OST category:
        # - Collects all elements of the selected OST category
        # - Deletes all elements of the selected OST category
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:HANDLE_DELETE_OST_CATEGORY]
        elif button_text == tool_str_24(lan):
            """
            This script handles the "Delete All Elements of OST Category" functionality in the BIM Pars app for Revit projects.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Collects all elements from the selected categories in the active Revit document.
            4. Displays a user interface (UI) form with details about the number of elements selected for deletion.
            5. The form includes buttons for cancelling or confirming the deletion of the selected elements.
            6. If confirmed, the deletion process begins, and a report is generated with the status of each element (whether it was deleted or not).
            7. If any errors occur during the process (e.g., invalid IDs, missing elements, or other issues), appropriate messages are displayed.
            8. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from pyrevit import forms

                # -*- coding: utf-8 -*-
                
                def delete_all_ost_category_in_model():
                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    import System.Drawing as Drawing
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit
                    from System.Windows.Forms import Form, Label, Button, PictureBox, Cursors
                    from RevitServices.Persistence import DocumentManager
                    from Autodesk.Revit.DB import ElementId, FilteredElementCollector, BuiltInCategory
                    from System.Collections.Generic import List
                    import Autodesk.Revit.DB as DB
                    import pyrevit
                    from pyrevit import revit, forms, script, DB
                    import getpass
                    from datetime import datetime  
                    import webbrowser
                    import os
                    import sys
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.delete import selection_delete_el
                    from structure.root import wurl_path, lan_path, deleteostcategory_icon, delete_sym, delete_back, cuslogo_path, logo_path, cancel_icon, ok_icon
                    from UI.strings_delete_all_element_of_ost_category import str_1, str_2, str_3, str_4, str_5, str_6
                    from UI.url import parsweb

                    lan = lan_path()
                    wurl= wurl_path()

                    # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    
                    # [SCRIPT:CHECK_SELECTION] Check if selection is empty
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    if selection:
                        MessageBox.Show(str_5(lan), str_6(lan))
                    else:
                        try:
                            # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                            doc = __revit__.ActiveUIDocument.Document
                            uidoc = __revit__.ActiveUIDocument
                            output = script.get_output()
                            
                            # [SCRIPT:GET_ALL_CATEGORIES] Get all built-in categories
                            all_categories = {}
                            categories = BuiltInCategory.GetValues(BuiltInCategory)
                            for category in categories:
                                category_id = category
                                category_name = category.ToString()
                                if category_name != "INVALID":
                                    element_count = len(FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements())
                                    if element_count > 0:
                                        all_categories[category_name] = category_id
                            
                            # [UI:SELECT_CATEGORIES] Prompt user to select categories
                            selected_categories = forms.SelectFromList.show(
                                all_categories.keys(),
                                title=str_1(lan),
                                multiselect=True,
                                button_name = str_2(lan)
                            )
                            if selected_categories is None:
                                forms.alert(str_3(lan))
                                sys.exit()
                            
                            # [SCRIPT:GET_ELEMENTS] Get elements from selected categories
                            selected_elements = []
                            for category_name in selected_categories:
                                category_id = all_categories[category_name]
                                elements = FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements()
                                selected_elements.extend(elements)
                            
                            # [SCRIPT:SELECT_ELEMENTS] Select elements
                            element_ids = List[ElementId](selected_element.Id for selected_element in selected_elements)
                            element_ids = element_ids          
                            doc = revit.doc
                            element_id_objects = List[DB.ElementId]()
                            for element_id in element_ids:
                                element_id_objects.Add(element_id)
                            revit.uidoc.Selection.SetElementIds(element_id_objects)
                            revit.uidoc.ShowElements(element_id_objects)
                            sys.exit()

                        except StopIteration:
                            pass
                        except Exception:
                            pass            
                        except SystemExit:
                            pass

                        from UI.strings2_delete_all_element_of_ost_category import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_h1, str_h2
                        
                        # [SCRIPT:CHECK_ELEMENT_COUNT] Check if there are any elements
                        selection = revit.uidoc.Selection
                        selected_ids = selection.GetElementIds()
                        caunt = len(selected_ids)
                        if caunt == 0:
                            sys.exit()

                        # [UI:DELETE_FORM] Form for deleting OST category elements
                        class DELETE_FORM(Form):
                            # [SCRIPT:INITIALIZE_FORM] Initialize the form
                            def __init__(self, doc):
                                self.Text = str_9(lan)
                                self.Width = 300
                                self.Height = 320
                                self.BackColor = Color.White
                                self.doc = doc
                                self.report_ost_category_delete_data = []
                                self.CenterToScreen()
                                self.Icon = Drawing.Icon(deleteostcategory_icon())

                                # [UI:ADD_PICTURE_BOX] Add picture box to form
                                self.pictureBoxSFIPV = PictureBox()
                                self.pictureBoxSFIPV.Location = Point(110, 30)
                                self.pictureBoxSFIPV.Size = Size(65, 65)
                                imageSFIPV = Image.FromFile(delete_back())
                                self.pictureBoxSFIPV.Image = imageSFIPV
                                self.Controls.Add(self.pictureBoxSFIPV)

                                # [UI:ADD_LABEL] Add label for element count
                                self.label = Label()
                                self.label.Text = str_10(lan) + str(caunt)
                                self.label.Location = Point(30, 120)
                                self.label.Width = 40
                                self.label.AutoSize = True
                                self.label.Font = Font(self.label.Font, FontStyle.Bold)
                                self.label.MaximumSize = Size(240,240)
                                self.Controls.Add(self.label)

                                # [UI:ADD_LABEL1] Add label for confirmation message
                                self.label1 = Label()
                                self.label1.Text = str_11(lan)
                                self.label1.Location = Point(30, 160)
                                self.label1.AutoSize = True
                                self.label1.MaximumSize = Size(240,240)
                                self.Controls.Add(self.label1)
                                
                                # [UI:ADD_CANCEL_BUTTON] Add cancel button
                                self.cancel_button = Button()
                                self.cancel_button.Location = Point(140, 200)
                                self.cancel_button.Width = 35
                                self.cancel_button.Height = 35
                                self.cancel_button.Image = Icon(cancel_icon()).ToBitmap()
                                self.cancel_button.Click += self.cancel_button_clicked
                                self.Controls.Add(self.cancel_button)

                                # [UI:ADD_DELETE_BUTTON] Add delete button
                                self.delete_button = Button()
                                self.delete_button.Location = Point(100, 200)
                                self.delete_button.Width = 35
                                self.delete_button.Height = 35
                                self.delete_button.Image = Icon(ok_icon()).ToBitmap()
                                self.delete_button.Click += self.delete_button_clicked
                                self.Controls.Add(self.delete_button)

                                # [UI:ADD_CREATED_BY_LABEL] Add "BIM Pars" label
                                self.created_by_label = Label()
                                self.created_by_label.AutoSize = True
                                self.created_by_label.Text = "BIM Pars"
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.created_by_label.ForeColor = Color.Blue
                                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                self.created_by_label.Cursor = Cursors.Hand  
                                self.created_by_label.Click += self.Label_Click
                                self.Controls.Add(self.created_by_label)

                            # [SCRIPT:HANDLE_LABEL_CLICK] Handle "BIM Pars" label click
                            def Label_Click(self, sender, event):
                                url = parsweb(wurl)
                                webbrowser.open(url)

                            # [SCRIPT:HANDLE_CANCEL_BUTTON_CLICK] Handle cancel button click
                            def cancel_button_clicked(self, sender, e):
                                try:
                                    self.Close()
                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [SCRIPT:HANDLE_DELETE_BUTTON_CLICK] Handle delete button click
                            def delete_button_clicked(self, sender, e):
                                try:
                                    from pyrevit import script
                                    selection = revit.uidoc.Selection
                                    selected_ids = selection.GetElementIds()
                                    caunt = len(selected_ids)
                                    if selected_ids:
                                        data = []
                                        for element_id in selected_ids:
                                            data.append([element_id.IntegerValue, str_1(lan)])
                                        data.append([str_8(lan), caunt])  
                                    self.report_ost_category_delete_data.extend(data)
                                    
                                    # [SCRIPT:DELETE_ELEMENTS] Delete selected elements
                                    self.delete_button.Enabled = False
                                    tit_msg = str_5(lan)
                                    succ_msg = str_6(lan)
                                    unsucc_msg = str_7(lan)
                                    selection_delete_el(tit_msg, succ_msg, unsucc_msg)

                                except StopIteration:
                                    pass
                                    self.Close()
                                except Exception:
                                    forms.alert(str_12(lan), title= str_5(lan))
                                    output = script.get_output()
                                    output.close()
                                    self.Close()   
                                    self.Close()           
                                except SystemExit:
                                    pass
                                    self.Close()
                                self.Close()
                        
                        # [SCRIPT:GET_DOCUMENT] Get current document
                        doc = DocumentManager.Instance.CurrentDBDocument
                        if 'form' not in globals():
                            pass
                        else:
                            form = DELETE_FORM(doc)
                            form.ShowDialog()

                        return form.report_ost_category_delete_data 

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from structure.root import lan_path
                from UI.strings_delete_all_element_of_ost_category import str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14
                    
                lan = lan_path()

                delete_all_ost_category_in_model = delete_all_ost_category_in_model()

                # [SCRIPT:VERIFY_DELETION] Verify deletion status for each element
                if delete_all_ost_category_in_model:
                    try:
                        # [SCRIPT:IMPORT_MODULES] Import necessary modules
                        from pyrevit import revit, forms, DB
                        import clr
                        clr.AddReference('RevitAPI')
                        clr.AddReference('RevitAPIUI')
                        from Autodesk.Revit.DB import FilteredElementCollector, ElementId
                        from System.Collections.Generic import List

                        verified_deletion_data = []
                        doc = __revit__.ActiveUIDocument.Document
                        
                        # [SCRIPT:GET_ALL_ELEMENTS] Get all elements in the model
                        all_elements = DB.FilteredElementCollector(doc).WhereElementIsNotElementType().ToElements()
                        
                        # [SCRIPT:CREATE_ELEMENT_ID_SET] Create a set of all element IDs for faster lookup
                        existing_element_ids = set()
                        for element in all_elements:
                            existing_element_ids.add(element.Id.IntegerValue)
                        
                        for row in delete_all_ost_category_in_model:
                            element_id = row[0]
                            # [SCRIPT:SKIP_TOTAL_ROW] Skip the total count row
                            if isinstance(element_id, str) and str_7(lan) in element_id:
                                verified_deletion_data.append(row)
                                continue
                                
                            try:
                                # [SCRIPT:CHECK_ELEMENT_EXISTENCE] Check if element ID exists in the model
                                if int(element_id) in existing_element_ids:
                                    verified_deletion_data.append([element_id, str_11(lan)])
                                    self.Close()
                                else:
                                    verified_deletion_data.append([element_id, str_12(lan)])
                            except Exception:
                                continue
                        
                        # [SCRIPT:CREATE_REPORT] Create report if verified data exists
                        if verified_deletion_data:
                            headers = [str_8(lan), str_9(lan)]
                            data = [
                                [str(row[0]) for row in verified_deletion_data],  
                                [str(row[1]) for row in verified_deletion_data]   
                            ]
                            editable = [False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                        else:
                            MessageBox.Show(str_13(lan), title=str_14(lan))
                    except Exception as e:
                        MessageBox.Show(str(e),str_10(lan))
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_10(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Search Values of Parameters by Filter] Parameter Value Search by Filter
        #
        # Handles search and display of parameter values based on filters:
        # - Filters elements by category, family, and type
        # - Displays parameter values for selected elements
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:HANDLE_PARAMETER_SEARCH]
        elif button_text == tool_str_25(lan):
            """
            This script handles the "Search Values of Parameters by Filter" functionality in the BIM Pars app for Revit projects.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Retrieves all categories available in the current active view.
            4. Displays a UI for category selection. Upon choosing a category, it fetches related families and types.
            5. Allows the user to filter and select specific families or types within the chosen category.
            6. Displays a list of elements in the active view that match the selected family or type.
            7. Allows the user to select multiple parameters and displays their values for each element.
            8. A report is generated showing the selected element IDs, names, parameter names, and their values.
            9. If an error occurs during any step (such as missing parameters or invalid selections), an appropriate error message is shown.
            10. Restores the Windows Form after the operation is complete.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                from pyrevit import revit, script, forms
                import pyrevit.forms
                import clr
                clr.AddReference('RevitAPI')
                import Autodesk.Revit.DB as DB
                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                from System.Collections.Generic import List
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.inform import count_elements_in_categories2, catch_family_names_and_types_for_category
                from sajdmo.modules.param import get_parameter_value
                from structure.root import lan_path, cuslogo_path, logo_path, pvaluefilter_icon
                from UI.strings_search_value_of_parameters_by_filter import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_33, str_h1, str_h2)

                lan = lan_path()
                output = script.get_output()
                #with forms.ProgressBar(title="", indeterminate=True):
                try:
                    # [SCRIPT:GET_ACTIVE_VIEW] Get active view
                    view = __revit__.ActiveUIDocument.ActiveView 
                    
                    # [SCRIPT:GET_CATEGORIES] Retrieve categories
                    category_names = count_elements_in_categories2(view)
                    
                    # [UI:SELECT_CATEGORY] Prompt user to select a category
                    selected_category = forms.SelectFromList.show(category_names ,str_2(lan), button_name=str_1(lan))
                    if selected_category is None:
                            sys.exit()  

                    if selected_category:
                        try:
                            # [SCRIPT:GET_FAMILIES_AND_TYPES] Retrieve families and types for the selected category
                            family_info = catch_family_names_and_types_for_category(view, selected_category)
                            a = []  
                            if family_info is not None:
                                family_names = list(family_info.keys())
                                family_names.insert(0, str_30(lan)) 
                                
                                # [UI:SELECT_FAMILY] Prompt user to select a family
                                selected_family = forms.SelectFromList.show(family_names,str_3(lan), button_name=str_4(lan))
                                if selected_family is None:
                                    sys.exit()  
                                    
                                if selected_family:
                                    if selected_family == str_30(lan):
                                        for family_name, types in family_info.items():
                                            for type_info in types:
                                                a.append(type_info[1])  
                                                linkified_id = output.linkify(type_info[1]) 
                                                element_ids = a  
                                                doc = revit.doc
                                                element_id_objects = List[DB.ElementId]()
                                                for element_id in element_ids:
                                                    element_id_objects.Add(element_id)
                                                # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                    else:
                                        types = family_info[selected_family]
                                        unique_types = list(set([t[0] for t in types]))  
                                        
                                        # [UI:SELECT_TYPE] Prompt user to select a type
                                        selected_type = forms.SelectFromList.show(unique_types,str_5(lan), button_name=str_6(lan))
                                        if selected_type is None:
                                                sys.exit()  

                                        if selected_type:
                                            type_info = [t for t in types if t[0] == selected_type]
                                            for info in type_info:
                                                a.append(info[1]) 
                                                linkified_id = output.linkify(info[1])  
                                                element_ids = a
                                                doc = revit.doc
                                                element_id_objects = List[DB.ElementId]()
                                                for element_id in element_ids:
                                                    element_id_objects.Add(element_id)
                                                # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                        else:
                                            output.print_stdout(str_21(lan))
                                else:
                                    output.print_stdout(str_22(lan))
                            else:
                                forms.alert(str_23(lan), title=str_24(lan))
                        except Exception as e:
                            forms.alert(str_29(lan).format(e), title=str_24(lan))
                            sys.exit()
                    else:
                        output.print_stdout(str_25(lan))
                    
                    # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    
                    # [SCRIPT:GET_SELECTED_ELEMENTS] Get selected elements
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    
                    # [SCRIPT:CHECK_SELECTION] Check if more than one element is selected
                    if len(selection) < 1:
                        forms.alert(str_26(lan), title=str_27(lan))
                    else:
                        if not selection:
                            forms.alert(str_26(lan), title=str_27(lan))
                        else:
                            # [UI:SELECT_PARAMETERS] Prompt user to select parameters
                            parameter_list = pyrevit.forms.select_parameters(
                                src_element=selection[0],
                                title=str_7(lan),
                                button_name=str_8(lan),
                                multiple=True,
                                filterfunc=None,
                                include_instance=True,
                                include_type=True,
                                exclude_readonly=True
                            )
                            if parameter_list is None:
                                forms.alert(str_28(lan))
                                sys.exit()

                            if parameter_list:
                                selected_parameters = [param.definition for param in parameter_list]
                                table_data = []
                                for source_element in selection:
                                    element_id = source_element.Id
                                    for selected_parameter in selected_parameters:
                                        instance_param_value = get_parameter_value(source_element, selected_parameter)
                                        if instance_param_value is not None:
                                            table_data.append([element_id, source_element.Name, selected_parameter.Name, instance_param_value])
                                        else:
                                            if isinstance(source_element, DB.Wall):
                                                type_param = source_element.WallType.LookupParameter(selected_parameter.Name)
                                            else:
                                                type_param = source_element.Symbol.LookupParameter(selected_parameter.Name)

                                            if type_param and type_param.HasValue:
                                                type_param_value = type_param.AsValueString()
                                                table_data.append([element_id, source_element.Name, selected_parameter.Name, type_param_value])
                                            else:
                                                table_data.append([element_id, source_element.Name, selected_parameter.Name, str_20(lan)])

                                # [SCRIPT:CREATE_REPORT] Create report with parameter values
                                headers = [str_16(lan), str_17(lan), str_18(lan), str_19(lan)]
                                data = [
                                    [str(row[0]) for row in table_data],  
                                    [str(row[1]) for row in table_data],  
                                    [str(row[2]) for row in table_data],  
                                    [str(row[3]) for row in table_data]   
                                ]
                                editable = [False, False, False, False]
                                self.create_report_tab(headers, data, editable, title=button_text)
                                                
                except StopIteration:  
                    pass
                except Exception:
                    pass                      
                except SystemExit:
                    pass
                    
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_33(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Search Values of Parameters by Filter for Family Document] Parameter Value Search by Filter (Family Document)
        #
        # Handles search and display of parameter values based on filters for family documents:
        # - Filters elements by category, family, and type
        # - Displays parameter values for selected elements
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:PARAMETER_SEARCH_FAMILY]
        elif button_text == tool_str_26(lan):
            """
            This script handles the "Search Values of Parameters by Filter for Family Document" functionality in the BIM Pars app for Revit family documents.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Checks if the active document is a family document.
            4. If the document is a family document, retrieves all categories available in the current active view.
            5. Displays a UI for category selection. Upon choosing a category, it fetches related families and types.
            6. Allows the user to filter and select specific families or types within the chosen category.
            7. Displays a list of elements in the family document that match the selected family or type.
            8. Allows the user to select multiple parameters and displays their values for each element.
            9. If the parameter values are missing, the script will show a default message indicating so.
            10. A report is generated showing the selected element IDs, names, parameter names, and their values.
            11. If the document is not a family document, an appropriate alert is shown.
            12. If any error occurs during the process, an appropriate error message is displayed.
            13. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-

                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                import clr
                clr.AddReference('RevitAPI')
                from pyrevit import revit, script, forms
                import Autodesk.Revit.DB as DB
                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                from System.Collections.Generic import List
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.inform import count_elements_in_categories2, catch_family_names_and_types_for_category
                from sajdmo.modules.param import get_parameter_value
                from structure.root import lan_path, cuslogo_path, logo_path, pvaluefilter_icon
                from UI.strings_search_value_of_parameters_by_filter_ import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_33, str_h1, str_h2)

                lan = lan_path()
                output = script.get_output()

                # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                uidoc = __revit__.ActiveUIDocument
                doc = __revit__.ActiveUIDocument.Document
                
                # [SCRIPT:CHECK_FAMILY_DOCUMENT] Check if the document is a family document
                if doc.OwnerFamily is None:
                    forms.alert(str_29(lan))
                else:
                    # [SCRIPT:GET_ACTIVE_VIEW] Get active view
                    view = __revit__.ActiveUIDocument.ActiveView  
                    
                    # [SCRIPT:GET_CATEGORIES] Retrieve categories
                    category_names = count_elements_in_categories2(view)
                    
                    # [UI:SELECT_CATEGORY] Prompt user to select a category
                    selected_category = forms.SelectFromList.show(category_names,str_2(lan), button_name=str_1(lan))
                    if selected_category is None:
                            sys.exit()  

                    if selected_category:
                        try:
                            # [SCRIPT:GET_FAMILIES_AND_TYPES] Retrieve families and types for the selected category
                            family_info = catch_family_names_and_types_for_category(view, selected_category)
                            a = []  
                            if family_info is not None:
                                family_names = list(family_info.keys())
                                family_names.insert(0, str_30(lan))  
                                
                                # [UI:SELECT_FAMILY] Prompt user to select a family
                                selected_family = forms.SelectFromList.show(family_names,str_3(lan), button_name=str_4(lan))
                                if selected_family is None:
                                    sys.exit()  
                                if selected_family:
                                    if selected_family == str_30(lan):
                                        for family_name, types in family_info.items():
                                            for type_info in types:
                                                a.append(type_info[1])  
                                                linkified_id = output.linkify(type_info[1])  
                                                element_ids = a  
                                                doc = revit.doc
                                                element_id_objects = List[DB.ElementId]()
                                                for element_id in element_ids:
                                                    element_id_objects.Add(element_id)
                                                # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                    else:
                                        types = family_info[selected_family]
                                        unique_types = list(set([t[0] for t in types]))  
                                        
                                        # [UI:SELECT_TYPE] Prompt user to select a type
                                        selected_type = forms.SelectFromList.show(unique_types,str_5(lan), button_name=str_6(lan))
                                        if selected_type is None:
                                                sys.exit()  

                                        if selected_type:
                                            type_info = [t for t in types if t[0] == selected_type]
                                            for info in type_info:
                                                a.append(info[1])  
                                                linkified_id = output.linkify(info[1])  
                                                element_ids = a 
                                                doc = revit.doc
                                                element_id_objects = List[DB.ElementId]()
                                                for element_id in element_ids:
                                                    element_id_objects.Add(element_id)
                                                # [SCRIPT:SELECT_ELEMENTS] Select elements
                                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                                revit.uidoc.ShowElements(element_id_objects)
                                        else:
                                            output.print_stdout(str_21(lan))
                                else:
                                    output.print_stdout(str_22(lan))
                            else:
                                forms.alert(str_23(lan), title=str_24(lan))
                        except Exception as e:
                            forms.alert(str_24(lan).format(e), title=str_24(lan))
                            sys.exit()
                    else:
                        output.print_stdout(str_25(lan))
                    
                    # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    
                    # [SCRIPT:GET_SELECTED_ELEMENTS] Get selected elements
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    
                    # [SCRIPT:CHECK_SELECTION] Check if any element is selected
                    if len(selection) < 1:
                        forms.alert(str_26(lan), title=str_27(lan))
                    else:
                        import pyrevit.forms
                        if not selection:
                            forms.alert(str_26(lan), title=str_27(lan))
                        else:
                            # [UI:SELECT_PARAMETERS] Prompt user to select parameters
                            parameter_list = pyrevit.forms.select_family_parameters(
                                doc,
                                title=str_7(lan),
                                button_name = str_8(lan),
                                multiple=True,
                                include_instance=True,
                                include_type=True
                            )
                            if parameter_list is None:
                                forms.alert(str_28(lan))
                            else:
                                if parameter_list:  
                                    selected_parameters = [param.Definition for param in parameter_list]
                                    table_data = []
                                    for source_element in selection:
                                        element_id = source_element.Id
                                        for selected_parameter in selected_parameters:
                                            instance_param_value = get_parameter_value(source_element, selected_parameter)
                                            if isinstance(source_element, DB.FamilyInstance):
                                                element_type = doc.GetElement(source_element.GetTypeId())
                                                type_param = element_type.LookupParameter(selected_parameter.Name)
                                            elif isinstance(source_element, DB.Wall):
                                                type_param = source_element.WallType.LookupParameter(selected_parameter.Name)
                                            else:
                                                type_param = None
                                            if type_param and type_param.HasValue:
                                                type_param_value = type_param.AsValueString()
                                                table_data.append([element_id, source_element.Name, selected_parameter.Name, type_param_value])
                                            else:
                                                table_data.append([element_id, source_element.Name, selected_parameter.Name, str_20(lan)])

                                    # [SCRIPT:CREATE_REPORT] Create report with parameter values
                                    headers = [str_16(lan), str_17(lan), str_18(lan), str_19(lan)]
                                    data = [
                                        [str(row[0]) for row in table_data],  
                                        [str(row[1]) for row in table_data],  
                                        [str(row[2]) for row in table_data],  
                                        [str(row[3]) for row in table_data]   
                                    ]
                                    editable = [False, False, False, False]
                                    self.create_report_tab(headers, data, editable, title=button_text)

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_33(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Snipe Parameter Value] Parameter Value Snipe
        #
        # Handles selection and display of parameter values for a specific element:
        # - Selects parameters from a single element
        # - Displays parameter values (both instance and type)
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:PARAMETER_SNIPE]
        elif button_text == tool_str_27(lan):
            """
            This script handles the "Snipe Parameter Value" functionality in the BIM Pars app, allowing users to select parameters from an element and display their values.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Checks if the active document is a family document. If it is, an alert is shown and the script terminates.
            4. If the document is not a family document, the script checks if exactly one element is selected.
            5. If one element is selected, the script allows the user to select multiple parameters (both instance and type) from the chosen element.
            6. For each selected parameter, the script retrieves its value (either from an instance or type parameter) and stores it.
            7. If the parameter has no value, a default message is shown indicating that the parameter is not available.
            8. The data (element ID, element name, parameter names, and values) is transformed into a format suitable for generating a report.
            9. A report tab is created and displayed showing the selected parameters and their values.
            10. If no parameters are selected, an alert is shown.
            11. If any error occurs during the process, an appropriate error message is displayed.
            12. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                import clr
                from Autodesk.Revit import DB
                clr.AddReference("RevitAPI")
                import pyrevit.forms
                from pyrevit import script, forms
                import os
                import sys
                import getpass
                from datetime import datetime  
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.param import get_parameter_value
                from structure.root import lan_path, cuslogo_path, logo_path, snipers_icon
                from UI.strings_snipe_paameter_value import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_h1, str_h2

                lan = lan_path()

                # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                uidoc = __revit__.ActiveUIDocument
                doc = __revit__.ActiveUIDocument.Document
                
                # [SCRIPT:CHECK_FAMILY_DOCUMENT] Check if the document is a family document
                is_family_document = isinstance(doc.OwnerFamily, DB.Family)
                if is_family_document:
                    forms.alert(str_3(lan), title=str_2(lan))
                else:
                    # [SCRIPT:CHECK_SELECTION] Check if exactly one element is selected
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    if len(selection) != 1:
                        forms.alert(str_1(lan), title=str_2(lan))
                    else:
                        try:
                            # [SCRIPT:GET_ELEMENT] Retrieve the selected element
                            element_id = selection[0].Id  
                            source_element = doc.GetElement(element_id)
                            
                            # [UI:SELECT_PARAMETERS] Prompt user to select parameters
                            parameter_list = pyrevit.forms.select_parameters(
                                src_element=source_element,
                                title= str_4(lan),
                                button_name=str_5(lan),
                                multiple=True,
                                filterfunc=None,
                                include_instance=True,
                                include_type=True,
                                exclude_readonly=True
                            )

                            if parameter_list:  
                                # [SCRIPT:FETCH_PARAMETER_VALUES] Fetch values of selected parameters
                                selected_parameters = [param.definition for param in parameter_list]
                                table_data = []
                                
                                # [SCRIPT:GET_ELEMENT_INFO] Get element info
                                element_id = source_element.Id.IntegerValue
                                element_name = source_element.Name if hasattr(source_element, 'Name') else str_16(lan)#'No Name'
                                
                                for selected_parameter in selected_parameters:
                                    instance_param_value = get_parameter_value(source_element, selected_parameter)
                                    if instance_param_value is not None:
                                        table_data.append([element_id, element_name, selected_parameter.Name, instance_param_value])
                                    else:
                                        if isinstance(source_element, DB.Wall):
                                            type_param = source_element.WallType.LookupParameter(selected_parameter.Name)
                                        else:
                                            type_param = source_element.Symbol.LookupParameter(selected_parameter.Name)
                                        if type_param and type_param.HasValue:
                                            type_param_value = type_param.AsValueString()
                                            table_data.append([element_id, element_name, selected_parameter.Name, type_param_value])
                                        else:
                                            table_data.append([element_id, element_name, selected_parameter.Name, str_6(lan)])
                                
                                # [SCRIPT:CREATE_REPORT] Transform data for report
                                headers = [str_14(lan), str_15(lan), str_10(lan), str_7(lan)]  
                                data = [
                                    [str(row[0]) for row in table_data],  
                                    [str(row[1]) for row in table_data],  
                                    [str(row[2]) for row in table_data],  
                                    [str(row[3]) for row in table_data]   
                                ]
                                editable = [False, False, False, False]  
                                self.create_report_tab(headers, data, editable, title=button_text)
                            else:
                                forms.alert(str_11(lan), title=str_8(lan))

                        except StopIteration:
                            pass
                        except Exception:
                            pass            
                        except SystemExit:
                            pass
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_13(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Snipe Parameter Value for Family Document] Parameter Value Snipe (Family Document)
        #
        # Handles selection and display of parameter values for a specific element in a family document:
        # - Selects parameters from a single element
        # - Displays parameter values (both instance and type)
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:PARAMETER_SNIPE_FAMILY]
        elif button_text == tool_str_28(lan):
            """
            This script handles the "Snipe Parameter Value for Family Document" functionality in the BIM Pars app. It allows users to select parameters for a family document and display their values.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Checks if the active document is a family document. If it's not a family document, an alert is shown.
            4. If a valid family document is open, the script checks if exactly one element is selected. If not, it shows an alert.
            5. If one element is selected, the user is prompted to select parameters (both instance and type parameters) from the element.
            6. For each selected parameter, the script retrieves its value. If a parameter has no value, a default message is shown indicating that the parameter is not available.
            7. The retrieved data (element ID, element name, parameter names, and values) is formatted into a structure suitable for creating a report.
            8. A report tab is created and displayed with the selected parameters and their values.
            9. If no parameters are selected, an alert is displayed.
            10. If any error occurs during the process, an appropriate error message is shown.
            11. Finally, the Windows Form is restored after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                import clr
                clr.AddReference('RevitAPI')
                from Autodesk.Revit import DB
                import pyrevit.forms
                from pyrevit import script, forms
                import os
                import sys
                import getpass
                from datetime import datetime  
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.param import get_parameter_value
                from structure.root import snipers_icon, lan_path, cuslogo_path, logo_path
                from UI.strings_snipe_parameter_value_for_family_document import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, 
                str_16, str_17, str_18, str_h1, str_h2)

                lan = lan_path()

                # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                uidoc = __revit__.ActiveUIDocument
                doc = __revit__.ActiveUIDocument.Document
                output = script.get_output()
                
                # [SCRIPT:CHECK_FAMILY_DOCUMENT] Check if the document is a family document
                if doc.OwnerFamily is None:
                    forms.alert(str_3(lan))
                else:
                    # [SCRIPT:CHECK_SELECTION] Check if exactly one element is selected
                    selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                    if len(selection) != 1:
                        forms.alert(str_1(lan), title=str_2(lan))
                    else: 
                        selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                        # [SCRIPT:CHECK_SELECTION] Check if any element is selected
                        if len(selection) < 1:
                            forms.alert(str_1(lan), title=str_2(lan))
                        else:
                            try:
                                # [SCRIPT:GET_PARAMETER_VALUE] Function to fetch the value of a parameter
                                def get_parameter_value(element, param_definition):
                                    param_value = None
                                    param = element.LookupParameter(param_definition.Name)
                                    if param and param.HasValue:
                                        param_value = param.AsValueString()
                                    return param_value

                                if not selection:
                                    forms.alert(str_1(lan), title=str_2(lan))
                                else:
                                    # [UI:SELECT_PARAMETERS] Prompt user to select parameters
                                    parameter_list = pyrevit.forms.select_family_parameters(
                                        doc,
                                        title=str_4(lan),
                                        button_name=str_5(lan),
                                        multiple=True,
                                        include_instance=True,
                                        include_type=True
                                    )
                                    if parameter_list is None:
                                        forms.alert(str_12(lan))
                                    else:
                                        if parameter_list:  
                                            # [SCRIPT:FETCH_PARAMETER_VALUES] Fetch values of selected parameters
                                            selected_parameters = [param.Definition for param in parameter_list]
                                            table_data = []
                                            
                                            for source_element in selection:
                                                element_id = source_element.Id.IntegerValue  
                                                element_name = source_element.Name if hasattr(source_element, 'Name') else str_17(lan)#'No Name'
                                                
                                                for selected_parameter in selected_parameters:
                                                    instance_param_value = get_parameter_value(source_element, selected_parameter)
                                                    if isinstance(source_element, DB.FamilyInstance):
                                                        element_type = doc.GetElement(source_element.GetTypeId())
                                                        type_param = element_type.LookupParameter(selected_parameter.Name)
                                                    elif isinstance(source_element, DB.Wall):
                                                        type_param = source_element.WallType.LookupParameter(selected_parameter.Name)
                                                    else:
                                                        type_param = None
                                                        
                                                    if type_param and type_param.HasValue:
                                                        type_param_value = type_param.AsValueString()
                                                        table_data.append([element_id, element_name, selected_parameter.Name, type_param_value])
                                                    else:
                                                        table_data.append([element_id, element_name, selected_parameter.Name, str_6(lan)])

                                            # [SCRIPT:CREATE_REPORT] Transform data for report
                                            headers = [str_13(lan), str_14(lan), str_10(lan), str_7(lan)]
                                            data = [
                                                [str(row[0]) for row in table_data],  
                                                [str(row[1]) for row in table_data],  
                                                [str(row[2]) for row in table_data],  
                                                [str(row[3]) for row in table_data]   
                                            ]
                                            editable = [False, False, False, False]  
                                            self.create_report_tab(headers, data, editable, title=button_text)

                            except StopIteration:
                                pass
                            except Exception:
                                forms.alert(str_15(lan))
                                pass            
                            except SystemExit:
                                pass

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_18(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Dictionary] Element Parameter Dictionary
        #
        # Handles creation of a dictionary of parameters for a selected element:
        # - Retrieves instance and type parameters
        # - Displays parameter details (name, type, value, etc.)
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:ELEMENT_DICTIONARY]
        elif button_text == tool_str_29(lan):
            """
            This script handles the "Dictionary of Element" functionality in the BIM Pars app. It provides a dictionary of parameters for a selected Revit element and displays them in a structured report.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Checks if exactly one element is selected. If no element or more than one element is selected, an alert is displayed.
            4. If exactly one element is selected, it retrieves the instance and type parameters of the selected element.
            5. The parameters are grouped into instance and type categories and their details (e.g., name, type, value, and whether they have a value) are stored.
            6. The parameter data is then transformed into a structure suitable for generating a report.
            7. A report tab is created and displayed, showing the instance and type parameters of the selected element.
            8. If any error occurs during the process, an error message is shown.
            9. Finally, the Windows Form is restored after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                import clr
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                from Autodesk.Revit import DB
                from pyrevit import script, forms
                import os
                import sys
                import getpass
                from datetime import datetime  
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.param import map
                from structure.root import elementdict_icon, lan_path, cuslogo_path, logo_path
                from UI.strings_dictionary_of_element import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                str_17,str_18, str_19, str_h1, str_h2)

                lan = lan_path()

                # [SCRIPT:GET_ACTIVE_DOCUMENT] Get active document
                uidoc = __revit__.ActiveUIDocument
                doc = __revit__.ActiveUIDocument.Document

                # [SCRIPT:CHECK_SELECTION] Check if exactly one element is selected
                selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                if len(selection) != 1:
                    forms.alert(str_1(lan), title=str_2(lan))
                else:
                    try:
                        if selection.Count > 0:
                            try:
                                # [SCRIPT:GET_PARAMETER_MAPS] Retrieve instance and type parameters
                                instance_dict, type_dict = map(selection[0])
                                
                                # [SCRIPT:PREPARE_DATA] Prepare data for the report
                                all_data = []
                                
                                # [SCRIPT:ADD_INSTANCE_PARAMETERS] Add instance parameters to report data
                                for param_name, values in instance_dict.items():
                                    if len(values) >= 3:
                                        all_data.append([
                                            str_3(lan),       
                                            str(param_name),  
                                            str(values[0]),   
                                            str(values[1]),   
                                            str(values[2])    
                                        ])
                                
                                # [SCRIPT:ADD_TYPE_PARAMETERS] Add type parameters to report data
                                for param_name, values in type_dict.items():
                                    if len(values) >= 3:
                                        all_data.append([
                                            str_8(lan),       
                                            str(param_name),  
                                            str(values[0]),   
                                            str(values[1]),   
                                            str(values[2])    
                                        ])
                                
                                # [SCRIPT:TRANSFORM_DATA] Transform data into columns for create_report_tab
                                headers = ["Parameter Category", str_4(lan), str_5(lan), str_6(lan), str_7(lan)]
                                column_data = [
                                    [row[0] for row in all_data],  
                                    [row[1] for row in all_data],  
                                    [row[2] for row in all_data],  
                                    [row[3] for row in all_data],  
                                    [row[4] for row in all_data]   
                                ]
                                editable = [False, False, False, False, False]
                                self.create_report_tab(headers, column_data, editable, title=button_text)
                                
                            except Exception as e:
                                forms.alert(str(e), title=str_10(lan))
                        else:
                            forms.alert(str_1(lan), title=str_2(lan))

                    except StopIteration:
                        pass
                    except Exception:
                        pass            
                    except SystemExit:
                        pass

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                from UI.strings_dictionary_of_element import str_19
                MessageBox.Show(str(e),str_19(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Check Existence of Parameters Values] Parameter Value Existence Check
        #
        # Handles checking of parameter values across different categories and elements:
        # - Checks parameter values for all elements, elements with values, or elements without values
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:PARAMETER_EXISTENCE_CHECK]
        elif button_text == tool_str_30(lan):
            """
            This function handles the event when the "Check Existence of Parameters Values" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the parameter value check operations.
            2. Displays a form with multiple options for checking parameter values:
            - Show all parameter values
            - Show only parameters with values
            - Show only parameters without values
            3. Prompts the user to select categories and parameters for checking.
            4. Filters elements based on the selected criteria and displays the results in a report.
            5. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows checking parameter values across different categories and elements.
            - Updates the UI to reflect the parameter values and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()
                
                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORT_MODULES] Import necessary modules
                import clr
                clr.AddReference("RevitAPI")
                import os
                import sys
                from pyrevit import revit, script, forms
                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.categories import (Doors, Windows, Walls, AirTerminals, CableTrayFittings, CableTrays, Casework, Ceilings, Columns, CommunicationDevices, ConduitFitting, 
                Conduit, CurtainWallPanels, CurtainWallMullions, DataDevices, DuctAccessory, DuctFitting, DuctInsulations, DuctLinings, DuctCurves, ElectricalEquipment, ElectricalFixtures, 
                FireAlarmDevices, FlexDuctCurves, FlexPipeCurves, Floors, Furniture, FurnitureSystems, GenericModel, LightingDevices, LightingFixtures, MechanicalEquipment, NurseCallDevices, 
                PipeAccessory, PipeFitting, PipeInsulations, PipeCurves, Planting, PlumbingFixtures, StairsRailing, Ramps, Roofs, Rooms, SecurityDevices, Site, SpecialityEquipment, Sprinklers, 
                Stairs, AreaRein, StructuralColumns, StructConnections, StructuralFoundation, StructuralFraming, PathRein, Rebar, StructuralStiffener, StructuralTruss, TelephoneDevices)              
                from sajdmo.forms.single import single_input
                from structure.root import wurl_path,  lan_path, cuslogo_path, logo_path, pvalue_back, pvalue_icon, cancel_icon, ok_icon, parameterexistance_icon
                from UI.strings_check_existence_of_parameters_value import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_h1, str_h2)
                from UI.url import parsweb

                lan = lan_path()
                wurl= wurl_path()
                output = script.get_output()

                # [UI:TASK_DIALOG] Show task dialog for parameter value check options
                title = str_1(lan)
                dialog = TaskDialog(title)
                dialog.MainInstruction = str_2(lan)
                dialog.MainContent = str_3(lan)
                dialog.TitleAutoPrefix = False
                dialog.AllowCancellation = True
                dialog.CommonButtons = TaskDialogCommonButtons.Cancel
                dialog.DefaultButton = TaskDialogResult.None
                dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink1,
                                    str_4(lan),
                                    str_5(lan))
                dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink2,
                                    str_6(lan),
                                    str_7(lan))
                dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink3,
                                    str_8(lan),
                                    str_9(lan))
                result = dialog.Show()
                
                # [UI:CANCEL_OPTION] Handle cancel option
                if result == TaskDialogResult.Cancel:
                    forms.alert(str_10(lan))
                    sys.exit()

                # [UI:SHOW_ALL_PARAMETERS] Handle "Show All Parameter Values" option
                if result == TaskDialogResult.CommandLink1:
                    """
                    This function handles the event when the "Show All Parameter Values" option is chosen.

                    Workflow:
                    1. Prompts the user to select a parameter and categories for checking.
                    2. Filters elements based on the selected criteria and displays all parameter values.
                    3. Updates the UI to reflect the parameter values and their properties.

                    Key Features:
                    - Allows checking all parameter values across different categories and elements.
                    - Updates the UI to reflect the parameter values and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """
                    with forms.ProgressBar(title="", indeterminate=False):
                        # [SCRIPT:DEFINE_CATEGORIES] Define categories for parameter value check
                        categories = {
                            'Doors': Doors,
                                'Windows': Windows,
                                'Walls': Walls,
                                'AirTerminals': AirTerminals,
                                'Doors': Doors,
                                'CableTrayFittings': CableTrayFittings,
                                'CableTrays': CableTrays,
                                'Casework': Casework,
                                'Ceilings': Ceilings,
                                'Columns': Columns,
                                'CommunicationDevices': CommunicationDevices,
                                'ConduitFitting': ConduitFitting,
                                'Conduit': Conduit,
                                'CurtainWallPanels': CurtainWallPanels,
                                'CurtainWallMullions': CurtainWallMullions,
                                'DataDevices': DataDevices,
                                'DuctAccessory': DuctAccessory,
                                'DuctFitting': DuctFitting,
                                'DuctInsulations': DuctInsulations,
                                'DuctLinings': DuctLinings,
                                'DuctCurves': DuctCurves,
                                'ElectricalEquipment': ElectricalEquipment,
                                'ElectricalFixtures': ElectricalFixtures,
                                'FireAlarmDevices': FireAlarmDevices,
                                'FlexDuctCurves': FlexDuctCurves,
                                'FlexPipeCurves': FlexPipeCurves,
                                'Floors': Floors,
                                'Furniture': Furniture,
                                'FurnitureSystems': FurnitureSystems,
                                'GenericModel': GenericModel,
                                'LightingDevices': LightingDevices,
                                'LightingFixtures': LightingFixtures,
                                'MechanicalEquipment': MechanicalEquipment,
                                'NurseCallDevices': NurseCallDevices,
                                'PipeAccessory': PipeAccessory,
                                'PipeFitting': PipeFitting,
                                'PipeInsulations': PipeInsulations,
                                'PipeCurves': PipeCurves,
                                'Planting': Planting,
                                'PlumbingFixtures': PlumbingFixtures,
                                'StairsRailing': StairsRailing,
                                'Ramps': Ramps,
                                'Roofs': Roofs,
                                'Rooms': Rooms,
                                'SecurityDevices': SecurityDevices,
                                'Site': Site,
                                'SpecialityEquipment': SpecialityEquipment,
                                'Sprinklers': Sprinklers,
                                'Stairs': Stairs,
                                'AreaRein': AreaRein,
                                'StructuralColumns': StructuralColumns,
                                'StructConnections': StructConnections,
                                'StructuralFoundation': StructuralFoundation,
                                'StructuralFraming': StructuralFraming,
                                'PathRein': PathRein,
                                'Rebar': Rebar,
                                'StructuralStiffener': StructuralStiffener,
                                'StructuralTruss': StructuralTruss,
                                'TelephoneDevices': TelephoneDevices,
                        }

                        # [UI:PARAMETER_FORM] Show parameter selection form
                        icon_path = pvalue_icon()
                        search_image_path = pvalue_back()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        parameter_label = str_11(lan)
                        window_name = str_16(lan)
                        url = parsweb(wurl)
                        with forms.ProgressBar(title="", indeterminate=True):
                            selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                        if selected_parameter is None:
                            forms.alert(str_10(lan))
                            sys.exit()

                        if selected_parameter:
                            # [UI:CATEGORY_SELECTION] Show category selection form
                            selected_categories = forms.SelectFromList.show(
                                categories.keys(),
                                title=str_12(lan),
                                button_name = str_23(lan),
                                multiselect=True
                            )
                            if selected_categories is None:
                                forms.alert(str_10(lan))
                                sys.exit()

                            # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories
                            converted_categories = {
                                category: categories[category]
                                for category in selected_categories
                            }
                            
                            # [SCRIPT:GENERATE_TABLE] Generate table data for report
                            def generate_table(category_name, get_element_ids_func):
                                element_ids = get_element_ids_func()
                                table_data = []
                                for element_id in element_ids:
                                    element = revit.doc.GetElement(element_id)
                                    parameter = element.LookupParameter(selected_parameter)
                                    if parameter:
                                        element_name = element.Name if hasattr(element, 'Name') else str_13(lan)
                                        storage_type = parameter.StorageType.ToString()
                                        parameter_value = parameter.AsValueString() if parameter.HasValue else str_13(lan)
                                        table_data.append([
                                            str(element_id),
                                            element_name,
                                            category_name,
                                            selected_parameter,
                                            storage_type,
                                            parameter_value
                                        ])
                                return table_data

                            # [SCRIPT:COLLECT_DATA] Collect all data for report
                            all_table_data = []
                            for category_name, get_element_ids_func in converted_categories.items():
                                category_data = generate_table(category_name, get_element_ids_func)
                                all_table_data.extend(category_data)

                            if all_table_data:
                                # [SCRIPT:CREATE_REPORT] Create report tab
                                headers = [str_15(lan), str_25(lan), str_26(lan), str_16(lan), str_27(lan), str_17(lan)]
                                column_data = [
                                    [row[0] for row in all_table_data],  
                                    [row[1] for row in all_table_data],  
                                    [row[2] for row in all_table_data],  
                                    [row[3] for row in all_table_data],  
                                    [row[4] for row in all_table_data],  
                                    [row[5] for row in all_table_data]   
                                ]
                                editable = [False, False, False, False, False, False]
                                self.create_report_tab(headers, column_data, editable, title=button_text)
                            else:
                                forms.alert(str_18(lan))
                        else:
                            forms.alert(str_19(lan))

                # [UI:SHOW_PARAMETERS_WITH_VALUES] Handle "Show Only Parameters with Values" option
                if result == TaskDialogResult.CommandLink2:
                    """
                    This function handles the event when the "Show Only Parameters with Values" option is chosen.

                    Workflow:
                    1. Prompts the user to select a parameter and categories for checking.
                    2. Filters elements based on the selected criteria and displays only parameters with values.
                    3. Updates the UI to reflect the parameter values and their properties.

                    Key Features:
                    - Allows checking parameter values across different categories and elements.
                    - Updates the UI to reflect the parameter values and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """  
                    with forms.ProgressBar(title="", indeterminate=False):
                        # [UI:PARAMETER_FORM] Show parameter selection form
                        icon_path = pvalue_icon()
                        search_image_path = pvalue_back()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        parameter_label = str_11(lan)
                        window_name = str_16(lan)
                        url = parsweb(wurl)
                        
                        with forms.ProgressBar(title="", indeterminate=True):
                            selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                        
                        if selected_parameter is None:
                            forms.alert(str_10(lan))
                            sys.exit()
                            
                        if selected_parameter:
                            # [SCRIPT:DEFINE_CATEGORIES] Define categories for parameter value check
                            categories = {
                                'Doors': Doors,
                                    'Windows': Windows,
                                    'Walls': Walls,
                                    'AirTerminals': AirTerminals,
                                    'Doors': Doors,
                                    'CableTrayFittings': CableTrayFittings,
                                    'CableTrays': CableTrays,
                                    'Casework': Casework,
                                    'Ceilings': Ceilings,
                                    'Columns': Columns,
                                    'CommunicationDevices': CommunicationDevices,
                                    'ConduitFitting': ConduitFitting,
                                    'Conduit': Conduit,
                                    'CurtainWallPanels': CurtainWallPanels,
                                    'CurtainWallMullions': CurtainWallMullions,
                                    'DataDevices': DataDevices,
                                    'DuctAccessory': DuctAccessory,
                                    'DuctFitting': DuctFitting,
                                    'DuctInsulations': DuctInsulations,
                                    'DuctLinings': DuctLinings,
                                    'DuctCurves': DuctCurves,
                                    'ElectricalEquipment': ElectricalEquipment,
                                    'ElectricalFixtures': ElectricalFixtures,
                                    'FireAlarmDevices': FireAlarmDevices,
                                    'FlexDuctCurves': FlexDuctCurves,
                                    'FlexPipeCurves': FlexPipeCurves,
                                    'Floors': Floors,
                                    'Furniture': Furniture,
                                    'FurnitureSystems': FurnitureSystems,
                                    'GenericModel': GenericModel,
                                    'LightingDevices': LightingDevices,
                                    'LightingFixtures': LightingFixtures,
                                    'MechanicalEquipment': MechanicalEquipment,
                                    'NurseCallDevices': NurseCallDevices,
                                    'PipeAccessory': PipeAccessory,
                                    'PipeFitting': PipeFitting,
                                    'PipeInsulations': PipeInsulations,
                                    'PipeCurves': PipeCurves,
                                    'Planting': Planting,
                                    'PlumbingFixtures': PlumbingFixtures,
                                    'StairsRailing': StairsRailing,
                                    'Ramps': Ramps,
                                    'Roofs': Roofs,
                                    'Rooms': Rooms,
                                    'SecurityDevices': SecurityDevices,
                                    'Site': Site,
                                    'SpecialityEquipment': SpecialityEquipment,
                                    'Sprinklers': Sprinklers,
                                    'Stairs': Stairs,
                                    'AreaRein': AreaRein,
                                    'StructuralColumns': StructuralColumns,
                                    'StructConnections': StructConnections,
                                    'StructuralFoundation': StructuralFoundation,
                                    'StructuralFraming': StructuralFraming,
                                    'PathRein': PathRein,
                                    'Rebar': Rebar,
                                    'StructuralStiffener': StructuralStiffener,
                                    'StructuralTruss': StructuralTruss,
                                    'TelephoneDevices': TelephoneDevices,
                            }
                            
                            # [UI:CATEGORY_SELECTION] Show category selection form
                            selected_categories = forms.SelectFromList.show(
                                categories.keys(),
                                title=str_12(lan),
                                button_name=str_23(lan),
                                multiselect=True
                            )
                            
                            if selected_categories is None:
                                forms.alert(str_10(lan))
                                sys.exit()
                                
                            # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories
                            converted_categories = {
                                category: categories[category]
                                for category in selected_categories
                            }

                            # [SCRIPT:GENERATE_TABLE] Generate table data for report
                            def generate_table(category_name, get_element_ids_func):
                                element_ids = get_element_ids_func()
                                table_data = []
                                for element_id in element_ids:
                                    element = revit.doc.GetElement(element_id)
                                    parameter = element.LookupParameter(selected_parameter)
                                    if parameter and parameter.HasValue:
                                        element_name = element.Name if hasattr(element, 'Name') else str_13(lan)
                                        storage_type = parameter.StorageType.ToString()
                                        parameter_value = parameter.AsValueString()
                                        table_data.append([
                                            str(element_id),
                                            element_name,
                                            category_name,
                                            selected_parameter,
                                            storage_type,
                                            parameter_value
                                        ])
                                return table_data

                            # [SCRIPT:COLLECT_DATA] Collect all data for report
                            all_table_data = []
                            has_table_data = False
                            for category_name, get_element_ids_func in converted_categories.items():
                                category_data = generate_table(category_name, get_element_ids_func)
                                if category_data:
                                    has_table_data = True
                                    all_table_data.extend(category_data)

                            if has_table_data:
                                # [SCRIPT:CREATE_REPORT] Create report tab
                                headers = [str_15(lan), str_25(lan), str_26(lan), str_16(lan), str_27(lan), str_17(lan)]
                                column_data = [
                                    [row[0] for row in all_table_data],  
                                    [row[1] for row in all_table_data],  
                                    [row[2] for row in all_table_data],  
                                    [row[3] for row in all_table_data],  
                                    [row[4] for row in all_table_data],  
                                    [row[5] for row in all_table_data]   
                                ]
                                editable = [False, False, False, False, False, False]
                                self.create_report_tab(headers, column_data, editable, title=button_text)
                            else:
                                forms.alert(str_18(lan))
                        else:
                            forms.alert(str_19(lan))

                # [UI:SHOW_PARAMETERS_WITHOUT_VALUES] Handle "Show Only Parameters Without Values" option
                elif result == TaskDialogResult.CommandLink3:
                    """
                    This function handles the event when the "Show Only Parameters Without Values" option is chosen.

                    Workflow:
                    1. Prompts the user to select a parameter and categories for checking.
                    2. Filters elements based on the selected criteria and displays only parameters without values.
                    3. Updates the UI to reflect the parameter values and their properties.

                    Key Features:
                    - Allows checking parameter values across different categories and elements.
                    - Updates the UI to reflect the parameter values and their properties.
                    - Ensures proper handling of exceptions to maintain application stability.
                    """
                    with forms.ProgressBar(title="", indeterminate=False):
                        # [UI:PARAMETER_FORM] Show parameter selection form
                        icon_path = pvalue_icon()
                        search_image_path = pvalue_back()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        parameter_label = str_11(lan)
                        window_name = str_16(lan)
                        url = parsweb(wurl)
                        
                        with forms.ProgressBar(title="", indeterminate=True):
                            selected_parameter = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                        
                        if selected_parameter is None:
                            forms.alert(str_10(lan))
                            sys.exit()
                            
                        if selected_parameter:
                            # [SCRIPT:DEFINE_CATEGORIES] Define categories for parameter value check
                            categories = {
                                'Doors': Doors,
                                    'Windows': Windows,
                                    'Walls': Walls,
                                    'AirTerminals': AirTerminals,
                                    'Doors': Doors,
                                    'CableTrayFittings': CableTrayFittings,
                                    'CableTrays': CableTrays,
                                    'Casework': Casework,
                                    'Ceilings': Ceilings,
                                    'Columns': Columns,
                                    'CommunicationDevices': CommunicationDevices,
                                    'ConduitFitting': ConduitFitting,
                                    'Conduit': Conduit,
                                    'CurtainWallPanels': CurtainWallPanels,
                                    'CurtainWallMullions': CurtainWallMullions,
                                    'DataDevices': DataDevices,
                                    'DuctAccessory': DuctAccessory,
                                    'DuctFitting': DuctFitting,
                                    'DuctInsulations': DuctInsulations,
                                    'DuctLinings': DuctLinings,
                                    'DuctCurves': DuctCurves,
                                    'ElectricalEquipment': ElectricalEquipment,
                                    'ElectricalFixtures': ElectricalFixtures,
                                    'FireAlarmDevices': FireAlarmDevices,
                                    'FlexDuctCurves': FlexDuctCurves,
                                    'FlexPipeCurves': FlexPipeCurves,
                                    'Floors': Floors,
                                    'Furniture': Furniture,
                                    'FurnitureSystems': FurnitureSystems,
                                    'GenericModel': GenericModel,
                                    'LightingDevices': LightingDevices,
                                    'LightingFixtures': LightingFixtures,
                                    'MechanicalEquipment': MechanicalEquipment,
                                    'NurseCallDevices': NurseCallDevices,
                                    'PipeAccessory': PipeAccessory,
                                    'PipeFitting': PipeFitting,
                                    'PipeInsulations': PipeInsulations,
                                    'PipeCurves': PipeCurves,
                                    'Planting': Planting,
                                    'PlumbingFixtures': PlumbingFixtures,
                                    'StairsRailing': StairsRailing,
                                    'Ramps': Ramps,
                                    'Roofs': Roofs,
                                    'Rooms': Rooms,
                                    'SecurityDevices': SecurityDevices,
                                    'Site': Site,
                                    'SpecialityEquipment': SpecialityEquipment,
                                    'Sprinklers': Sprinklers,
                                    'Stairs': Stairs,
                                    'AreaRein': AreaRein,
                                    'StructuralColumns': StructuralColumns,
                                    'StructConnections': StructConnections,
                                    'StructuralFoundation': StructuralFoundation,
                                    'StructuralFraming': StructuralFraming,
                                    'PathRein': PathRein,
                                    'Rebar': Rebar,
                                    'StructuralStiffener': StructuralStiffener,
                                    'StructuralTruss': StructuralTruss,
                                    'TelephoneDevices': TelephoneDevices,
                            }

                            # [UI:CATEGORY_SELECTION] Show category selection form
                            selected_categories = forms.SelectFromList.show(
                                categories.keys(),
                                title=str_12(lan),
                                button_name=str_23(lan),
                                multiselect=True
                            )
                            
                            if selected_categories is None:
                                forms.alert(str_10(lan))
                                sys.exit()
                                
                            # [SCRIPT:CONVERT_CATEGORIES] Convert selected categories
                            converted_categories = {
                                category: categories[category]
                                for category in selected_categories
                            }

                            # [SCRIPT:GENERATE_TABLE] Generate table data for report
                            def generate_table(category_name, get_element_ids_func):
                                element_ids = get_element_ids_func()
                                table_data = []
                                for element_id in element_ids:
                                    element = revit.doc.GetElement(element_id)
                                    parameter = element.LookupParameter(selected_parameter)
                                    if parameter and not parameter.HasValue:
                                        element_name = element.Name if hasattr(element, 'Name') else str_13(lan)
                                        storage_type = parameter.StorageType.ToString()
                                        table_data.append([
                                            str(element_id),
                                            element_name,
                                            category_name,
                                            selected_parameter,
                                            storage_type,
                                            str_13(lan)
                                        ])
                                return table_data

                            # [SCRIPT:COLLECT_DATA] Collect all data for report
                            all_table_data = []
                            has_table_data = False
                            for category_name, get_element_ids_func in converted_categories.items():
                                category_data = generate_table(category_name, get_element_ids_func)
                                if category_data:
                                    has_table_data = True
                                    all_table_data.extend(category_data)

                            if has_table_data:
                                # [SCRIPT:CREATE_REPORT] Create report tab
                                headers = [str_15(lan), str_25(lan), str_26(lan), str_16(lan), str_27(lan), str_17(lan)]
                                column_data = [
                                    [row[0] for row in all_table_data],  
                                    [row[1] for row in all_table_data],  
                                    [row[2] for row in all_table_data],  
                                    [row[3] for row in all_table_data],  
                                    [row[4] for row in all_table_data],  
                                    [row[5] for row in all_table_data]   
                                ]
                                editable = [False, False, False, False, False, False]
                                self.create_report_tab(headers, column_data, editable, title=button_text)
                            else:
                                forms.alert(str_18(lan))
                        else:
                            forms.alert(str_19(lan))

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                from UI.strings_check_existence_of_parameters_value import str_24
                from structure.root import lan_path
                lan = lan_path()
                MessageBox.Show(str(e),str_24(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Check Parameter Against Category] Parameter Against Category Check
        #
        # Handles checking of parameters against categories:
        # - Checks if parameters exist in selected categories
        # - Displays results in a grid view
        # - Saves results to Excel
        # - Loads data from CSV or SJD files
        ###############################################################################
        
        # [SCRIPT:PARAMETER_AGAINST_CATEGORY]
        elif button_text == tool_str_31(lan):
            """
            This function handles the event when the "Check Parameter Against Category" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the parameter value check operations.
            2. Displays a form with multiple options for checking parameter values:
            - Show all parameter values
            - Show only parameters with values
            - Show only parameters without values
            3. Prompts the user to select categories and parameters for checking.
            4. Filters elements based on the selected criteria and displays the results in a report.
            5. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows checking parameter values across different categories and elements.
            - Updates the UI to reflect the parameter values and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()
                
                # -*- coding: utf-8 -*-
                
                def cehck_parameter_against_category():
                    # [SCRIPT:IMPORT_MODULES] Import necessary modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitAPIUI')
                    clr.AddReference('RevitServices')
                    clr.AddReference("System")
                    from System import Drawing
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit, Point
                    from System.Windows.Forms import Form, Label, Button, OpenFileDialog, DialogResult, DataGridView, DataGridViewAutoSizeColumnsMode, AnchorStyles, PictureBox, ScrollBars, TextBox, Cursors
                    from RevitServices.Persistence import DocumentManager
                    import Autodesk.Revit.DB as DB
                    from Autodesk.Revit.DB import FilteredElementCollector, ElementId
                    from System.Collections.Generic import List
                    from pyrevit import forms, script, revit
                    import sys
                    import os
                    import xlrd
                    import xlsxwriter
                    import csv
                    import codecs
                    import webbrowser
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.forms.single import single_input
                    from sajdmo.modules.map import category
                    from structure.root import (wurl_path, check_param_cat_icon, check_param_cat_back, check_param_cat_sym, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon, importexc_button, 
                    delete_row_button, focus_button, save_button, refresh_button, filter2_button, save_tasklist_back)
                    from UI.strings_check_parameter_against_category import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                    str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_33, str_34, str_35, str_36, str_h1, str_h2)
                    from UI.url import parsweb

                    lan = lan_path()
                    wurl = wurl_path()

                    with forms.ProgressBar(title='', indeterminate=True):
                        # [UI:FORM_INITIALIZATION] Initialize form for parameter against category check
                        class CHECK_PARAMETER_AGAINST_CATEGORY(Form):
                            def __init__(self, doc):  
                                """
                                This function initializes the form for checking parameters against categories.

                                Workflow:
                                1. Sets up the form with a title, size, and background color.
                                2. Configures UI elements such as labels, buttons, and picture boxes.
                                3. Implements event handlers for button clicks and label clicks.

                                Key Features:
                                - Provides a user-friendly interface for checking parameters against categories.
                                - Updates the UI to reflect the selected elements and their properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:FORM_SETUP] Set up form properties
                                self.Text = str_1(lan)
                                self.Width = 600
                                self.Height = 725
                                self.BackColor = Color.White
                                self.doc = doc
                                self.caegories_with_missing_parameters = []
                                self.Icon = Drawing.Icon(check_param_cat_icon())
                                self.CenterToScreen()

                                # [UI:PICTURE_BOX] Add picture box
                                self.pictureBoxSFIPV = PictureBox()
                                self.pictureBoxSFIPV.Location = Point(40, 30)
                                self.pictureBoxSFIPV.Size = Size(96, 96)
                                imageSFIPV = Image.FromFile(check_param_cat_back())
                                self.pictureBoxSFIPV.Image = imageSFIPV
                                self.Controls.Add(self.pictureBoxSFIPV)

                                # [UI:DATA_GRID_VIEW] Add data grid view
                                self.dataGridView = DataGridView()
                                self.dataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill
                                self.dataGridView.AllowUserToAddRows = False
                                self.dataGridView.Location = Point(40, 180)
                                self.dataGridView.Width = 500
                                self.dataGridView.Height = 400
                                self.dataGridView.Anchor = (AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right)
                                self.dataGridView.CellValueChanged += self.dataGridView_CellValueChanged
                                self.Controls.Add(self.dataGridView)

                                # [UI:BUTTONS] Add buttons
                                self.load_data_button = Button()
                                self.load_data_button.Width = 35
                                self.load_data_button.Height = 35
                                self.load_data_button.Image = Icon(importexc_button()).ToBitmap()
                                self.load_data_button.Location = Point(40, self.dataGridView.Bottom + 10)
                                self.load_data_button.Anchor = AnchorStyles.Bottom | AnchorStyles.Left
                                self.load_data_button.Click += self.load_data_button_Click
                                self.Controls.Add(self.load_data_button)

                                self.deleterow_button = Button()
                                self.deleterow_button.Width = 35
                                self.deleterow_button.Height = 35
                                self.deleterow_button.Location = Point(465, self.dataGridView.Bottom + 10)
                                self.deleterow_button.Anchor = AnchorStyles.Bottom | AnchorStyles.Left
                                self.deleterow_button.Image = Icon(delete_row_button()).ToBitmap()
                                self.deleterow_button.Click += self.deleterow_button_Click
                                self.Controls.Add(self.deleterow_button)

                                self.sheet_check_button = Button()
                                self.sheet_check_button.Width = 35
                                self.sheet_check_button.Height = 35
                                self.sheet_check_button.Image = Icon(ok_icon()).ToBitmap()
                                self.sheet_check_button.Location = Point(250, self.dataGridView.Bottom + 10)
                                self.sheet_check_button.Anchor = AnchorStyles.Bottom | AnchorStyles.Left
                                self.sheet_check_button.Click += self.sheet_check_button_Click  
                                self.sheet_check_button.Enabled = False
                                self.Controls.Add(self.sheet_check_button)

                                self.cancel_button = Button()
                                self.cancel_button.Width = 35
                                self.cancel_button.Height = 35
                                self.cancel_button.Image = Icon(cancel_icon()).ToBitmap()
                                self.cancel_button.Location = Point(290, self.dataGridView.Bottom + 10)
                                self.cancel_button.Anchor = AnchorStyles.Bottom | AnchorStyles.Left
                                self.cancel_button.Click += self.cancel_button_clicked
                                self.Controls.Add(self.cancel_button)

                                self.focus_button = Button()
                                self.focus_button.Width = 35
                                self.focus_button.Height = 35
                                self.focus_button.Image = Icon(focus_button()).ToBitmap()
                                self.focus_button.Location = Point(425, self.dataGridView.Bottom + 10)
                                self.focus_button.Anchor = AnchorStyles.Bottom | AnchorStyles.Left
                                self.focus_button.Click += self.focus_button_clicked
                                self.focus_button.Click += self.select_button_Click
                                self.Controls.Add(self.focus_button)

                                self.save_button = Button()
                                self.save_button.Width = 35
                                self.save_button.Height = 35
                                self.save_button.Image = Icon(save_button()).ToBitmap()
                                self.save_button.Location = Point(80, self.dataGridView.Bottom + 10)
                                self.save_button.Anchor = AnchorStyles.Bottom | AnchorStyles.Left
                                self.save_button.Click += self.save_button_Click
                                self.Controls.Add(self.save_button)

                                self.check_button = Button()
                                self.check_button.Width = 35
                                self.check_button.Height = 35
                                self.check_button.Image = Icon(refresh_button()).ToBitmap()
                                self.check_button.Location = Point(120, self.dataGridView.Bottom + 10)
                                self.check_button.Anchor = AnchorStyles.Bottom | AnchorStyles.Left
                                self.check_button.Click += self.check_button_Click
                                self.Controls.Add(self.check_button)

                                self.filter_button = Button()
                                self.filter_button.Width = 35
                                self.filter_button.Height = 35
                                self.filter_button.Image = Icon(filter2_button()).ToBitmap()
                                self.filter_button.Location = Point(505, self.dataGridView.Bottom + 10)
                                self.filter_button.Anchor = AnchorStyles.Bottom | AnchorStyles.Left
                                self.filter_button.Click += self.filter_button_clicked
                                self.Controls.Add(self.filter_button)

                                # [UI:LABELS] Add labels
                                self.label1 = Label()
                                self.label1.Text = str_2(lan)
                                self.label1.Location = Point(40, 630)
                                self.label1.AutoSize = True
                                self.label1.Font = Font(self.label1.Font, FontStyle.Bold)
                                self.Controls.Add(self.label1)

                                self.label2 = Label()
                                self.label2.Text = ""
                                self.label2.Location = Point(self.label1.Width + 50, 630)
                                self.label2.AutoSize = True
                                self.label2.ForeColor = Color.Black
                                self.label2.MaximumSize = Size(240, 240)
                                self.Controls.Add(self.label2)

                                self.label3 = Label()
                                self.label3.Text = str_5(lan)
                                self.label3.Location = Point(200, 30)
                                self.label3.AutoSize = True
                                self.label3.Font = Font(self.label3.Font, FontStyle.Bold)
                                self.label3.MaximumSize = Size(240, 75)
                                self.Controls.Add(self.label3)

                                self.label4 = TextBox()
                                self.label4.Multiline = True
                                self.label4.ScrollBars = ScrollBars.Vertical
                                self.label4.Text = str_3(lan)
                                self.label4.Location = Point(200, 50)
                                self.label4.Size = Size(340, 75)
                                self.label4.ForeColor = Drawing.Color.Black
                                self.label4.BackColor = Drawing.Color.White
                                self.label4.Anchor = (AnchorStyles.Top  | AnchorStyles.Left | AnchorStyles.Right)
                                self.label4.ReadOnly = True
                                self.Controls.Add(self.label4)

                                self.label5 = Label()
                                self.label5.Text = ""
                                self.label5.Location = Point(425, 630)
                                self.label5.AutoSize = True
                                self.label5.ForeColor = Color.Blue
                                self.label5.MaximumSize = Size(240, 75)
                                self.label5.Font = Font(self.label5.Font, FontStyle.Bold)
                                self.Controls.Add(self.label5)

                                # [UI:CREATED_BY_LABEL] Add "Created By" label
                                self.created_by_label = Label()
                                self.created_by_label.AutoSize = True
                                self.created_by_label.Text = "BIM Pars"
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.created_by_label.ForeColor = Color.Blue
                                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                self.created_by_label.Cursor = Cursors.Hand
                                self.created_by_label.Click += self.Label_Click
                                self.Controls.Add(self.created_by_label)

                                # [UI:RESIZE_HANDLER] Add resize handler
                                self.Resize += self.on_form_resize

                            # [SCRIPT:CHECK_PARAMETER_IN_CATEGORY] Check if a parameter exists in a category
                            def check_parameter_in_category(self, parameter_name, category_id): 
                                """
                                This function checks if a given parameter exists in a specified category.

                                Workflow:
                                1. Retrieves the category ID and creates a filtered element collector for the category.
                                2. Iterates through the elements in the category to check if the parameter exists.
                                3. Returns True if the parameter is found, otherwise returns False.

                                Key Features:
                                - Allows checking the existence of a parameter in a specific category.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                category = ElementId(category_id)
                                collector = FilteredElementCollector(self.doc).OfCategory(category)
                                for element in collector:
                                    param = element.LookupParameter(parameter_name)
                                    if param:
                                        return True             
                                return False  

                            # [UI:DATA_GRID_CELL_CHANGE] Handle cell value change in DataGridView
                            def dataGridView_CellValueChanged(self, sender, event): 
                                """
                                This function handles the event when a cell in the DataGridView is edited.

                                Workflow:
                                1. Highlights the edited cell by changing its background color to yellow.

                                Key Features:
                                - Provides visual feedback when a cell is edited.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                cell = self.dataGridView.Rows[event.RowIndex].Cells[event.ColumnIndex]
                                cell.Style.BackColor = Color.Yellow

                            # [UI:FORM_RESIZE] Handle form resizing
                            def on_form_resize(self, sender, event): 
                                """
                                This function handles the resizing of the form window.

                                Workflow:
                                1. Adjusts the positions of buttons, labels, and other UI elements when the form is resized.
                                2. Ensures that all elements remain properly aligned and visible.

                                Key Features:
                                - Maintains the layout and usability of the form during resizing.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.load_data_button.Location = Point(40, self.dataGridView.Bottom + 10)
                                self.sheet_check_button.Location = Point(250, self.dataGridView.Bottom + 10)
                                self.cancel_button.Location = Point(290, self.dataGridView.Bottom + 10)
                                self.deleterow_button.Location = Point(465, self.dataGridView.Bottom + 10)
                                self.focus_button.Location = Point(425, self.dataGridView.Bottom + 10)
                                self.save_button.Location = Point(80, self.dataGridView.Bottom + 10)
                                self.check_button.Location = Point(120, self.dataGridView.Bottom + 10)
                                self.filter_button.Location = Point(505, self.dataGridView.Bottom + 10)
                                self.label1.Location = Point(40, self.Height - 90)
                                self.label2.Location = Point(self.label1.Right + 20, self.Height - 90)
                                self.label5.Location = Point(425, self.Height - 90)
                                self.label4.Location = Point(200, 50)
                                # [UI:MOVE_CREATED_BY_LABEL] Move "Created By" label
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)

                            # [UI:SHEET_CHECK_BUTTON] Handle "Check" button click
                            def sheet_check_button_Click(self, sender, event):  
                                """
                                This function handles the event when the "Check" button is clicked.

                                Workflow:
                                1. Iterates through the DataGridView to check if each parameter exists in the specified categories.
                                2. Highlights cells based on the presence or absence of the parameter:
                                - Light green if the parameter exists in the category.
                                - Light coral if the parameter is missing in the category.
                                - Orange if the category is invalid.
                                3. Generates a report of missing parameters and updates the UI with the results.

                                Key Features:
                                - Provides visual feedback on parameter existence in categories.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    doc = revit.doc  
                                    category_map = category()
                                    light_coral_data = []
                                    for row_idx in range(self.dataGridView.RowCount):
                                        parameter_name = str(self.dataGridView.Rows[row_idx].Cells[0].Value).strip()
                                        if not parameter_name:
                                            continue
                                        for col_idx in range(1, self.dataGridView.ColumnCount):
                                            category_name = str(self.dataGridView.Rows[row_idx].Cells[col_idx].Value).strip()
                                            if not category_name:
                                                continue
                                            cell = self.dataGridView.Rows[row_idx].Cells[col_idx]
                                            if category_name in category_map:
                                                category_id = category_map[category_name]
                                                elements = DB.FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElements()
                                                has_parameter = any(
                                                    element.LookupParameter(parameter_name) is not None
                                                    for element in elements
                                                )
                                                if has_parameter:
                                                    cell.Style.BackColor = Color.LightGreen 
                                                else:
                                                    cell.Style.BackColor = Color.LightCoral 
                                                    light_coral_data.append([parameter_name, category_name])
                                            else:
                                                cell.Style.BackColor = Color.Orange
                                    # [SCRIPT:GENERATE_REPORT] Generate report of missing parameters
                                    self.caegories_with_missing_parameters.extend(light_coral_data)

                                    if light_coral_data:
                                        self.caegories_with_missing_parameters.extend(light_coral_data)

                                        self.label4.ForeColor = Color.Red
                                        self.label4.Text = str_8(lan)
                                    else:
                                        self.label4.ForeColor = Color.Blue
                                        self.label4.Text = str_13(lan)
                                    self.label4.Text += str_14(lan)

                                except Exception as e:
                                    self.label4.ForeColor = Color.Red
                                    self.label4.Text = str_15(lan) + str(e)
                                    self.sheet_check_button.Enabled = False

                            # [UI:CHECK_BUTTON] Handle "Check" button click
                            def check_button_Click(self, sender, event_args):  
                                    """
                                    This function handles the event when the "Check" button is clicked.

                                    Workflow:
                                    1. Clears the selection and any previous results in the UI.
                                    2. Retrieves and processes empty cells in the DataGridView.

                                    Key Features:
                                    - Resets the UI to prepare for a new check.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    self.label4.Text = ""
                                    __revit__.ActiveUIDocument.Selection.SetElementIds(List[ElementId]())
                                    self.label5.Text = ""
                                    self.retrieve_empty_cells()

                            # [SCRIPT:RETRIEVE_EMPTY_CELLS] Color empty cells in DataGridView
                            def retrieve_empty_cells(self):  
                                """
                                This function identifies and colors empty cells in the DataGridView.

                                Workflow:
                                1. Iterates through all cells in the DataGridView.
                                2. Colors empty cells gray and non-empty cells white.

                                Key Features:
                                - Provides visual feedback on empty cells in the DataGridView.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                for row in self.dataGridView.Rows:
                                    for cell in row.Cells:
                                        if cell.Value is None or str(cell.Value).strip() == "":
                                            cell.Style.BackColor = Color.Gray
                                        else:
                                            cell.Style.BackColor = Color.White

                            # [UI:FILTER_BUTTON] Handle "Filter" button click
                            def filter_button_clicked(self, sender, event):  
                                """
                                This function handles the event when the "Filter" button is clicked.

                                Workflow:
                                1. Collects unique values from each column in the DataGridView.
                                2. Prompts the user to select values for filtering.
                                3. Applies the selected filter to the DataGridView.

                                Key Features:
                                - Allows filtering the DataGridView based on user-selected values.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    column_groups = {}
                                    for col_idx in range(self.dataGridView.ColumnCount):
                                        unique_values = set()
                                        for row_idx in range(self.dataGridView.Rows.Count):
                                            cell_value = self.dataGridView.Rows[row_idx].Cells[col_idx].Value
                                            if cell_value is not None:
                                                unique_values.add(str(cell_value))  
                                        column_name = self.dataGridView.Columns[col_idx].HeaderText
                                        column_groups[column_name] = list(unique_values)
                                    selected_groups = forms.SelectFromList.show(
                                        column_groups,
                                        title=str_10(lan),
                                        group_selector_title=str_11(lan),
                                        button_name =str_33(lan),
                                        multiselect=True
                                    )
                                    if not selected_groups:
                                        return  
                                    selected_values_set = set(selected_groups)
                                    self.apply_filter(selected_values_set)
                                except Exception as e:
                                    self.label4.ForeColor = Drawing.Color.Red
                                    self.label4.Text = str_9(lan).format(str(e))

                            # [SCRIPT:APPLY_FILTER] Apply filter to DataGridView
                            def apply_filter(self, selected_values_set):  
                                """
                                This function applies the selected filter to the DataGridView.

                                Workflow:
                                1. Iterates through all rows in the DataGridView.
                                2. Sets the visibility of each row based on whether it contains the selected filter values.
                                3. Hides rows that do not match the filter criteria.

                                Key Features:
                                - Dynamically filters the DataGridView based on user-selected values.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    for row_idx in range(self.dataGridView.Rows.Count):
                                        self.dataGridView.Rows[row_idx].Visible = True
                                    for row_idx in range(self.dataGridView.Rows.Count):
                                        row = self.dataGridView.Rows[row_idx]
                                        include_row = False
                                        for col_idx in range(self.dataGridView.ColumnCount):
                                            cell_value = row.Cells[col_idx].Value
                                            cell_value_str = str(cell_value) if cell_value is not None else ''
                                            if cell_value_str in selected_values_set:
                                                include_row = True
                                                break
                                        row.Visible = include_row
                                except Exception as e:
                                    self.label4.ForeColor = Drawing.Color.Red
                                    self.label4.Text = str_12(lan).format(str(e))
                                
                            # [UI:DELETE_ROW_BUTTON] Handle "Delete Row" button click
                            def deleterow_button_Click(self, sender, event):  
                                """
                                This function handles the event when the "Delete Row" button is clicked.

                                Workflow:
                                1. Deletes the selected rows from the DataGridView.
                                2. Updates the UI to reflect the changes.

                                Key Features:
                                - Allows users to remove unwanted rows from the DataGridView.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    self.label4.Text = ""
                                    selected_row_indices = {cell.RowIndex for cell in self.dataGridView.SelectedCells}
                                    rows_to_remove = sorted(selected_row_indices, reverse=True)
                                    for row_index in rows_to_remove:
                                        self.dataGridView.Rows.RemoveAt(row_index)
                                except Exception as e:
                                    self.label4.ForeColor = Drawing.Color.Red
                                    self.label4.Text = str(str_22(lan) + str(e))
                                        
                            # [UI:SAVE_BUTTON] Handle "Save" button click
                            def save_button_Click(self, sender, event):  
                                """
                                This function handles the event when the "Save" button is clicked.

                                Workflow:
                                1. Prompts the user to specify a filename and select a target folder.
                                2. Saves the contents of the DataGridView to an Excel file.
                                3. Preserves cell formatting (e.g., colors) in the exported Excel file.

                                Key Features:
                                - Allows users to export the DataGridView data to an Excel file.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    self.label4.Text = ""
                                    icon_path = save_button()
                                    search_image_path = save_tasklist_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_17(lan)
                                    url = parsweb(wurl)
                                    window_name = str_18(lan)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None or "":
                                        pass
                                    target_folder = forms.pick_folder()
                                    if target_folder:
                                        if user_input:
                                            filename = "{}.xlsx".format(user_input.strip())
                                            save_path = os.path.join(target_folder, filename)
                                        else:
                                            save_path = os.path.join(target_folder, "Parameter_Against_Category.xlsx")
                                        workbook = xlsxwriter.Workbook(save_path)
                                        worksheet = workbook.add_worksheet()
                                        light_green_format = workbook.add_format({'bg_color': '#90EE90'})  # Light Green 
                                        light_coral_format = workbook.add_format({'bg_color': '#F08080'})  # Light Coral 
                                        red_format = workbook.add_format({'bg_color': '#FF0000'})  # Red 
                                        green_format = workbook.add_format({'bg_color': '#00FF00'})  # Green 
                                        orange_format = workbook.add_format({'bg_color': '#FFA500'})  # Orange 
                                        gray_format = workbook.add_format({'bg_color': '#808080'})  # Gray 
                                        yellow_format = workbook.add_format({'bg_color': '#FFFF00'})  # Yellow 
                                        default_format = workbook.add_format()  # No color
                                        visible_row_idx = 0
                                        for row_idx in range(self.dataGridView.Rows.Count):
                                            row = self.dataGridView.Rows[row_idx]
                                            if row.Visible:  
                                                for col_idx in range(self.dataGridView.Columns.Count):
                                                    cell_value = row.Cells[col_idx].Value
                                                    cell_color = row.Cells[col_idx].Style.BackColor
                                                    if cell_color == Drawing.Color.Red:
                                                        cell_format = red_format
                                                    elif cell_color == Drawing.Color.Green:
                                                        cell_format = green_format
                                                    elif cell_color == Drawing.Color.Orange:
                                                        cell_format = orange_format
                                                    elif cell_color == Drawing.Color.Gray:
                                                        cell_format = default_format
                                                    elif cell_color == Drawing.Color.Yellow:
                                                        cell_format = yellow_format
                                                    elif cell_color == Drawing.Color.LightCoral:
                                                        cell_format = light_coral_format
                                                    elif cell_color == Drawing.Color.LightGreen:
                                                        cell_format = light_green_format
                                                    else:
                                                        cell_format = default_format
                                                    worksheet.write(visible_row_idx, col_idx, cell_value, cell_format)
                                                visible_row_idx += 1
                                        workbook.close()
                                        self.label4.ForeColor = Drawing.Color.Green
                                        self.label4.Text = str_19(lan) + save_path + "!"
                                    else:
                                        self.label4.ForeColor = Drawing.Color.Black
                                        self.label4.Text = str_20(lan)
                                except Exception as e:
                                    self.label4.ForeColor = Drawing.Color.Red
                                    self.label4.Text = str_21(lan) + str(e)

                            # [UI:SELECT_BUTTON] Handle "Select" button click
                            def select_button_Click(self, sender, event):  
                                """
                                This function handles the event when the "Select" button is clicked.

                                Workflow:
                                1. Retrieves selected categories from the DataGridView.
                                2. Collects all elements belonging to the selected categories.
                                3. Selects and highlights the elements in the Revit model.

                                Key Features:
                                - Allows users to select elements in the Revit model based on categories.
                                - Updates the UI to reflect the number of selected elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    doc = revit.doc
                                    uidoc = revit.uidoc
                                    selected_rows = self.dataGridView.SelectedRows
                                    selected_cells = self.dataGridView.SelectedCells
                                    selected_categories = set()  
                                    for row in selected_rows:
                                        for col_idx in range(1, self.dataGridView.ColumnCount): 
                                            category_name = str(self.dataGridView.Rows[row.Index].Cells[col_idx].Value).strip()
                                            if category_name:
                                                selected_categories.add(category_name)
                                    for cell in selected_cells:
                                        if cell.ColumnIndex > 0: 
                                            category_name = str(cell.Value).strip()
                                            if category_name:
                                                selected_categories.add(category_name)
                                    category_map = category() 
                                    selected_element_ids = []
                                    for category_name in selected_categories:
                                        if category_name in category_map:
                                            category_id = category_map[category_name]
                                            elements = DB.FilteredElementCollector(doc).OfCategory(category_id).WhereElementIsNotElementType().ToElementIds()
                                            selected_element_ids.extend(elements)
                                    if selected_element_ids:
                                        element_id_objects = List[DB.ElementId](selected_element_ids)
                                        uidoc.Selection.SetElementIds(element_id_objects)
                                        uidoc.ShowElements(element_id_objects)
                                        self.label5.Text = str(len(selected_element_ids))
                                        self.label4.ForeColor = Drawing.Color.Black
                                        self.label4.Text = str_16(lan)
                                    else:
                                        __revit__.ActiveUIDocument.Selection.SetElementIds(List[ElementId]())
                                        self.label5.Text = ""
                                        self.label4.ForeColor = Drawing.Color.Red
                                        self.label4.Text = str_23(lan)
                                except Exception as e:
                                    self.label5.Text = ""
                                    __revit__.ActiveUIDocument.Selection.SetElementIds(List[ElementId]())
                                    self.label4.ForeColor = Drawing.Color.Red
                                    self.label4.Text = str_24(lan) + str(e)

                            # [UI:FOCUS_BUTTON] Handle "Focus" button click
                            def focus_button_clicked(self, sender, event):  
                                """
                                This function handles the event when the "Focus" button is clicked.

                                Workflow:
                                1. Retrieves the currently selected elements in the Revit model.
                                2. Focuses the view on the selected elements.
                                3. Updates the UI to reflect the status of the operation.

                                Key Features:
                                - Allows users to quickly focus on selected elements in the Revit model.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                selection = revit.uidoc.Selection
                                selected_elements = selection.GetElementIds()
                                if len(selected_elements) == 0:
                                    self.label4.ForeColor = Drawing.Color.Red
                                    self.label4.Text = str_32(lan)
                                else:
                                    self.label4.Text = ""
                                    revit.uidoc.ShowElements(selected_elements) 

                            # [UI:LOAD_DATA_BUTTON] Handle "Load Data" button click
                            def load_data_button_Click(self, sender, event):  
                                """
                                This function handles the event when the "Load Data" button is clicked.

                                Workflow:
                                1. Opens a file dialog to allow the user to select an Excel, CSV, or SJD file.
                                2. Reads the selected file and loads its data into the DataGridView.
                                3. Updates the UI to reflect the loaded data and enables the "Check" button.

                                Key Features:
                                - Supports multiple file formats (Excel, CSV, SJD) for data import.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    self.label4.Text = ""
                                    self.dataGridView.Rows.Clear()
                                    self.dataGridView.Columns.Clear()  
                                    open_file_dialog = OpenFileDialog()
                                    open_file_dialog.Filter = "Excel Files (*.xlsx)|*.xlsx|CSV Files (*.csv)|*.csv"
                                    open_file_dialog.Multiselect = False
                                    if open_file_dialog.ShowDialog() == DialogResult.OK:
                                        file_path = open_file_dialog.FileName
                                        file_name = os.path.basename(file_path)
                                        self.label2.Text = str(file_name)
                                        file_ext = os.path.splitext(file_path)[1].lower()
                                        data = []
                                        if file_ext == '.xlsx':
                                            workbook = xlrd.open_workbook(file_path, encoding_override="utf-8")  
                                            sheet = workbook.sheet_by_index(0)
                                            column_count = sheet.ncols
                                            self.dataGridView.Columns.Add(str_4(lan), str_25(lan))  
                                            for col_idx in range(1, column_count):
                                                self.dataGridView.Columns.Add(str_7(lan) + str(col_idx), str_7(lan) + str(col_idx))
                                            for row_idx in range(sheet.nrows):
                                                row_values = []
                                                for col_idx in range(sheet.ncols):
                                                    cell_value = sheet.cell_value(row_idx, col_idx)
                                                    if sheet.cell_type(row_idx, col_idx) == xlrd.XL_CELL_NUMBER:
                                                        if int(cell_value) == cell_value:
                                                            row_values.append(str(int(cell_value)))
                                                        else:
                                                            row_values.append(str(cell_value))
                                                    elif sheet.cell_type(row_idx, col_idx) == xlrd.XL_CELL_DATE:
                                                        date_value = xlrd.xldate_as_datetime(cell_value, workbook.datemode)
                                                        row_values.append(date_value.strftime('%Y-%m-%d %H:%M:%S'))
                                                    else:
                                                        row_values.append(str(cell_value))
                                                data.append(row_values)

                                        elif file_ext == '.csv':
                                            with codecs.open(file_path, 'r', encoding='utf-8') as csvfile:
                                                reader = csv.reader(csvfile, delimiter=';')
                                                headers = next(reader)  
                                                self.dataGridView.Columns.Add(str_4(lan), str_25(lan))  
                                                for idx in range(1, len(headers)):
                                                    self.dataGridView.Columns.Add(str_7(lan) + str(idx), str_7(lan) + str(idx))
                                                for row in reader:
                                                    if len(row):
                                                        data.append(row)  

                                        elif file_ext == '.sjd':
                                            self.dataGridView.Columns.Add(str_4(lan), str_25(lan))
                                            self.dataGridView.Columns.Add(str_26(lan), str_29(lan))
                                            self.dataGridView.Columns.Add(str_27(lan), str_30(lan))
                                            self.dataGridView.Columns.Add(str_28(lan), str_31(lan))
                                            with codecs.open(file_path, 'r', encoding='utf-8') as txtfile:
                                                for line in txtfile:
                                                    line = line.strip()  
                                                    if line:
                                                        parts = line.split('_#')
                                                        if len(parts) == 4:
                                                            id_value = parts[1].strip('i[]')
                                                            parameter_value = parts[2].strip('p[]')
                                                            value_value = parts[3].strip('v[]')
                                                            data.append([parameter_value, id_value, value_value])
                                        else:
                                            self.label4.ForeColor = Drawing.Color.Red
                                            self.label4.Text = str_34(lan)
                                            return
                                        self.dataGridView.Rows.Clear()
                                        for row in data:
                                            self.dataGridView.Rows.Add(*row)
                                        self.retrieve_empty_cells()
                                        self.sheet_check_button.Enabled = True
                                except Exception as e:
                                    pass
                                    self.label4.ForeColor = Color.Red
                                    self.label4.Text = str_35(lan) + str(e) + str_36(lan)
                                    self.sheet_check_button.Enabled = False
                        
                            # [UI:CANCEL_BUTTON] Handle "Cancel" button click
                            def cancel_button_clicked(self, sender, e):  
                                """
                                This function handles the event when the "Cancel" button is clicked.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    self.Close()
                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [UI:LABEL_CLICK] Handle "BIM Pars" label click
                            def Label_Click(self, sender, event):  
                                """
                                This function handles the event when the "BIM Pars" label is clicked.

                                Workflow:
                                1. Opens the specified URL in the default web browser when the label is clicked.

                                Key Features:
                                - Provides a quick link to the BIM Pars website.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                url = parsweb(wurl)
                                webbrowser.open(url)

                        doc = DocumentManager.Instance.CurrentDBDocument
                        if 'form' not in globals():
                            pass
                        else:
                            form = CHECK_PARAMETER_AGAINST_CATEGORY(doc)
                            form.ShowDialog()
                        return form.caegories_with_missing_parameters


                from structure.root import lan_path
                from UI.strings_check_parameter_against_category import str_37, str_38, str_39, str_40
                lan = lan_path()
                cehck_parameter_against_category = cehck_parameter_against_category()
                
                if cehck_parameter_against_category:
                    unique_pairs = list(set(tuple(pair) for pair in cehck_parameter_against_category))
                    
                    headers = [str_37(lan), str_38(lan)]
                    data = [
                        [pair[1] for pair in unique_pairs],  
                        [pair[0] for pair in unique_pairs]   
                    ]
                    editable = [False, False]
                    self.create_report_tab(headers, data, editable, title=button_text)
                else:
                    headers = [str_37(lan), str_38(lan)]
                    data = [[str_39(lan)], [""]]
                    editable = [False, False]

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_40(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Delete Parameter Completely from Model] Parameter Deletion
        #
        # Handles deletion of parameters from elements, categories, or the entire model:
        # - Deletes parameters from specific elements
        # - Deletes parameters from all elements in a category
        # - Deletes parameters from all elements in the model
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:DELETE_PARAMETER_COMPLETELY_FROM_MODEL]
        elif button_text == tool_str_32(lan):
            """
            This script handles the "Delete Parameter Completely from Model" functionality in the BIM Pars app. It allows the user to delete selected parameters from elements, categories, or entire models within Revit.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Displays an options form where the user can choose between deleting parameters from:
            - Specific elements
            - All elements in a category
            - All elements in the model
            4. Based on the user's selection, the appropriate operation is performed to delete the specified parameters:
            - For specific elements, the user can select individual elements and parameters to delete.
            - For categories, parameters of all elements in the selected category are deleted.
            - For the model, parameters from all elements are deleted.
            5. After the deletion, a report is generated showing which parameters were deleted and which could not be deleted.
            6. If any error occurs during the process, an error message is displayed.
            7. Finally, the Windows Form is restored after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitAPIUI')
                clr.AddReference('RevitServices')
                from RevitServices.Persistence import DocumentManager
                from System.Collections.Generic import List
                import Autodesk.Revit.DB as DB
                from Autodesk.Revit.DB import FilteredElementCollector, Transaction, BuiltInCategory
                import pyrevit
                from pyrevit import revit, DB, forms, script
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.option import pick3_dyn
                from sajdmo.forms.single import single_input
                from structure.root import wurl_path, delete_sym, del_param_icon, find_button, del_param_insert_icon, del_param_insert_back, del_param_cat_back, del_param_elem_back, sanyv_back, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon
                from UI.strings_delete_parameter_completely_from_model import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_h1, str_h2)
                from UI.url import parsweb

                # [SCRIPT:INITIAL_SETUP] Initialize variables and document
                lan = lan_path()
                wurl= wurl_path()
                doc = DocumentManager.Instance.CurrentDBDocument 
                
                # [UI:OPTION_FORM] Display options form for deletion
                window_name = str_21(lan)
                op1= str_1(lan)
                op2= str_2(lan)
                op3= str_3(lan)
                window_icon = del_param_icon()
                button_icon = find_button()
                op1_pic = del_param_insert_back()
                op2_pic = del_param_cat_back()
                op3_pic = del_param_elem_back()
                dyn1 = str_18(lan)
                dyn2 = str_19(lan)
                dyn3 = str_20(lan)
                url = parsweb(wurl)
                result = pick3_dyn(window_name, op1, op2, op3, window_icon, button_icon, op1_pic, op2_pic, op3_pic, dyn1, dyn2, dyn3, url)
                if result == None:
                    self.Show()
                    return
                
                # [SCRIPT:INSERT_NAME_OPTION] Handle insert name option
                elif result == str_1(lan):
                    try:
                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                        doc = __revit__.ActiveUIDocument.Document
                        
                        # [UI:PARAMETER_FORM_SETUP] Setup parameter form
                        icon_path = del_param_insert_icon()
                        search_image_path = sanyv_back()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        parameter_label = str_4(lan)
                        window_name = str_1(lan)
                        url = parsweb(wurl)
                        
                        # [UI:PROGRESS_BAR] Show progress bar while fetching parameters
                        with forms.ProgressBar(title='', indeterminate=True):
                            param_names = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                            
                        # [SCRIPT:VALIDATE_PARAM_NAMES] Validate parameter names
                        if param_names is None:
                            forms.alert(str_5(lan))
                            self.Show()
                            return
                            
                        param_names = [name.strip() for name in param_names.split(',')]
                        
                        # [SCRIPT:GET_ALL_ELEMENTS] Get all elements in the document
                        collector = FilteredElementCollector(doc)
                        elements = list(collector.WhereElementIsNotElementType().ToElements())
                        
                        # [SCRIPT:CHECK_ELEMENTS] Check if elements exist
                        if not elements:
                            forms.alert(str_24(lan), title=str_25(lan))
                            self.Show()
                            return
                        
                        # [SCRIPT:TRACK_DELETED_PARAMS] Track deleted parameters
                        deleted_params = set()  
                        
                        # [SCRIPT:CHECK_PARAM_EXISTENCE] Check if parameters exist in any element
                        params_found = False
                        for param_name in param_names:
                            for element in elements:
                                if element.LookupParameter(param_name):
                                    params_found = True
                                    break
                            if not params_found:
                                forms.alert(str_6(lan).format(param_name))
                                self.Show()
                                return
                        
                        # [SCRIPT:START_TRANSACTION] Start transaction for parameter deletion
                        with Transaction(doc, 'Delete Parameters') as trans:
                            trans.Start()
                            for element in elements:
                                for param_name in param_names:
                                    try:
                                        param = element.LookupParameter(param_name)
                                        if param and param.Id.IntegerValue > 0:  # Ensure valid parameter
                                            doc.Delete(param.Id)
                                            deleted_params.add(param_name)
                                    except Exception as e:
                                        continue  
                            trans.Commit()
                        
                        # [SCRIPT:PREPARE_REPORT_DATA] Prepare report data
                        deleted_params = list(deleted_params)  
                        not_deleted_params = [param for param in param_names if param not in deleted_params]
                        
                        if deleted_params or not_deleted_params:
                            deleted_data = [[param, str_7(lan)] for param in deleted_params]
                            not_deleted_data = [[param, str_8(lan)] for param in not_deleted_params]
                            combined_data = deleted_data + not_deleted_data
                            headers = [str_10(lan), str_11(lan)]
                            data = [
                                [row[0] for row in combined_data],  
                                [row[1] for row in combined_data]   
                            ]
                            editable = [False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                        else:
                            headers = [str_10(lan), str_11(lan)]
                            data = [[str_23(lan)], [""]]
                            editable = [False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                            
                    except StopIteration:
                        pass
                        self.Show()
                        return
                    except Exception:
                        pass
                        self.Show()
                        return
                    except SystemExit:
                        pass
                        self.Show()
                        return

                # [SCRIPT:CATEGORY_OPTION] Handle category option
                elif result == str_2(lan):
                    try: 
                        # [SCRIPT:CATEGORIES_IN_VIEW] Get categories in the active view
                        view = __revit__.ActiveUIDocument.ActiveView  
                        category_names = [category.ToString() for category in BuiltInCategory.GetValues(BuiltInCategory)] 
                        
                        # [UI:CATEGORY_SELECTION] Display category selection dialog
                        selected_category = forms.SelectFromList.show(category_names, title= str_12(lan), button_name=str_13(lan))
                        if selected_category is None:
                            self.Show()
                            return
                        
                        # [SCRIPT:RETRIEVE_ELEMENT_IDS] Retrieve element IDs for the selected category
                        if selected_category:
                            category = BuiltInCategory.Parse(BuiltInCategory, selected_category)
                            elements = FilteredElementCollector(view.Document, view.Id).OfCategory(category).WhereElementIsNotElementType().ToElements()
                            element_ids = [element.Id for element in elements]
                            
                            # [UI:SELECT_IDS] Select and show elements in the Revit UI
                            if element_ids:
                                element_id_objects = List[DB.ElementId](element_ids)
                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                revit.uidoc.ShowElements(element_id_objects)
                                
                                # [UI:PARAMETER_SELECTION] Display parameter selection dialog
                                element_id = element_ids[0]  
                                source_element = view.Document.GetElement(element_id)
                                parameter_list = pyrevit.forms.select_parameters(
                                    src_element=source_element,
                                    title=str_14(lan),
                                    button_name=str_13(lan),
                                    multiple=True,
                                    filterfunc=None,
                                    include_instance=True,
                                    include_type=True,
                                    exclude_readonly=True
                                )
                                if parameter_list is None:
                                    self.Show()
                                    return  
                                
                                # [SCRIPT:PREPARE_FOR_TRANSACTION] Prepare for parameter deletion
                                selected_parameters = [param.definition.Name for param in parameter_list]
                                param_names = [param for param in selected_parameters]
                                doc = __revit__.ActiveUIDocument.Document
                                selection = [doc.GetElement(element_id) for element_id in __revit__.ActiveUIDocument.Selection.GetElementIds()]
                                deleted_params = []
                                
                                # [SCRIPT:START_TRANSACTION] Start transaction for parameter deletion
                                with Transaction(doc, 'Delete Parameter') as trans:
                                    trans.Start()
                                    for element in selection:
                                        for param_name in param_names:
                                            param = element.LookupParameter(param_name)
                                            if param:
                                                doc.Delete(param.Id)
                                                deleted_params.append(param_name.strip())
                                    trans.Commit()
                        
                        # [SCRIPT:PREPARE_REPORT] Prepare report data
                        not_deleted_params = [param_name for param_name in param_names if param_name.strip() not in deleted_params]
                        if deleted_params or not_deleted_params:
                            deleted_data = [[param, str_7(lan)] for param in deleted_params]
                            not_deleted_data = [[param, str_8(lan)] for param in not_deleted_params]
                            combined_data = deleted_data + not_deleted_data
                            
                            # [UI:CREATE_REPORT_TAB] Transform data for report format
                            headers = [str_10(lan), str_11(lan)] 
                            data = [
                                [row[0] for row in combined_data],  
                                [row[1] for row in combined_data]   
                            ]
                            editable = [False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)

                    except StopIteration:
                        pass
                        self.Show()
                        return
                    except Exception:
                        pass
                        self.Show()
                        return
                    except SystemExit:
                        pass
                        self.Show()
                        return
                
                # [SCRIPT:ELEMENT_OPTION] Handle element option
                elif result == str_3(lan):
                    try:
                        # [UI:ELEMENT_SELECTION] Select elements
                        selected_elements = []  
                        with forms.WarningBar(title=str_15(lan)):
                            select = revit.pick_element()
                            if select is not None:
                                selected_elements.append(select.Id)  
                        element_ids = selected_elements 
                        doc = revit.doc
                        element_id_objects = List[DB.ElementId]()
                        for element_id in element_ids:
                            element_id_objects.Add(element_id)
                        revit.uidoc.Selection.SetElementIds(element_id_objects)
                        revit.uidoc.ShowElements(element_id_objects)

                        # [SCRIPT:VALIDATE_SELECTION] Check if element is selected
                        if selected_elements is None:
                            forms.alert(str_5(lan))
                            self.Show()
                            return
                        uidoc = __revit__.ActiveUIDocument
                        doc = __revit__.ActiveUIDocument.Document
                        selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                        
                        # [SCRIPT:CHECK_ELEMENT_COUNT] Ensure only one element is selected
                        if len(selection) != 1:
                            forms.alert(str_16(lan), title=str_17(lan))
                        else:
                            # [UI:PARAMETER_SELECTION] Display parameter selection dialog
                            source_element = selection[0]  
                            parameter_list = pyrevit.forms.select_parameters(
                                src_element=source_element,
                                title=str_14(lan),
                                button_name=str_13(lan),
                                multiple=True,
                                filterfunc=None,
                                include_instance=True,
                                include_type=True,
                                exclude_readonly=True
                            )
                            if parameter_list is None:
                                self.Show()
                                return
                            # [SCRIPT:PREPARE_FOR_TRANSACTION] Prepare for parameter deletion
                            selected_parameters = [param.definition.Name for param in parameter_list]
                            param_names = [param for param in selected_parameters]
                            
                            # [SCRIPT:START_TRANSACTION] Start transaction for parameter deletion
                            deleted_params=[]
                            with DB.Transaction(doc, 'Delete Parameter') as trans:
                                trans.Start()
                                for param_name in param_names:
                                    param = source_element.LookupParameter(param_name)
                                    if param:
                                        doc.Delete(param.Id)
                                        deleted_params.append(param_name.strip())
                                trans.Commit()
                        
                        # [SCRIPT:PREPARE_REPORT] Prepare report data
                        not_deleted_params = [param_name for param_name in param_names if param_name.strip() not in deleted_params]
                        if deleted_params or not_deleted_params:
                            deleted_data = [[param, str_7(lan)] for param in deleted_params]
                            not_deleted_data = [[param, str_8(lan)] for param in not_deleted_params]
                            combined_data = deleted_data + not_deleted_data
                            
                            # [UI:CREATE_REPORT_TAB] Transform data for report format
                            headers = [str_10(lan), str_11(lan)]  
                            data = [
                                [row[0] for row in combined_data],  
                                [row[1] for row in combined_data]   
                            ]
                            editable = [False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)
                    
                    except StopIteration:
                        pass
                        self.Show()
                        return
                    except Exception:
                        pass
                        self.Show()
                        return
                    except SystemExit:
                        pass
                        self.Show()
                        return

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_22(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Search for Value of Instance Parameters] Instance Parameter Value Search
        #
        # Handles search for instance parameter values across multiple categories:
        # - Searches for specific parameter values across predefined categories
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:INSTANCE_PARAMETER_VALUE_SEARCH]
        elif button_text == tool_str_33(lan):
            """
            This script handles the functionality of searching for the value of instance parameters in a Revit model. It allows the user to search for specific parameters and their values across multiple categories of elements within the model.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Displays an input form where the user can enter the parameter name and value to search for.
            4. Searches through multiple predefined categories of elements in the Revit model for the specified parameter and value.
            5. If matching data is found, a table is generated showing the element ID, category, parameter, and value.
            6. If no matching data is found, an alert is shown.
            7. If an error occurs during the process, an error message is displayed.
            8. Finally, the Windows Form is restored after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference("RevitAPI")
                from pyrevit import  script, forms
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.categories import (Doors, Windows, Walls, AirTerminals, CableTrayFittings, CableTrays, Casework, Ceilings, Columns, CommunicationDevices, ConduitFitting, Conduit, 
                CurtainWallPanels, CurtainWallMullions, DataDevices, DuctAccessory, DuctFitting, DuctInsulations, DuctLinings, DuctCurves, ElectricalEquipment, ElectricalFixtures, FireAlarmDevices, 
                FlexDuctCurves, FlexPipeCurves, Floors, Furniture, FurnitureSystems, GenericModel, LightingDevices, LightingFixtures, MechanicalEquipment, NurseCallDevices, PipeAccessory, PipeFitting, 
                PipeInsulations, PipeCurves, Planting, PlumbingFixtures, StairsRailing, Ramps, Roofs, Rooms, SecurityDevices, Site, SpecialityEquipment, Sprinklers, Stairs, AreaRein, StructuralColumns, 
                StructConnections, StructuralFoundation, StructuralFraming, PathRein, Rebar, StructuralStiffener, StructuralTruss, TelephoneDevices)              
                from sajdmo.forms.double import double_input_plusnote
                from sajdmo.scripts.tables import int_id_param_value
                from structure.root import wurl_path,  sinstancepv_icon, lan_path, cuslogo_path, logo_path, sinstancepv_back, cancel_icon, ok_icon, searchvalue_icon
                from UI.strings_search_value_of_instance_parameters import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_h1, str_h2
                from UI.url import parsweb

                # [SCRIPT:INITIAL_SETUP] Initialize variables
                lan = lan_path()
                wurl= wurl_path()
                output = script.get_output()

                # [UI:PARAMETER_VALUE_FORM] Display parameter value form
                icon_path = sinstancepv_icon()
                search_image_path = sinstancepv_back()
                ok_icon_path = ok_icon()
                cancel_icon_path = cancel_icon()
                parameter_label = str_1(lan)
                value_label = str_2(lan)
                window_name = str_11(lan)
                note = str_10(lan)
                url = parsweb(wurl)
                selected_parameter, selected_value = double_input_plusnote(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, url)   
                
                # [SCRIPT:CATEGORIES] Define categories for search
                categories = {
                    'Doors': Doors,
                    'Windows': Windows,
                    'Walls': Walls,
                    'AirTerminals': AirTerminals,
                    'Doors': Doors,
                    'CableTrayFittings': CableTrayFittings,
                    'CableTrays': CableTrays,
                    'Casework': Casework,
                    'Ceilings': Ceilings,
                    'Columns': Columns,
                    'CommunicationDevices': CommunicationDevices,
                    'ConduitFitting': ConduitFitting,
                    'Conduit': Conduit,
                    'CurtainWallPanels': CurtainWallPanels,
                    'CurtainWallMullions': CurtainWallMullions,
                    'DataDevices': DataDevices,
                    'DuctAccessory': DuctAccessory,
                    'DuctFitting': DuctFitting,
                    'DuctInsulations': DuctInsulations,
                    'DuctLinings': DuctLinings,
                    'DuctCurves': DuctCurves,
                    'ElectricalEquipment': ElectricalEquipment,
                    'ElectricalFixtures': ElectricalFixtures,
                    'FireAlarmDevices': FireAlarmDevices,
                    'FlexDuctCurves': FlexDuctCurves,
                    'FlexPipeCurves': FlexPipeCurves,
                    'Floors': Floors,
                    'Furniture': Furniture,
                    'FurnitureSystems': FurnitureSystems,
                    'GenericModel': GenericModel,
                    'LightingDevices': LightingDevices,
                    'LightingFixtures': LightingFixtures,
                    'MechanicalEquipment': MechanicalEquipment,
                    'NurseCallDevices': NurseCallDevices,
                    'PipeAccessory': PipeAccessory,
                    'PipeFitting': PipeFitting,
                    'PipeInsulations': PipeInsulations,
                    'PipeCurves': PipeCurves,
                    'Planting': Planting,
                    'PlumbingFixtures': PlumbingFixtures,
                    'StairsRailing': StairsRailing,
                    'Ramps': Ramps,
                    'Roofs': Roofs,
                    'Rooms': Rooms,
                    'SecurityDevices': SecurityDevices,
                    'Site': Site,
                    'SpecialityEquipment': SpecialityEquipment,
                    'Sprinklers': Sprinklers,
                    'Stairs': Stairs,
                    'AreaRein': AreaRein,
                    'StructuralColumns': StructuralColumns,
                    'StructConnections': StructConnections,
                    'StructuralFoundation': StructuralFoundation,
                    'StructuralFraming': StructuralFraming,
                    'PathRein': PathRein,
                    'Rebar': Rebar,
                    'StructuralStiffener': StructuralStiffener,
                    'StructuralTruss': StructuralTruss,
                    'TelephoneDevices': TelephoneDevices,
                }      
                has_table_data = False 

                # [SCRIPT:SEARCH_PARAMETER_VALUE] Search for parameter value 
                if selected_parameter:
                    if selected_value:
                        all_table_data = []  
                        for category_name, get_element_ids_func in categories.items():
                            table_data = int_id_param_value(category_name, get_element_ids_func, selected_parameter, selected_value)
                            if table_data:
                                category_rows = [[row[0], category_name, row[1], row[2]] for row in table_data]
                                all_table_data.extend(category_rows)
                                has_table_data = True
                        
                        if has_table_data:
                            headers = [str_4(lan), str_14(lan), str_5(lan), str_9(lan)]  
                            data = [
                                [row[0] for row in all_table_data],      
                                [row[1] for row in all_table_data],      
                                [row[2] for row in all_table_data],      
                                [row[3] for row in all_table_data]       
                            ]
                            editable = [False, False, False, False]  
                            self.create_report_tab(headers, data, editable, title=button_text)
                        else:
                            forms.alert(str_6(lan))
                    else:
                        forms.alert(str_7(lan))
                else:
                    forms.alert(str_8(lan))

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                from structure.root import lan_path
                from UI.strings_search_value_of_instance_parameters import str_13
                lan = lan_path()
                MessageBox.Show(str(e),str_13(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Search for Any Value] Any Parameter Value Search
        #
        # Handles search for any value of a specified parameter in selected elements:
        # - Searches for specific parameter values in selected elements
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:SEARCH_FOR_ANY_VALUE]
        elif button_text == tool_str_34(lan):
            """
            This script facilitates the process of searching for any value of a specified parameter in selected Revit elements. It allows users to search through selected elements for a specific value of a parameter, both for instance and type parameters.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Checks if any elements are selected in the Revit document.
            4. Prompts the user to select a parameter and enter the desired value to search for.
            5. Iterates through selected elements and their parameters, comparing their values to the desired search value.
            6. If a match is found, the element ID, matched parameter, and value are added to a table.
            7. If no matching elements are found, an alert is displayed.
            8. Displays an error table for any elements where the parameter search failed.
            9. Finally, restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()
       
                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary modules
                import clr
                clr.AddReference("RevitAPI")
                from Autodesk.Revit import DB
                from pyrevit import DB, script, forms
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.modules.param import get_parameter_value
                from sajdmo.forms.single import single_input
                from structure.root import wurl_path, sanyv_icon, lan_path, cuslogo_path, logo_path, sanyv_back, cancel_icon, ok_icon, searchanyvalue_icon
                from UI.strings_search_for_any_value_of_parameter import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                str_17, str_18, str_19, str_h1, str_h2)
                from UI.url import parsweb

                # [SCRIPT:INITIAL_SETUP] Initialize variables
                wurl= wurl_path()
                lan = lan_path()
                output = script.get_output()

                # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                uidoc = __revit__.ActiveUIDocument
                doc = __revit__.ActiveUIDocument.Document

                output = script.get_output() 
                
                # [SCRIPT:SELECTED_ELEMENTS] Get selected elements
                selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]
                
                # [SCRIPT:VALIDATE_SELECTION] Check if any elements are selected
                if len(selection) < 1:
                    forms.alert(str_1(lan), title=str_2(lan))
                else:
                    # [UI:PARAMETER_SELECTION] Display parameter selection dialog
                    source_element = selection[0]  
                    parameter_list = forms.select_parameters(
                        src_element=source_element,
                        title=str_3(lan),
                        button_name=str_4(lan),
                        multiple=True,
                        filterfunc=None,
                        include_instance=True,
                        include_type=True,
                        exclude_readonly=True
                    )
                    if parameter_list:  
                        # [SCRIPT:SELECTED_PARAMETERS] Prepare selected parameters
                        selected_parameters = [param.definition for param in parameter_list]
                        
                        # [UI:VALUE_FORM] Display value input form
                        icon_path = sanyv_icon()
                        search_image_path = sanyv_back()
                        ok_icon_path = ok_icon()
                        cancel_icon_path = cancel_icon()
                        parameter_label = str_5(lan)
                        window_name = str_17(lan)
                        url = parsweb(wurl)
                        desired_value = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                        
                        if desired_value is None:
                            forms.alert(str_6(lan))
                            self.Show()
                            return

                        # [SCRIPT:SEARCH_PARAMETER_VALUE] Search for parameter value
                        table_data = []
                        error_table_data = []
                        for source_element in selection:
                            try:
                                if isinstance(source_element, DB.CurtainGridLine):
                                    continue
                                
                                # [SCRIPT:ELEMENT_ID] Get element ID
                                element_id = source_element.Id.IntegerValue  
                                row_data = [element_id]  
                                matched_parameter = None

                                # [SCRIPT:CHECK_PARAMETER_VALUE] Check parameter value
                                for selected_parameter in selected_parameters:
                                    instance_param_value = get_parameter_value(source_element, selected_parameter)
                                    if instance_param_value is not None:
                                        if instance_param_value == desired_value:
                                            matched_parameter = selected_parameter
                                            row_data.append(instance_param_value)
                                        else:
                                            continue
                                    else:
                                        if isinstance(source_element, DB.Wall):
                                            type_param = source_element.WallType.LookupParameter(selected_parameter.Name)
                                        else:
                                            type_param = source_element.Symbol.LookupParameter(selected_parameter.Name)
                                        if type_param and type_param.HasValue:
                                            type_param_value = type_param.AsValueString()
                                            if type_param_value == desired_value:
                                                matched_parameter = selected_parameter
                                                row_data.append(type_param_value)
                                            else:
                                                continue
                                        else:
                                            continue
                                
                                # [SCRIPT:ADD_TO_TABLE] Add to table if match found
                                if len(row_data) > 1:
                                    row_data.insert(1, matched_parameter.Name)
                                    table_data.append(row_data)
                            except Exception as e:
                                error_table_data.append([(source_element.Id.IntegerValue), str_7(lan)])  
                        
                        # [UI:CREATE_REPORT_TAB] Create report tab for matched data
                        if table_data:
                            headers = [str_9(lan), str_10(lan), str_11(lan)]
                            data = list(zip(*table_data))  
                            editable = [False, False, False]
                            self.create_report_tab(headers, data, editable, title=button_text) 
                        else:
                            forms.alert(str_12(lan), title=str_13(lan))

                        # [UI:CREATE_ERROR_TAB] Create error tab for failed searches
                        if error_table_data:
                            headers = [str_9(lan), str_15(lan)]
                            data = list(zip(*table_data))  
                            editable = [False, False, False]
                            self.create_report_tab(headers, data, editable, title=button_text)  
                        else:
                            pass
                    else:
                        forms.alert(str_16(lan), title=str_13(lan))

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_19(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Pair Comparer] Element/View Comparison
        #
        # Handles comparison of two elements or views:
        # - Compares instance and type parameters
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:PAIR_COMPARER]
        elif button_text == tool_str_35(lan):
            """
            This script facilitates the comparison of two selected elements or views in Revit. It allows users to compare both instance and type parameters of the selected elements or views, displaying a report that highlights similarities and differences in their properties.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including Revit API, pyRevit, and system libraries.
            3. Defines a `PropPair` class to compare parameter values between two elements.
            4. Retrieves the parameters of the selected elements, excluding certain parameters (e.g., "Family and Type").
            5. Compares the parameters of two elements, identifying shared and unique properties, as well as matching or differing values.
            6. If the comparison involves views, type parameters of the views are also compared.
            7. Displays a report of the comparison, showing the parameter name, value, and the comparison status (match or mismatch).
            8. Provides options for users to select either two views or two elements to compare.
            9. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-    
                
                def pair_compare_check():
                    # [SCRIPT:IMPORTS] Import required libraries and modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    from pyrevit import revit, forms, script
                    from RevitServices.Persistence import DocumentManager
                    import os
                    import sys
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.forms.option import pick
                    from structure.root import wurl_path, outcompare1, two_sym, comparev_back, comparee_back, comparetwo_icon, lan_path, cuslogo_path, logo_path, compare_icon
                    from UI.strings_pair_compare_check import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, 
                    str_18, str_19, str_20, str_21, str_22, str_h1, str_h2)
                    from UI.url import parsweb

                    # [SCRIPT:INITIAL_SETUP] Initialize variables
                    lan = lan_path()
                    wurl = wurl_path()
                    # Developed by Ehsan Iran nejad, modified by Mohammad Sajjad Mortazavi
                    doc = DocumentManager.Instance.CurrentDBDocument 
                    logger = script.get_logger()
                    output = script.get_output()
                    EXCLUDE_PARAMS = {"Family and Type", "Type Id"}

                    # [SCRIPT:PROP_PAIR_CLASS] Define PropPair class for parameter comparison
                    class PropPair(object):
                        def __init__(self, leftp, rightp):
                            self.leftp = leftp
                            self.rightp = rightp

                        def leftp_name(self):
                            return self.leftp.Definition.Name

                        def rightp_name(self):
                            return self.rightp.Definition.Name

                        def compare(self):
                            leftp_name = self.leftp_name()
                            rightp_name = self.rightp_name()
                            left_value = revit.query.get_param_value(self.leftp)
                            right_value = revit.query.get_param_value(self.rightp)
                            return (leftp_name, left_value), (rightp_name, right_value), left_value == right_value

                    # [SCRIPT:GRAB_PROPS] Function to grab properties of an element
                    def grab_props(src_element):
                        return {x.Definition.Name: x for x in src_element.Parameters
                                if x.Definition.Name not in EXCLUDE_PARAMS}

                    # [SCRIPT:COMPARE_PROPS] Function to compare properties of two elements
                    def compare_props(src_element, tgt_element):
                        pair_data_report = []
                        header_report = []
                        src_type = revit.query.get_type(src_element)
                        tgt_type = revit.query.get_type(tgt_element)
                        src_props = grab_props(src_element)
                        tgt_props = grab_props(tgt_element)
                        shared_props = set(src_props.keys()) & set(tgt_props.keys())
                        combined_results = []  

                        # [SCRIPT:COMPARE_SHARED_PROPS] Compare shared properties
                        for sprop in sorted(shared_props):
                            proppair = PropPair(
                                src_props[sprop],
                                tgt_props[sprop]
                            )
                            left_prop, right_prop, comparison_result = proppair.compare()
                            comparison_status = str_2(lan) if comparison_result else str_3(lan)
                            combined_results.append([str_7(lan), left_prop[0], left_prop[1], right_prop[1], comparison_status])

                        # [SCRIPT:COMPARE_UNIQUE_PROPS] Compare unique properties
                        src_unique = set(src_props.keys()) - set(tgt_props.keys())
                        tgt_unique = set(tgt_props.keys()) - set(src_props.keys())
                        for prop in src_unique:
                            value = revit.query.get_param_value(src_props[prop])
                            combined_results.append([str_8(lan), prop, value, '', ''])  
                        for prop in tgt_unique:
                            value = revit.query.get_param_value(tgt_props[prop])
                            combined_results.append([str_8(lan), '', '', prop, value])  

                        # [SCRIPT:COMPARE_TYPE_PROPS] Compare type properties
                        if src_type and tgt_type:
                            src_tprops = grab_props(src_type)
                            tgt_tprops = grab_props(tgt_type)
                            shared_tprops = set(src_tprops.keys()) & set(tgt_tprops.keys())
                            for stprop in sorted(shared_tprops):
                                tproppair = PropPair(
                                    src_tprops[stprop],
                                    tgt_tprops[stprop]
                                )
                                left_prop, right_prop, comparison_result = tproppair.compare()
                                comparison_status = str_2(lan) if comparison_result else str_3(lan)
                                combined_results.append([str_11(lan), left_prop[0], left_prop[1], right_prop[1], comparison_status])

                            # [SCRIPT:COMPARE_UNIQUE_TYPE_PROPS] Compare unique type properties
                            src_tunique = set(src_tprops.keys()) - set(tgt_tprops.keys())
                            tgt_tunique = set(tgt_tprops.keys()) - set(src_tprops.keys())
                            for prop in src_tunique:
                                value = revit.query.get_param_value(src_tprops[prop])
                                combined_results.append([str_12(lan), prop, value, '', ''])  
                            for prop in tgt_tunique:
                                value = revit.query.get_param_value(tgt_tprops[prop])
                                combined_results.append([str_12(lan), '', '', prop, value])  

                        # [SCRIPT:PREPARE_REPORT] Prepare report data
                        if combined_results:
                            pair_data_report = combined_results
                            header_report = [str_22(lan), str_4(lan), str_5(lan).format(src_element.Name), str_5(lan).format(tgt_element.Name), str_6(lan)]
                        return header_report, pair_data_report

                    try:
                        # [SCRIPT:MAIN_COMPARISON] Main comparison logic
                        selected_elements = revit.get_selection().elements
                        if len(selected_elements) == 2:
                            source_element = selected_elements[0]
                            target_element = selected_elements[1]
                            output = script.get_output()
                            header_report, pair_data_report = compare_props(source_element, target_element)
                        else:
                            # [UI:PAIR_COMPARER_FORM] Display pair comparer form
                            window_name = str_13(lan)
                            op1 = str_14(lan)
                            op2 = str_15(lan)
                            window_icon = comparetwo_icon()
                            button_icon = compare_icon()
                            op1_pic = comparev_back()
                            op2_pic = comparee_back()
                            url = parsweb(wurl)
                            op = pick(window_name, op1, op2, window_icon, button_icon, op1_pic, op2_pic, url)
                            if op == str_14(lan):
                                source_element = forms.select_views(title=str_16(lan), multiple=False)
                                if source_element:
                                    target_element = forms.select_views(title=str_17(lan), multiple=False)
                                    if target_element:
                                        header_report, pair_data_report = compare_props(source_element, target_element)
                            elif op == str_15(lan):
                                with forms.WarningBar(title=str_18(lan)):
                                    source_element = revit.pick_element()
                                    if source_element:
                                        target_element = revit.pick_element(message=str_19(lan))
                                        if target_element:
                                            header_report, pair_data_report = compare_props(source_element, target_element)
                

                    except StopIteration:
                        pass
                    except Exception:
                        pass            
                    except SystemExit:
                        pass

                    return header_report, pair_data_report  

                # [SCRIPT:CALL_COMPARISON] Call comparison function and use returned values
                header_report, pair_data_report = pair_compare_check()

                if header_report and pair_data_report:
                    editable = [False, False, False, False, False]
                    self.create_report_tab(header_report, list(zip(*pair_data_report)) , editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()

            except Exception as e:
                pass
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Comparer of Multiple Elements] Multiple Element Comparison
        #
        # Handles comparison of multiple elements:
        # - Compares parameters across multiple elements
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:COMPARER_OF_MULTIPLE_ELEMENTS]
        elif button_text == tool_str_36(lan):
            """
            This script compares multiple selected elements in Revit, displaying a report that highlights the differences in their parameters. It checks if the selected elements have the same parameter values and provides a comparison status for each parameter.

            Workflow:
            1. Temporarily hides the Windows Form.
            2. Imports necessary modules, including pyRevit, system libraries, and custom modules.
            3. Defines a `PropPair` class to retrieve and compare parameter values for an element.
            4. Defines the `compare_multiple_elements` function, which compares the parameters of multiple selected elements.
            5. The function collects all unique parameter names across the selected elements and compares their values.
            6. If the values match across all selected elements, the comparison status is marked as "Match", otherwise, it is marked as "Mismatch".
            7. Displays a report of the comparison results, showing the parameter name, values for each element, and the comparison status.
            8. If fewer than two elements are selected, an alert is shown to inform the user.
            9. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-

                def multi_compare_element_check():
                    # [SCRIPT:IMPORTS] Import necessary modules
                    from pyrevit import revit, forms, script
                    import os
                    import sys
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from structure.root import multi_sym, outcompare2, lan_path, cuslogo_path, logo_path
                    from UI.strings_multi_compare_check import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_h1, str_h2

                    # [SCRIPT:INITIAL_SETUP] Initialize variables
                    lan = lan_path()
                    logger = script.get_logger()
                    # Developed by Ehsan Iran nejad, modified by Mohammad Sajjad Mortazavi
                    EXCLUDE_PARAMS = {"Family and Type", "Type Id"}

                    # [SCRIPT:PROP_PAIR_CLASS] Define PropPair class for parameter comparison
                    class PropPair(object):
                        def __init__(self, element, parameter):
                            self.element = element
                            self.parameter = parameter

                        def parameter_name(self):
                            return self.parameter.Definition.Name

                        def element_name(self):
                            return self.element.Name

                        def get_value(self):
                            return revit.query.get_param_value(self.parameter)

                    # [SCRIPT:GRAB_PROPS] Function to grab properties of an element
                    def grab_props(element):
                        return {x.Definition.Name: x for x in element.Parameters
                                if x.Definition.Name not in EXCLUDE_PARAMS}

                    # [SCRIPT:COMPARE_MULTIPLE_ELEMENTS] Function to compare multiple elements
                    def compare_multiple_elements(selected_elements):
                        all_props = {}
                        multi_compare_data_report = []
                        multi_compare_header_report = []
                        for element in selected_elements:
                            all_props[element] = grab_props(element)

                        all_prop_names = set(prop_name for props in all_props.values() for prop_name in props.keys())
                        comparison_data = []

                        for prop_name in sorted(all_prop_names):
                            prop_data = []
                            for element, props in all_props.items():
                                if prop_name in props:
                                    prop_pair = PropPair(element, props[prop_name])
                                    prop_data.append((prop_pair.element_name(), prop_pair.get_value()))
                                else:
                                    prop_data.append((element.Name, ''))
                            if len(set(val for _, val in prop_data)) == 1:
                                comparison_status = str_2(lan)
                            else:
                                comparison_status = str_3(lan)
                            comparison_data.append([prop_name] + [val for _, val in prop_data] + [comparison_status])

                        if comparison_data:
                            multi_compare_data_report = comparison_data
                            a = [element.Name for element in selected_elements]
                            multi_compare_header_report = [str_4(lan)] + a + [str_6(lan)]
                            
                        return multi_compare_header_report, multi_compare_data_report

                    # [SCRIPT:VALIDATE_SELECTION] Check if more than one element is selected
                    selected_elements = revit.get_selection().elements
                    if len(selected_elements) > 1:
                        return compare_multiple_elements(selected_elements)
                    else:
                        forms.alert(str_5(lan))

                # [SCRIPT:CALL_COMPARISON] Call comparison function and unpack results
                multi_compare_header_report, multi_compare_data_report = multi_compare_element_check()

                if multi_compare_header_report and multi_compare_data_report:
                    editable = [False] * len(multi_compare_header_report)
                    self.create_report_tab(multi_compare_header_report, list(zip(*multi_compare_data_report)), editable, title=button_text)

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()

            except Exception as e:
                from structure.root import lan_path
                from UI.strings_multi_compare_check import str_bar_8
                lan=lan_path()
                MessageBox.Show(str(e),str_8(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Same Value for All Selected Elements] Set Same Parameter Value
        #
        # Handles setting the same parameter value for all selected elements:
        # - Sets parameter value for all selected elements
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:SAME_VALUE_FOR_ALL_SELECTED_ELEMENTS]
        elif button_text == tool_str_37(lan):
            """
            This function handles the event when the "Same Value for All Selected Elements" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the parameter value setting operations.
            2. Displays a form with options for setting the same parameter value for all selected elements.
            3. Prompts the user to input a parameter name and value.
            4. Sets the specified parameter value for all selected elements in the Revit model.
            5. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows setting the same parameter value for multiple selected elements.
            - Updates the UI to reflect the parameter values and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                def set_same_value_for_all_selected_elements():
                    # [SCRIPT:IMPORTS] Import necessary modules
                    import clr
                    clr.AddReference('RevitAPIUI')
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    import System.Drawing as Drawing
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit
                    from System.Windows.Forms import Form, Label, TextBox, Button, PictureBox, RadioButton, Button, Cursors
                    import Autodesk.Revit.DB as DB
                    from RevitServices.Persistence import DocumentManager
                    from pyrevit import forms, script      
                    import os
                    import sys
                    import webbrowser
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.pset import pvset_text, p_values, int_ids, print_table_from_lists, c_name
                    from structure.root import wurl_path,  onevalue_icon, lan_path, onevalue_back, cancel_icon, ok_icon, eye_icon, logo_path, cuslogo_path
                    from UI.strings_set_same_value_for_all_selected_elements import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, 
                    str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_h1, str_h2)
                    from UI.url import parsweb

                    # [SCRIPT:INITIAL_SETUP] Initialize variables
                    lan = lan_path()
                    wurl= wurl_path()
                    doc = __revit__.ActiveUIDocument.Document
                    selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                    
                    # [SCRIPT:VALIDATE_SELECTION] Check if any elements are selected
                    if len(selection) == 0:
                        forms.alert(str_1(lan))
                    else:
                        elements = [doc.GetElement(element_id) for element_id in selection]
                        with forms.ProgressBar(title='', indeterminate=True):
                            # [UI:SET_SAME_VALUE_FORM] Define form for setting parameter value
                            class SET_SAME_VALUE(Form):
                                def __init__(self, doc):
                                    """
                                    This function initializes the form for setting the same parameter value for all selected elements.

                                    Workflow:
                                    1. Sets up the form with a title, size, and background color.
                                    2. Configures UI elements such as labels, text boxes, radio buttons, and buttons.
                                    3. Implements event handlers for button clicks and text changes.

                                    Key Features:
                                    - Provides a user-friendly interface for setting parameter values.
                                    - Updates the UI to reflect the selected elements and their properties.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    # [UI:FORM_INITIALIZATION] Initialize form properties
                                    self.Text = str_12(lan)
                                    self.Width = 300
                                    self.Height = 450
                                    self.BackColor = Color.White
                                    self.doc = doc
                                    self.CenterToScreen()
                                    self.Icon = Drawing.Icon(onevalue_icon())

                                    # [UI:PICTURE_BOX] Add picture box
                                    self.pictureBoxSFIPV = PictureBox()
                                    self.pictureBoxSFIPV.Location = Point(110, 45)
                                    self.pictureBoxSFIPV.Size = Size(50, 50)
                                    imageSFIPV = Image.FromFile(onevalue_back())
                                    self.pictureBoxSFIPV.Image = imageSFIPV
                                    self.Controls.Add(self.pictureBoxSFIPV)

                                    # [UI:LABEL_1] Add label for parameter name
                                    self.label1 = Label()
                                    self.label1.Text = str_2(lan)
                                    self.label1.Location = Point(40, 125)
                                    self.label1.AutoSize = True
                                    self.label1.Font = Font(self.label1.Font, FontStyle.Bold)
                                    self.Controls.Add(self.label1)

                                    # [UI:TEXTBOX_1] Add text box for parameter name
                                    self.textbox1 = TextBox()
                                    self.textbox1.Width = 200
                                    self.textbox1.Location = Point(40, 150)
                                    self.textbox1.TextChanged += self.textbox_TextChanged
                                    self.Controls.Add(self.textbox1)

                                    # [UI:LABEL_2] Add label for parameter value
                                    self.label2 = Label()
                                    self.label2.Text = str_3(lan)
                                    self.label2.Location = Point(40, 200)
                                    self.label2.AutoSize = True
                                    self.label2.Font = Font(self.label2.Font, FontStyle.Bold)
                                    self.Controls.Add(self.label2)

                                    # [UI:TEXTBOX_2] Add text box for parameter value
                                    self.textbox2 = TextBox()
                                    self.textbox2.Width = 200
                                    self.textbox2.Location = Point(40, 225)
                                    self.textbox2.TextChanged += self.textbox_TextChanged
                                    self.textbox2.Enabled = False
                                    self.Controls.Add(self.textbox2)

                                    # [UI:RADIO_BUTTON_TRUE] Add radio button for True
                                    self.radioButton_True = RadioButton()
                                    self.radioButton_True.Appearance = 0  
                                    self.radioButton_True.Text = str_4(lan)
                                    self.radioButton_True.Width = 70
                                    self.radioButton_True.Height = 30
                                    self.radioButton_True.Left = 40
                                    self.radioButton_True.Top = 225
                                    self.radioButton_True.CheckedChanged += self.radioButton_checked_changed

                                    # [UI:RADIO_BUTTON_FALSE] Add radio button for False
                                    self.radioButton_False = RadioButton()
                                    self.radioButton_False.Appearance = 0  
                                    self.radioButton_False.Text = str_5(lan)
                                    self.radioButton_False.Width = 70
                                    self.radioButton_False.Height = 30
                                    self.radioButton_False.Left = 120
                                    self.radioButton_False.Top = 225
                                    self.radioButton_False.CheckedChanged += self.radioButton_checked_changed

                                    # [UI:CHECK_BUTTON] Add check button
                                    self.check_button = Button()
                                    self.check_button.Click += self.check_clicked
                                    self.check_button.Location = Point(80, 300)
                                    self.check_button.Width = 35
                                    self.check_button.Height = 35
                                    self.check_button.Image = Icon(eye_icon()).ToBitmap()
                                    self.check_button.Enabled = False
                                    self.Controls.Add(self.check_button)

                                    # [UI:OK_BUTTON] Add OK button
                                    self.ok_button = Button()
                                    self.ok_button.Click += self.ok_clicked
                                    self.ok_button.Location = Point(120, 300)
                                    self.ok_button.Width = 35
                                    self.ok_button.Height = 35
                                    self.ok_button.Image = Icon(ok_icon()).ToBitmap()
                                    self.ok_button.Enabled = False
                                    self.Controls.Add(self.ok_button)

                                    # [UI:CANCEL_BUTTON] Add cancel button
                                    self.cancel_button = Button()
                                    self.cancel_button.Click += self.cancel_clicked
                                    self.cancel_button.Location = Point(160, 300)
                                    self.cancel_button.Width = 35
                                    self.cancel_button.Height = 35
                                    self.cancel_button.Image = Icon(cancel_icon()).ToBitmap()
                                    self.Controls.Add(self.cancel_button)

                                    # [UI:CREATED_BY_LABEL] Add created by label
                                    self.created_by_label = Label()
                                    self.created_by_label.AutoSize = True
                                    self.created_by_label.Text = "BIM Pars"
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.created_by_label.ForeColor = Color.Blue
                                    self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                    self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                    self.created_by_label.Cursor = Cursors.Hand  
                                    self.created_by_label.Click += self.Label_Click
                                    self.Controls.Add(self.created_by_label)

                                    # [UI:CHECK_LABEL] Add check label
                                    self.check_label = Label()
                                    self.check_label.Text = str_6(lan)
                                    self.check_label.AutoSize = True
                                    self.check_label.Left = 280
                                    self.check_label.Top = 10
                                    self.check_label.ForeColor = Color.Black
                                    self.check_label.Font = Font(self.check_label.Font, FontStyle.Bold)
                                    self.Controls.Add(self.check_label)

                                    # [UI:CHECK_LABEL2] Add check label 2
                                    self.check_label2 = Label()
                                    self.check_label2.Text = ""
                                    self.check_label2.AutoSize = True
                                    self.check_label2.Left = 280
                                    self.check_label2.Top = 30
                                    self.check_label2.ForeColor = Color.Blue
                                    self.check_label2.Font = Font(self.check_label2.Font, FontStyle.Bold)
                                    self.Controls.Add(self.check_label2)

                                    # [UI:CHECK_LABEL3] Add check label 3
                                    self.check_label3 = Label()
                                    self.check_label3.Text += ""
                                    self.check_label3.AutoSize = True
                                    self.check_label3.MaximumSize = Size(280, 480)  
                                    self.check_label3.Left = 280
                                    self.check_label3.Top = 50
                                    self.check_label3.ForeColor = Color.Red
                                    self.Controls.Add(self.check_label3)

                                    # [SCRIPT:INITIALIZE_ATTRIBUTES] Initialize attributes to store results
                                    self.columns = []  
                                    self.c1 = []      
                                    self.c_names = [] 
                                    self.c_parameter = []  
                                    self.c_ptype = []     
                                    self.c2 = []      
                                    self.c3 = []      

                                # [EVENT_HANDLER:LABEL_CLICK] Handle label click event
                                def Label_Click(self, sender, event):
                                    """
                                    This function handles the event when the "BIM Pars" label is clicked.

                                    Workflow:
                                    1. Opens the specified URL in the default web browser when the label is clicked.

                                    Key Features:
                                    - Provides a quick link to the BIM Pars website.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    url = parsweb(wurl)
                                    webbrowser.open(url)

                                # [EVENT_HANDLER:TEXTBOX_TEXT_CHANGED] Handle textbox text changed event
                                def textbox_TextChanged(self, sender, e):
                                    """
                                    This function handles the event when the text in the text boxes is changed.

                                    Workflow:
                                    1. Adjusts the form size and enables/disables buttons based on the text input.
                                    2. Updates the UI to reflect the changes in the text boxes.

                                    Key Features:
                                    - Dynamically adjusts the form layout based on user input.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    if self.textbox1.Text:
                                        self.Width = 600
                                        self.Height = 450
                                        self.check_button.Enabled = True
                                        self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                        self.CenterToScreen()
                                    else:
                                        self.check_button.Enabled = False
                                        self.textbox2.Enabled = False
                                        self.radioButton_False.Enabled = False
                                        self.radioButton_True.Enabled = False
                                        self.check_label2.Text=""
                                        self.check_label3.Text=""
                                        self.Width = 300
                                        self.Height = 450
                                        self.created_by_label.Left = 125
                                        self.CenterToScreen()
                                    if self.textbox2.Text:
                                        self.check_label3.ForeColor = Color.Black
                                        self.check_label3.Font = Font(self.check_label3.Font, FontStyle.Bold)
                                        self.check_label3.Top= 10
                                        self.check_label.Text = ""
                                        self.check_label2.Text = ""
                                        self.check_label3.Text = str_7(lan)
                                        self.check_button.Enabled = False
                                    if self.textbox1.Text and self.textbox2.Text:
                                        self.ok_button.Enabled = True
                                    else:
                                        self.ok_button.Enabled = False

                                # [EVENT_HANDLER:RADIOBUTTON_CHECKED_CHANGED] Handle radio button checked changed event
                                def radioButton_checked_changed(self, sender, e):
                                    """
                                    This function handles the event when a radio button is checked or unchecked.

                                    Workflow:
                                    1. Enables the "OK" button when a radio button is selected.

                                    Key Features:
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    self.ok_button.Enabled = True

                                # [EVENT_HANDLER:CHECK_CLICKED] Handle check button click event
                                def check_clicked(self, sender, e):
                                    """
                                    This function handles the event when the "Check" button is clicked.

                                    Workflow:
                                    1. Validates the parameter name entered by the user.
                                    2. Checks if the parameter exists for all selected elements.
                                    3. Displays the parameter type and updates the UI to reflect the results.
                                    4. Enables or disables UI elements based on the parameter type (e.g., text box for text/number, radio buttons for boolean).

                                    Key Features:
                                    - Provides feedback on parameter existence and type.
                                    - Updates the UI dynamically based on the parameter type.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    self.textbox2.Enabled = False
                                    self.radioButton_False.Enabled = False
                                    self.radioButton_True.Enabled = False
                                    self.check_label3.ForeColor = Color.Red
                                    self.check_label3.Top= 50
                                    self.check_label.Text = str_6(lan)
                                    self.check_label2.Text = ""
                                    self.check_label3.Text = ""
                                    self.ok_button.Enabled = False
                                    try:
                                        doc = __revit__.ActiveUIDocument.Document
                                        elements = [doc.GetElement(element_id) for element_id in selection]
                                        parameter_name = self.textbox1.Text
                                        invalid_elements = []
                                        for element in elements:
                                            param = element.LookupParameter(parameter_name)
                                            if param is None:
                                                invalid_elements.append(element)
                                        if invalid_elements:
                                            element_names = ', '.join([elem.Name for elem in invalid_elements])
                                            element_names_noduplicate = ', '.join(set(elem.Name for elem in invalid_elements))
                                            message = str_8(lan).format(parameter_name, element_names_noduplicate,str_9(lan))
                                            self.check_label3.Text = message
                                        param_type = elements[0].LookupParameter(parameter_name).StorageType
                                        self.c_ptype = [param_type] * len(selection)
                                        self.check_label2.Text = str_10(lan).format(param_type)

                                        if param_type == DB.StorageType.Integer:
                                            # StorageType.Integer can represent True/False for YesNo parameters
                                            self.Controls.Remove(self.textbox2)
                                            self.Controls.Add(self.radioButton_True)
                                            self.radioButton_True.Enabled = True
                                            self.Controls.Add(self.radioButton_False)
                                            self.radioButton_False.Enabled = True

                                        elif param_type == DB.StorageType.String:
                                            self.Controls.Remove(self.radioButton_True)
                                            self.Controls.Remove(self.radioButton_False)
                                            self.Controls.Add(self.textbox2)
                                            self.textbox2.Enabled = True

                                        elif param_type == DB.StorageType.Double:
                                            # Double is usually used for decimal numbers
                                            self.Controls.Remove(self.radioButton_True)
                                            self.Controls.Remove(self.radioButton_False)
                                            self.Controls.Add(self.textbox2)
                                            self.textbox2.Enabled = True

                                        elif param_type == DB.StorageType.ElementId:
                                            # Usually references an element, treat like text input or as needed
                                            self.Controls.Remove(self.radioButton_True)
                                            self.Controls.Remove(self.radioButton_False)
                                            self.Controls.Add(self.textbox2)
                                            self.textbox2.Enabled = True

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass
                                    except SystemExit:
                                        pass
                                    
                                # [EVENT_HANDLER:OK_CLICKED] Handle OK button click event
                                def ok_clicked(self, sender, e):
                                    """
                                    This function handles the event when the "OK" button is clicked.

                                    Workflow:
                                    1. Sets the specified parameter value for all selected elements in the Revit model.
                                    2. Handles different parameter types (text, number, boolean) appropriately.
                                    3. Generates a report of the parameter values and their properties.
                                    4. Closes the form after completing the operation.

                                    Key Features:
                                    - Allows setting parameter values for multiple selected elements.
                                    - Updates the UI to reflect the parameter values and their properties.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        parameter_name = self.textbox1.Text
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        doc = __revit__.ActiveUIDocument.Document
                                        self.c1 = int_ids(selection, doc)
                                        self.c_names = c_name(self.c1, doc)
                                        self.c2 = p_values(selection, parameter_name, doc)
                                        self.check_label2.Text = str_19(lan)

                                        elements = [doc.GetElement(eid) for eid in selection]
                                        if len(selection) == 0:
                                            import sys
                                            sys.exit()

                                        if self.textbox2.Text:
                                            value = self.textbox2.Text
                                            with DB.Transaction(doc, "Set Parameter Value") as trans:
                                                trans.Start()
                                                for element in elements:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param is None:
                                                        continue
                                                    stype = param.StorageType
                                                    if stype == DB.StorageType.Integer:
                                                        try:
                                                            param.Set(int(value))
                                                        except:
                                                            pass
                                                    elif stype == DB.StorageType.Double:
                                                        try:
                                                            param.Set(float(value))
                                                        except:
                                                            pass
                                                    elif stype == DB.StorageType.String:
                                                        param.Set(value)
                                                    elif stype == DB.StorageType.ElementId:
                                                        try:
                                                            elem_id = DB.ElementId(int(value))
                                                            param.Set(elem_id)
                                                        except:
                                                            pass
                                                trans.Commit()

                                        elif self.radioButton_True.Checked or self.radioButton_False.Checked:
                                            val = self.radioButton_True.Checked  # True if True checked, else False
                                            with DB.Transaction(doc, "Set Yes/No Parameter") as trans:
                                                trans.Start()
                                                for element in elements:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param is None:
                                                        continue
                                                    if param.StorageType == DB.StorageType.Integer:
                                                        # Assume integer storage type means YesNo param here
                                                        param.Set(1 if val else 0)
                                                trans.Commit()

                                            self.check_label2.Text = str_20(lan)

                                        c3 = p_values(selection, parameter_name, doc)
                                        self.columns = [str_14(lan), str_22(lan), str_23(lan), str_24(lan), str_15(lan), str_16(lan)]
                                        self.c_parameter = [parameter_name] * len(c3)
                                        self.c3 = c3
                                        self.Close()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass
                                    except SystemExit:
                                        pass

                                # [EVENT_HANDLER:CANCEL_CLICKED] Handle cancel button click event
                                def cancel_clicked(self, sender, e):
                                    """
                                    This function handles the event when the "Cancel" button is clicked.

                                    Workflow:
                                    1. Closes the form without making any changes to the Revit model.

                                    Key Features:
                                    - Provides a quick way to exit the form without performing any actions.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        self.Close()        
                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass
                                    except SystemExit:
                                        pass

                            # [EVENT_HANDLER:ON_CLOSED] Handle form closed event
                            def OnClosed(self, e):
                                    """
                                    This function handles the event when the form is closed.

                                    Workflow:
                                    1. Disposes of the form resources when the form is closed.

                                    Key Features:
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    self.Dispose()

                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                            doc = DocumentManager.Instance.CurrentDBDocument
                            if 'form' not in globals():
                                pass
                            else:
                                form = SET_SAME_VALUE(doc)
                                form.ShowDialog()

                        # [SCRIPT:RETURN_RESULTS] Return form results
                        return form.columns, form.c1, form.c_names, form.c_parameter, form.c_ptype, form.c2, form.c3

                # [SCRIPT:UNPACK_RESULTS] Unpack results from function
                headers, c1, c_names, c_parameter, c_ptype, c2, c3 = set_same_value_for_all_selected_elements()

                # [SCRIPT:CREATE_DATA] Prepare data for report    
                data = [

                    c1,
                    c_names,
                    c_parameter,
                    c_ptype,
                    c2,
                    c3
                ]
                editable = [False, False, False, False, False, False]

                # [UI:CREATE_REPORT_TAB] Create report tab if headers exist
                if headers:
                    self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()

            except Exception as e:
                from structure.root import lan_path
                from UI.strings_set_same_value_for_all_selected_elements import str_21
                lan = lan_path()
                MessageBox.Show(str(e),str_21(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Copy from One Parameter to Another Parameter] Copy Parameter Value
        #
        # Handles copying parameter values from one parameter to another:
        # - Copies parameter values from source to target parameter
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:COPY_FROM_ONE_PARAMETER_TO_ANOTHER_PARAMETER]
        elif button_text == tool_str_38(lan):
            """
            This script allows the user to copy the value from one parameter and set it to another parameter for selected elements in Revit.

            Workflow:
            1. Temporarily hides the Windows Form to process the logic.
            2. Imports necessary modules, including Revit API, pyRevit, and custom modules for handling UI elements and data processing.
            3. Checks if elements are selected in Revit. If no elements are selected, an alert is shown.
            4. Displays a custom Windows Form with two input fields where the user can input the names of the source and target parameters.
            5. Verifies if the entered parameters exist for the selected elements and shows alerts if any elements are missing the specified parameters.
            6. Prompts the user with a task dialog to display the type of both parameters.
            7. Performs a transaction to copy the value from the source parameter to the target parameter. The value is converted based on the storage type of both parameters (e.g., string, integer, double, etc.).
            8. Generates a report with details about the copied parameters, including the element names, parameter names, and types.
            9. Restores the Windows Form after the operation completes.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                def copy_value_from_one_parameter_to_another_parameter():
                    # [SCRIPT:IMPORTS] Import necessary modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    import System.Windows.Forms as WinForms
                    import System.Drawing as Drawing
                    from pyrevit import forms, script
                    from System.Windows.Forms import Form, Label, TextBox, Button, DialogResult, PictureBox, Cursors
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit
                    import Autodesk.Revit.DB as DB
                    from Autodesk.Revit.UI import TaskDialog
                    import os
                    import sys
                    import webbrowser
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.pset import p_values, int_ids, print_table_from_lists, c_name
                    from structure.root import wurl_path, copy_icon, lan_path, copy_back, cancel_icon, ok_icon, logo_path, cuslogo_path
                    from UI.strings_copy_value_from_one_param_to_another_param import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, 
                    str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_h1, str_h2)
                    from UI.url import parsweb

                    # [SCRIPT:INITIAL_SETUP] Initialize variables
                    lan = lan_path()
                    wurl= wurl_path()
                    doc = __revit__.ActiveUIDocument.Document
                    selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                    
                    # [SCRIPT:VALIDATE_SELECTION] Check if any elements are selected
                    if len(selection) == 0:
                        forms.alert(str_1(lan))
                        return
                        self.Close()
                    else:
                        elements = [doc.GetElement(element_id) for element_id in selection]
                        with forms.ProgressBar(title='', indeterminate=True):
                            # [UI:COPY_VALUE] Define input form
                            class COPY_VALUE(Form):
                                def __init__(self):
                                    # [UI:FORM_INITIALIZATION] Initialize form properties
                                    self.Text = str_10(lan)
                                    self.Width = 300
                                    self.Height = 550
                                    self.BackColor = Color.White
                                    self.doc = doc
                                    self.CenterToScreen()
                                    self.Icon = Drawing.Icon(copy_icon())

                                    # [UI:LABEL_1] Add label for source parameter
                                    self.label1 = Label()
                                    self.label1.Text = str_2(lan)
                                    self.label1.Location = Point(40, 125)
                                    self.label1.AutoSize = True
                                    self.label1.Font = Font(self.label1.Font, FontStyle.Bold)
                                    self.label1.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                                    self.Controls.Add(self.label1)

                                    # [UI:TEXTBOX_1] Add textbox for source parameter
                                    self.textbox1 = TextBox()
                                    self.textbox1.Width = 200
                                    self.textbox1.Location = Point(40, 150)
                                    self.textbox1.TextChanged += self.textbox_TextChanged  
                                    self.Controls.Add(self.textbox1)

                                    # [UI:LABEL_2] Add label for target parameter
                                    self.label2 = Label()
                                    self.label2.Text = str_3(lan)
                                    self.label2.Location = Point(40, 200)
                                    self.label2.AutoSize = True
                                    self.label2.Font = Font(self.label2.Font, FontStyle.Bold)
                                    self.label2.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                                    self.Controls.Add(self.label2)

                                    # [UI:TEXTBOX_2] Add textbox for target parameter
                                    self.textbox2 = TextBox()
                                    self.textbox2.Width = 200
                                    self.textbox2.Location = Point(40, 225)
                                    self.textbox2.TextChanged += self.textbox_TextChanged  
                                    self.Controls.Add(self.textbox2)

                                    # [UI:OK_BUTTON] Add OK button
                                    self.ok_button = Button()
                                    self.ok_button.DialogResult = DialogResult.OK
                                    self.ok_button.Location = Point(100, 400)
                                    self.ok_button.Width = 35
                                    self.ok_button.Height = 35
                                    icon_OK_path = ok_icon()
                                    self.ok_button.Image = Icon(icon_OK_path).ToBitmap()
                                    self.ok_button.Enabled = False
                                    self.ok_button.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                                    self.Controls.Add(self.ok_button)

                                    # [UI:CANCEL_BUTTON] Add cancel button
                                    self.cancel_button = Button()
                                    self.cancel_button.DialogResult = DialogResult.Cancel
                                    self.cancel_button.Location = Point(140, 400)
                                    self.cancel_button.Width = 35
                                    self.cancel_button.Height = 35
                                    icon_CANCEL_path = cancel_icon()
                                    self.cancel_button.Image = Icon(icon_CANCEL_path).ToBitmap()
                                    self.cancel_button.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Left)
                                    self.Controls.Add(self.cancel_button)

                                    # [UI:PICTURE_BOX] Add picture box
                                    self.pictureBox = PictureBox()
                                    self.pictureBox.Location = Point(110, 20)
                                    self.pictureBox.Size = Size(50, 50)  
                                    self.pictureBox.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                                    self.Controls.Add(self.pictureBox)
                                    icon_path = copy_back()
                                    image = Image.FromFile(icon_path)
                                    self.pictureBox.Image = image

                                    # [UI:CREATED_BY_LABEL] Add created by label
                                    self.created_by_label = Label()
                                    self.created_by_label.AutoSize = True
                                    self.created_by_label.Text = "BIM Pars"
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.created_by_label.ForeColor = Color.Blue
                                    self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                    self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                                    self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                    self.created_by_label.Cursor = Cursors.Hand  
                                    self.created_by_label.Click += self.Label_Click
                                    self.Controls.Add(self.created_by_label)

                                    # [UI:NOTE_LABEL] Add note label
                                    self.note_label = Label()
                                    self.note_label.Text = ""
                                    self.note_label.AutoSize = True
                                    self.note_label.MaximumSize = Size(250, 500)
                                    self.note_label.Left = 300
                                    self.note_label.Top = 20
                                    self.note_label.ForeColor = Color.Black
                                    self.note_label.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                                    self.Controls.Add(self.note_label)

                                    # [SCRIPT:INITIALIZE_COLUMNS] Initialize columns
                                    self.columns = []
                                
                                # [EVENT_HANDLER:LABEL_CLICK] Handle label click event
                                def Label_Click(self, sender, event):
                                    url = parsweb(wurl)
                                    webbrowser.open(url)
                                    
                                # [EVENT_HANDLER:TEXTBOX_TEXT_CHANGED] Handle textbox text changed event
                                def textbox_TextChanged(self, sender, e):
                                    if self.textbox1.Text:
                                        self.Width = 600
                                        self.Height = 550
                                        self.CenterToScreen()
                                        self.note_label.Text = str_4(lan)
                                    if self.textbox1.Text and self.textbox2.Text:
                                        self.ok_button.Enabled = True
                                    else:
                                        self.ok_button.Enabled = False
                            
                            # [UI:SHOW_COPY_VALUE_FORM] Show copy value form and handle dialog result
                            input_form = COPY_VALUE()
                            dialog_result = input_form.ShowDialog()
                            if dialog_result == DialogResult.OK:
                                user_input1 = input_form.textbox1.Text
                                user_input2 = input_form.textbox2.Text
                            if dialog_result == DialogResult.Cancel:
                                forms.alert(str_5(lan))
                                return
                                self.Show()

                            # [SCRIPT:VALIDATE_PARAMETER_1] Check if the first parameter exists
                            parameter_name_1 = user_input1
                            invalid_elements_1 = []
                            for element in elements:
                                param_1 = element.LookupParameter(parameter_name_1)
                                if param_1 is None:
                                    invalid_elements_1.append(element)
                            if invalid_elements_1:
                                element_names = ', '.join([elem.Name for elem in invalid_elements_1])
                                message = str_7(lan).format(parameter_name_1, element_names)
                                forms.alert(message)
                                sys.exit()

                            # [SCRIPT:VALIDATE_PARAMETER_2] Check if the second parameter exists
                            parameter_name_2 = user_input2
                            invalid_elements_2 = []
                            for element in elements:
                                param_2 = element.LookupParameter(parameter_name_2)
                                if param_2 is None:
                                    invalid_elements_2.append(element)
                            if invalid_elements_2:
                                element_names = ', '.join([elem.Name for elem in invalid_elements_2])
                                message = str_6(lan).format(parameter_name_2, element_names)
                                forms.alert(message)
                                sys.exit()

                            # [SCRIPT:INITIALIZE_PARAMETER_DATA] Initialize parameter data
                            self.c_pname1=[parameter_name_1]*len(selection)
                            self.c_pname2=[parameter_name_2]*len(selection)
                            param_type_1 = elements[0].LookupParameter(parameter_name_1).StorageType
                            self.c_ptype1=[param_type_1]*len(selection)
                            param_type_2 = elements[0].LookupParameter(parameter_name_2).StorageType
                            self.c_ptype2=[param_type_2]*len(selection)
                            
                            # [UI:DISPLAY_PARAMETER_TYPE] Display parameter type in a dialog
                            type_dialog = TaskDialog(str_8(lan))
                            type_dialog.MainInstruction = str_8(lan)
                            type_dialog.MainContent = str_9(lan).format(param_type_1, param_type_2)
                            type_dialog.Show()

                            # [SCRIPT:INITIALIZE_REPORT_DATA] Initialize report data
                            self.c1=int_ids(selection, doc)
                            self.c_names = c_name(self.c1, doc)
                            self.c2=p_values(selection, parameter_name_1, doc)   
                            self.c2_2=p_values(selection, parameter_name_2, doc) 
                            
                            # [SCRIPT:START_TRANSACTION] Start Revit transaction
                            transaction_name = 'Set Parameter Value'
                            transaction = DB.Transaction(doc, transaction_name)
                            transaction.Start()
                            for element in elements:
                                    param_1 = element.LookupParameter(parameter_name_1)
                                    param_2 = element.LookupParameter(parameter_name_2)
                                    if param_1 is not None and param_2 is not None:
                                        if param_2.StorageType == DB.StorageType.String:
                                            if param_1.StorageType == DB.StorageType.Double:
                                                param_2.Set(str(param_1.AsDouble()))
                                            elif param_1.StorageType == DB.StorageType.Integer:
                                                param_2.Set(str(param_1.AsInteger()))
                                            else:
                                                param_2.Set(param_1.AsString())
                                        elif param_2.StorageType == DB.StorageType.Integer:
                                            if param_1.StorageType == DB.StorageType.String:
                                                if param_1.HasValue and param_1.AsString().isdigit():
                                                    param_2.Set(int(param_1.AsString()))
                                            else:
                                                param_2.Set(param_1.AsInteger())
                                        elif param_2.StorageType == DB.StorageType.Double:
                                            if param_1.StorageType == DB.StorageType.String:
                                                try:
                                                    param_2.Set(float(param_1.AsString()))
                                                except ValueError:
                                                    pass
                                            else:
                                                param_2.Set(param_1.AsDouble())
                                        elif param_2.StorageType == DB.StorageType.ElementId:
                                            param_2.Set(param_1.AsElementId())
                                        elif param_2.StorageType == DB.StorageType.Boolean:
                                            param_2.Set(param_1.AsBoolean())
                            transaction.Commit()
                            
                            # [SCRIPT:GENERATE_REPORT] Generate report data
                            self.c3=p_values(selection, parameter_name_2, doc) 
                            self.columns = [str_12(lan), str_19(lan), str_20(lan), str_21(lan), str_22(lan), str_23(lan), str_24(lan), str_25(lan), str_26(lan)]
                            
                        # [SCRIPT:RETURN_RESULTS] Return results for report
                        return self.columns, self.c1, self.c_names, self.c_pname1, self.c_ptype1, self.c2, self.c_pname2, self.c_ptype2, self.c2_2, self.c3 
                
                # [SCRIPT:UNPACK_RESULTS] Unpack results from function
                headers, c1, c_names, c_pname1, c_ptype1, c2, c_pname2, c_ptype2, c2_2, c3  = copy_value_from_one_parameter_to_another_parameter()
                
                # [SCRIPT:CREATE_DATA] Prepare data for report
                data = [
                    c1,
                    c_names,
                    c_pname1,
                    c_ptype1,
                    c2,
                    c_pname2,
                    c_ptype2,
                    c2_2,
                    c3 
                ]
                editable = [False, False, False, False, False, False, False, False, False]
                
                # [UI:CREATE_REPORT_TAB] Create report tab
                self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:List Maker of Values from Excel] Excel List Maker for Value Setting
        #
        # Handles creating lists from Excel and setting parameter values:
        # - Imports data from Excel files
        # - Sets parameter values based on Excel data
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:LIST_MAKER_OF_VALUES_FROM_EXCEL]
        elif button_text == tool_str_39(lan):
            """
            This function handles the event when the "List Makers of Values from Excel" button is clicked.

            Workflow:
            1. Hides the current form to prepare for the parameter value setting operations.
            2. Displays a form with options for setting parameter values from an Excel file.
            3. Prompts the user to import an Excel file and select values from it.
            4. Sets the specified parameter value for all selected elements in the Revit model.
            5. Implements exception handling to ensure the form remains stable in case of errors.

            Key Features:
            - Allows setting parameter values for multiple selected elements from an Excel file.
            - Updates the UI to reflect the parameter values and their properties.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                def list_maker_from_excel_for_value_set():
                    # [SCRIPT:IMPORTS] Import necessary modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitAPIUI')
                    clr.AddReference('RevitServices')
                    import os
                    import sys
                    import System.Drawing as Drawing
                    import System.Windows.Forms as WinForms
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit
                    from System.Windows.Forms import Form, Label, TextBox, Button, PictureBox, Cursors, ComboBox, ComboBoxStyle
                    from System import Array
                    import Autodesk.Revit.DB as DB
                    from RevitServices.Persistence import DocumentManager
                    from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                    import xlrd
                    import shutil
                    import webbrowser
                    import pyrevit
                    from pyrevit import forms, script
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.pset import p_values, int_ids, print_table_from_lists, c_name
                    from structure.root import wurl_path, excel_list_icon, excel_list_back, excel_list_sym, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon, importexc_button, reset_icon, exlist_path
                    from UI.strings_list_maker_of_values_from_excel import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                    str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_h1, str_h2)
                    from UI.url import parsweb

                    # [SCRIPT:INITIAL_SETUP] Initialize variables
                    lan = lan_path()
                    wurl= wurl_path()
                    destination_dir = exlist_path()

                    # [SCRIPT:CHECK_EXCEL_FILES] Check for Excel files in destination directory
                    if not os.path.exists(destination_dir):
                        os.makedirs(destination_dir)
                    excel_files = [f for f in os.listdir(destination_dir) if f.endswith('.xls') or f.endswith('.xlsx')]
                    if len(excel_files) == 1:
                        excel_file_path = os.path.join(destination_dir, excel_files[0])
                        file_name = os.path.basename(excel_file_path)
                    else:
                        file_name = ""
                        for file in excel_files:
                            file_path = os.path.join(destination_dir, file)
                            os.remove(file_path)

                    # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                    uidoc = __revit__.ActiveUIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    selection = __revit__.ActiveUIDocument.Selection.GetElementIds()

                    # [SCRIPT:VALIDATE_SELECTION] Check if any elements are selected
                    if len(selection) == 0:
                        forms.alert(str_1(lan))
                    else:
                        elements = [doc.GetElement(element_id) for element_id in selection]
                        with forms.ProgressBar(title='', indeterminate=True):
                            # [UI:LIST_MAKER_FORM] Define the form for Excel list maker
                            class LIST_MAKER(Form):
                                def __init__(self, doc):
                                    """
                                    This function initializes the form for setting parameter values from an Excel file.

                                    Workflow:
                                    1. Sets up the form with a title, size, and background color.
                                    2. Configures UI elements such as labels, text boxes, combo boxes, and buttons.
                                    3. Implements event handlers for button clicks, text changes, and combo box selections.

                                    Key Features:
                                    - Provides a user-friendly interface for setting parameter values from an Excel file.
                                    - Updates the UI to reflect the selected elements and their properties.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    # [UI:FORM_INITIALIZATION] Initialize form properties
                                    self.Text = str_12(lan)
                                    self.Width = 300
                                    self.Height = 600
                                    self.BackColor = Color.White
                                    self.doc = doc
                                    self.CenterToScreen()
                                    self.Icon = Drawing.Icon(excel_list_icon())

                                    # [UI:PICTURE_BOX] Add picture box
                                    self.pictureBoxSFIPV = PictureBox()
                                    self.pictureBoxSFIPV.Location = Point(85, 30)
                                    self.pictureBoxSFIPV.Size = Size(96, 96)
                                    imageSFIPV = Image.FromFile(excel_list_back())
                                    self.pictureBoxSFIPV.Image = imageSFIPV
                                    self.Controls.Add(self.pictureBoxSFIPV)

                                    # [UI:LABEL_1] Add label for parameter input
                                    self.label1 = Label()
                                    self.label1.Text = str_2(lan)
                                    self.label1.Location = Point(40, 310)
                                    self.label1.AutoSize = True
                                    self.label1.Font = Font(self.label1.Font, FontStyle.Bold)
                                    self.Controls.Add(self.label1)

                                    # [UI:LABEL_2] Add label for file name
                                    self.label2 = Label()
                                    self.label2.Text = str_4(lan)
                                    self.label2.Location = Point(40, 150)
                                    self.label2.AutoSize = True
                                    self.label2.Font = Font(self.label2.Font, FontStyle.Bold)
                                    self.label2.MaximumSize = Size(240,240)
                                    self.Controls.Add(self.label2)

                                    # [UI:LABEL_3] Add label for file name value
                                    self.label3 = Label()
                                    self.label3.Text = str(file_name)
                                    self.label3.Location = Point(130 , 150)
                                    self.label3.AutoSize = True
                                    self.label3.MaximumSize = Size(150,75)
                                    self.Controls.Add(self.label3)

                                    # [UI:LABEL_4] Add label for parameter value
                                    self.label4 = Label()
                                    self.label4.Text = ""
                                    self.label4.Location = Point(150, 310)
                                    self.label4.AutoSize = True
                                    self.label4.MaximumSize = Size(240,75)
                                    self.Controls.Add(self.label4)

                                    # [UI:LABEL_5] Add label for row index
                                    self.label5 = Label()
                                    self.label5.Text = str_3(lan)
                                    self.label5.Location = Point(40, 250)
                                    self.label5.AutoSize = True
                                    self.label5.Font = Font(self.label5.Font, FontStyle.Bold)
                                    self.label5.MaximumSize = Size(240,75)
                                    self.Controls.Add(self.label5)

                                    # [UI:LABEL_6] Add label for selected value
                                    self.label6 = Label()
                                    self.label6.Location = Point(self.label6.Left + self.label6.Width +10, 250)
                                    self.label6.AutoSize = True
                                    self.label6.MaximumSize = Size(240,75)
                                    self.Controls.Add(self.label6)
                                    if file_name == "":
                                        self.label6.Text = ""
                                    else:
                                        self.label6.Text = str_6(lan)
                                        self.label6.ForeColor = Color.Blue

                                    # [UI:LABEL_7] Add label for column index
                                    self.label7 = Label()
                                    self.label7.Text = str_5(lan)
                                    self.label7.Location = Point(40, 370)
                                    self.label7.AutoSize = True
                                    self.label7.Font = Font(self.label7.Font, FontStyle.Bold)
                                    self.label7.MaximumSize = Size(240,75)
                                    self.Controls.Add(self.label7)

                                    # [UI:LABEL_8] Add label for error messages
                                    self.label8 = Label()
                                    self.label8.Text = ""
                                    self.label8.Location = Point(85, 370)
                                    self.label8.AutoSize = True
                                    self.label8.MaximumSize = Size(155,100)
                                    self.label8.ForeColor = Color.Red
                                    self.Controls.Add(self.label8)

                                    # [UI:LABEL_9] Add label for row index input
                                    self.label9 = Label()
                                    self.label9.Text = str_26(lan)
                                    self.label9.Location = Point(40, 185)
                                    self.label9.AutoSize = True
                                    self.label9.MaximumSize = Size(155,100)
                                    self.label9.Font = Font(self.label9.Font, FontStyle.Bold)
                                    self.Controls.Add(self.label9)

                                    # [UI:LABEL_10] Add label for column index input
                                    self.label10 = Label()
                                    self.label10.Text = str_27(lan)
                                    self.label10.Location = Point(40, 210)
                                    self.label10.AutoSize = True
                                    self.label10.MaximumSize = Size(155,100)
                                    self.label10.Font = Font(self.label10.Font, FontStyle.Bold)
                                    self.Controls.Add(self.label10)

                                    # [UI:TEXTBOX_1] Add textbox for parameter input
                                    self.textbox1 = TextBox()
                                    self.textbox1.Width = 200
                                    self.textbox1.Location = Point(40, 330)
                                    self.textbox1.TextChanged += self.textbox_TextChanged
                                    self.Controls.Add(self.textbox1)
                                    self.textbox1.Enabled = False

                                    # [UI:TEXTBOX_2] Add textbox for row index
                                    self.textbox2 = TextBox()
                                    self.textbox2.Width = 35
                                    self.textbox2.Location = Point(130, 180)  
                                    self.Controls.Add(self.textbox2)
                                    self.textbox2.Text = "0"

                                    # [UI:TEXTBOX_3] Add textbox for column index
                                    self.textbox3 = TextBox()
                                    self.textbox3.Width = 35
                                    self.textbox3.Location = Point(130, 205)  # 415
                                    self.Controls.Add(self.textbox3)
                                    self.textbox3.Text = "0"
                                    self.textbox2.TextChanged += self.textbox2_changed
                                    self.textbox3.TextChanged += self.textbox2_changed

                                    # [UI:COMBO_BOX] Add combo box for value selection
                                    options = []
                                    self.comboBox = ComboBox()
                                    self.comboBox.Width = 200
                                    self.comboBox.Left = 40
                                    self.comboBox.Top = 270
                                    self.comboBox.DropDownStyle = ComboBoxStyle.DropDownList
                                    self.comboBox.SelectedIndexChanged += self.comboBox_selected_index_changed
                                    self.Controls.Add(self.comboBox)
                                    self.load_comboBox_items()
                                    if file_name == "":
                                        self.comboBox.Enabled = False
                                    else:
                                        self.comboBox.Enabled = True

                                    # [UI:IMPORT_BUTTON] Add import button
                                    self.import_button = Button()
                                    self.import_button.Location = Point(80, 450)
                                    self.import_button.Width = 35
                                    self.import_button.Height = 35
                                    self.import_button.Image = Icon(importexc_button()).ToBitmap()
                                    self.import_button.Click += self.import_button_clicked
                                    self.Controls.Add(self.import_button)
                                    if file_name == "":
                                        self.import_button.Enabled = True
                                    else:
                                        self.import_button.Enabled = False

                                    # [UI:CANCEL_BUTTON] Add cancel button
                                    self.cancel_button = Button()
                                    self.cancel_button.Location = Point(200, 450)
                                    self.cancel_button.Width = 35
                                    self.cancel_button.Height = 35
                                    self.cancel_button.Image = Icon(cancel_icon()).ToBitmap()
                                    self.cancel_button.Click += self.cancel_button_clicked
                                    self.Controls.Add(self.cancel_button)

                                    # [UI:RESET_BUTTON] Add reset button
                                    self.reset_button = Button()
                                    self.reset_button.Location = Point(40, 450)
                                    self.reset_button.Width = 35
                                    self.reset_button.Height = 35
                                    self.reset_button.Image = Icon(reset_icon()).ToBitmap()
                                    self.reset_button.Click += self.reset_button_clicked
                                    self.Controls.Add(self.reset_button)
                                    if file_name == "":
                                        self.reset_button.Enabled = False
                                    else:
                                        self.reset_button.Enabled = True

                                    # [UI:SET_BUTTON] Add set button
                                    self.set_button = Button()
                                    self.set_button.Location = Point(160, 450)
                                    self.set_button.Width = 35
                                    self.set_button.Height = 35
                                    self.set_button.Image = Icon(ok_icon()).ToBitmap()
                                    self.set_button.Enabled = False
                                    self.set_button.Click += self.set_button_clicked
                                    self.Controls.Add(self.set_button)

                                    # [UI:CREATED_BY_LABEL] Add created by label
                                    self.created_by_label = Label()
                                    self.created_by_label.AutoSize = True
                                    self.created_by_label.Text = "BIM Pars"
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.created_by_label.ForeColor = Color.Blue
                                    self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                    self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                    self.created_by_label.Cursor = Cursors.Hand  
                                    self.created_by_label.Click += self.Label_Click
                                    self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                                    self.Controls.Add(self.created_by_label)
                                    
                                    # [SCRIPT:INITIALIZE_DATA] Initialize data lists
                                    self.columns = []
                                    self.c1 = []
                                    self.c_names = []
                                    self.c_pname = []
                                    self.c_ptype = []
                                    self.c2 = []
                                    self.c3 = []

                                # [EVENT_HANDLER:LABEL_CLICK] Handle label click event
                                def Label_Click(self, sender, event):
                                    """
                                    This function handles the event when the "BIM Pars" label is clicked.

                                    Workflow:
                                    1. Opens the specified URL in the default web browser when the label is clicked.

                                    Key Features:
                                    - Provides a quick link to the BIM Pars website.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    url = parsweb(wurl)
                                    webbrowser.open(url)

                                # [EVENT_HANDLER:TEXTBOX_TEXT_CHANGED] Handle textbox text changed event
                                def textbox_TextChanged(self, sender, e):
                                    """
                                    This function handles the event when the text in the textbox is changed.

                                    Workflow:
                                    1. Enables the "Set" button if the textbox contains text.
                                    2. Disables the "Set" button if the textbox is empty.

                                    Key Features:
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    if self.textbox1.Text:
                                        self.label8.Text = ""
                                        self.set_button.Enabled = True
                                    else:
                                        self.set_button.Enabled = False

                                # [EVENT_HANDLER:TEXTBOX2_CHANGED] Handle textbox2 text changed event
                                def textbox2_changed(self, sender, event):
                                    """
                                    This function handles the event when the text in the second textbox is changed.

                                    Workflow:
                                    1. Reloads the items in the combo box based on the updated text in the second textbox.

                                    Key Features:
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    self.load_comboBox_items()

                                # [SCRIPT:LOAD_COMBOBOX_ITEMS] Load items into the combo box
                                def load_comboBox_items(self):
                                    """
                                    This function loads items into the combo box based on the selected Excel file and specified row/column indices.

                                    Workflow:
                                    1. Reads the specified column from the Excel file starting at the specified row.
                                    2. Populates the combo box with the values from the Excel file.
                                    3. Updates the UI to reflect the loaded items and their properties.

                                    Key Features:
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        self.label8.Text = ""
                                        self.comboBox.Enabled = True
                                        self.label6.Text = str_6(lan)
                                        self.label6.ForeColor = Color.Blue
                                        self.textbox1.Enabled = False
                                        row_index = int(self.textbox2.Text) if self.textbox2.Text else 0
                                        col_index = int(self.textbox3.Text) if self.textbox3.Text else 0
                                        if not os.path.exists(destination_dir):
                                            os.makedirs(destination_dir)
                                        excel_files = [f for f in os.listdir(destination_dir) if f.endswith('.xls') or f.endswith('.xlsx')]
                                        if len(excel_files) == 0:
                                            self.comboBox.Enabled = False
                                        else:
                                            self.comboBox.Enabled = True
                                            excel_file_path = os.path.join(destination_dir, excel_files[0])
                                            workbook = xlrd.open_workbook(excel_file_path)
                                            sheet = workbook.sheet_by_index(0)
                                            values = sheet.col_values(col_index, start_rowx=row_index)
                                            options = []
                                            for value in values:
                                                if isinstance(value, float) and value.is_integer():
                                                    options.append(int(value))
                                                else:
                                                    options.append(value)
                                            self.comboBox.Items.Clear()
                                            self.comboBox.Items.AddRange(Array[object](options))
                                            if len(options) == 0:
                                                self.label8.Text = str_28(lan)
                                                self.comboBox.Enabled = False
                                                self.label6.Text = ""

                                    except Exception as e:
                                        self.label8.Text = str_28(lan)
                                        self.comboBox.Enabled = False
                                        self.label6.Text = ""
                                        pass

                                # [EVENT_HANDLER:COMBOBOX_SELECTED_INDEX_CHANGED] Handle combo box selection change
                                def comboBox_selected_index_changed(self, sender, e):
                                    """
                                    This function handles the event when an item in the combo box is selected.

                                    Workflow:
                                    1. Updates the label to display the selected item.
                                    2. Enables the textbox for parameter input.

                                    Key Features:
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    self.label6.ForeColor = Color.Black
                                    selected_item = self.comboBox.SelectedItem
                                    if selected_item is not None:
                                        self.selected_item = str(selected_item)
                                        self.label6.Text = self.selected_item
                                        self.textbox1.Enabled = True
                                    else:
                                        self.label6.Text = ""

                                # [EVENT_HANDLER:CANCEL_BUTTON_CLICKED] Handle cancel button click
                                def cancel_button_clicked(self, sender, e):
                                    """
                                    This function handles the event when the "Cancel" button is clicked.

                                    Workflow:
                                    1. Closes the form without making any changes to the Revit model.

                                    Key Features:
                                    - Provides a quick way to exit the form without performing any actions.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        self.Close()
                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass

                                # [EVENT_HANDLER:RESET_BUTTON_CLICKED] Handle reset button click
                                def reset_button_clicked(self, sender, e):
                                    """
                                    This function handles the event when the "Reset" button is clicked.

                                    Workflow:
                                    1. Clears all input fields and resets the form to its initial state.
                                    2. Removes any imported Excel files from the destination directory.

                                    Key Features:
                                    - Provides a quick way to reset the form and start over.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        destination_dir = exlist_path()
                                        self.import_button.Enabled = True
                                        self.reset_button.Enabled = False
                                        self.set_button.Enabled = False
                                        self.textbox1.Enabled = False
                                        self.label4.Text = ""
                                        self.label3.Text = ""
                                        self.label8.Text = ""
                                        self.comboBox.Items.Clear()
                                        self.textbox1.Text = ""
                                        self.textbox2.Text = ""
                                        self.textbox3.Text = ""
                                        self.comboBox.Enabled = False
                                        self.label6.Text = ""
                                        self.textbox2.Enabled = False
                                        self.textbox3.Enabled = False
                                        if os.path.exists(destination_dir):
                                            excel_files = [f for f in os.listdir(destination_dir) if f.endswith('.xls') or f.endswith('.xlsx')]
                                            for file in excel_files:
                                                file_path = os.path.join(destination_dir, file)
                                                os.remove(file_path)
                                    except:
                                        pass

                                # [EVENT_HANDLER:IMPORT_BUTTON_CLICKED] Handle import button click
                                def import_button_clicked(self, sender, e):
                                    """
                                    This function handles the event when the "Import" button is clicked.

                                    Workflow:
                                    1. Prompts the user to select an Excel file.
                                    2. Copies the selected Excel file to the destination directory.
                                    3. Updates the UI to reflect the imported file and enables relevant controls.

                                    Key Features:
                                    - Allows users to import Excel files for parameter value setting.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    self.label6.Text = str_6(lan)
                                    self.label6.ForeColor = Color.Blue
                                    self.textbox1.Enabled = False
                                    self.comboBox.Enabled = True
                                    self.textbox2.Enabled = True
                                    self.textbox3.Enabled = True
                                    self.reset_button.Enabled = True
                                    excel_file_path = forms.pick_excel_file()
                                    if excel_file_path is None:
                                        forms.alert(str_7(lan))
                                        self.reset_button.Enabled = False
                                        return  
                                    destination_file_path = os.path.join(destination_dir, os.path.basename(excel_file_path))
                                    shutil.copy(excel_file_path, destination_file_path)
                                    self.label3.Text = os.path.basename(excel_file_path)
                                    self.import_button.Enabled = False
                                    self.load_comboBox_items()

                                # [EVENT_HANDLER:SET_BUTTON_CLICKED] Handle set button click
                                def set_button_clicked(self, sender, e):
                                    """
                                    This function handles the event when the "Set" button is clicked.

                                    Workflow:
                                    1. Sets the specified parameter value for all selected elements in the Revit model.
                                    2. Handles different parameter types (text, number, boolean) appropriately.
                                    3. Generates a report of the parameter values and their properties.
                                    4. Closes the form after completing the operation.

                                    Key Features:
                                    - Allows setting parameter values for multiple selected elements.
                                    - Updates the UI to reflect the parameter values and their properties.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    self.label4.Text = str(self.textbox1.Text)
                                    parameter_name = self.label4.Text
                                   
                                    self.label8.Text = ""
                                    output = script.get_output()
                                    selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                    doc = __revit__.ActiveUIDocument.Document
                                    c1 = int_ids(selection, doc)
                                    c_names = c_name(c1, doc)
                                    self.c1= c1
                                    self.c_names = c_names
                                    self.c_pname = [parameter_name]*len(selection)

                                    c2 = p_values(selection, parameter_name, doc)
                                    self.c2 = c2
                                    invalid_elements = []
                                    for element in elements:
                                        param = element.LookupParameter(parameter_name)
                                        if param is None:
                                            invalid_elements.append(element)
                                    if invalid_elements:
                                        element_names = ', '.join([elem.Name for elem in invalid_elements])
                                        message = str_8(lan).format(parameter_name, element_names)
                                        self.label8.Text = str_29(lan)
                                        forms.alert(message)
                                        return
                                    param_type = elements[0].LookupParameter(parameter_name).StorageType
                                    self.c_ptype = [param_type]*len(selection)

                                    # [SCRIPT:HANDLE_YESNO_PARAMETER] Handle Yes/No parameter type
                                    if param_type == DB.StorageType.Integer:
                                        value = self.label6.Text
                                        if value == "1":
                                            with DB.Transaction(doc, 'Set Parameter Value True') as transT:
                                                transT.Start()
                                                for element in elements:
                                                    paramT = element.LookupParameter(parameter_name)
                                                    if paramT is None:
                                                        continue
                                                    if paramT.StorageType == DB.StorageType.Integer:
                                                        paramT.Set(1)
                                                transT.Commit()

                                                c3 = p_values(selection, parameter_name, doc)
                                                title = str_13(lan)
                                                columns = [str_14(lan), str_15(lan), str_16(lan)]
                                                output.print_image(excel_list_sym())
                                                output.print_code(str_17(lan) + parameter_name)
                                                typ = str(param_type)
                                                output.print_code(str_18(lan) + typ)
                                                print_table_from_lists(c1, c2, c3, columns, title)
                                                self.Close()

                                        elif value == "0":
                                            with DB.Transaction(doc, 'Set Parameter Value False') as transT:
                                                transT.Start()
                                                for element in elements:
                                                    paramT = element.LookupParameter(parameter_name)
                                                    if paramT is None:
                                                        continue
                                                    if paramT.StorageType == DB.StorageType.Integer:
                                                        paramT.Set(0)
                                                transT.Commit()

                                                c3 = p_values(selection, parameter_name, doc)
                                                self.c3 = c3
                                                title = str_13(lan)
                                                columns = [str_14(lan), str_15(lan), str_16(lan)]
                                                output.print_image(excel_list_sym())
                                                output.print_code(str_17(lan) + parameter_name)
                                                typ = str(param_type)
                                                output.print_code(str_18(lan) + typ)
                                                print_table_from_lists(c1, c2, c3, columns, title)
                                                self.Close()

                                        self.label8.Text = str_25(lan)
                                        return

                                    # [UI:TASK_DIALOG] Show task dialog for parameter type
                                    title = str_9(lan)
                                    dialog = TaskDialog(title)
                                    dialog.MainContent = str_10(lan).format(param_type)
                                    dialog.TitleAutoPrefix = False
                                    dialog.AllowCancellation = True
                                    dialog.CommonButtons = TaskDialogCommonButtons.Cancel
                                    dialog.AddCommandLink(TaskDialogCommandLinkId.CommandLink1, str_11(lan))
                                    result = dialog.Show()

                                    if result == TaskDialogResult.Cancel:
                                        forms.alert(str_7(lan))
                                        return

                                    # [SCRIPT:HANDLE_PARAMETER_TYPES] Handle other parameter types
                                    if result == TaskDialogResult.CommandLink1:
                                        if param_type in {DB.StorageType.String, DB.StorageType.Integer, DB.StorageType.Double, DB.StorageType.ElementId}:
                                            while True:
                                                value = self.label6.Text
                                                if value is None:
                                                    forms.alert(str_7(lan))
                                                    return
                                                try:
                                                    with DB.Transaction(doc, 'Set Parameter Value') as trans:
                                                        trans.Start()
                                                        valid_value = True
                                                        for element in elements:
                                                            param = element.LookupParameter(parameter_name)
                                                            if param is None:
                                                                continue
                                                            if param.StorageType == DB.StorageType.String:
                                                                param.Set(value)
                                                            elif param.StorageType == DB.StorageType.Integer:
                                                                try:
                                                                    param.Set(int(value))
                                                                except ValueError:
                                                                    self.label8.Text = str_19(lan)
                                                                    valid_value = False
                                                                    break
                                                            elif param.StorageType == DB.StorageType.Double:
                                                                try:
                                                                    param.Set(float(value))
                                                                except ValueError:
                                                                    self.label8.Text = str_20(lan)
                                                                    valid_value = False
                                                                    break
                                                            elif param.StorageType == DB.StorageType.ElementId:
                                                                try:
                                                                    param.Set(DB.ElementId(int(value)))
                                                                except:
                                                                    self.label8.Text = str_21(lan)
                                                                    valid_value = False
                                                                    break
                                                        if valid_value:
                                                            trans.Commit()
                                                            c3 = p_values(selection, parameter_name, doc)
                                                            self.c3 = c3
                                                            self.columns = [str_14(lan), str_30(lan), str_31(lan), str_32(lan), str_15(lan), str_16(lan)]
                                                            self.Close()
                                                            break
                                                        else:
                                                            trans.RollBack()
                                                            break
                                                except Exception as ex:
                                                    forms.alert(str_24(lan).format(ex))
                                                    return

                            # [SCRIPT:INITIALIZE_FORM] Initialize form and show dialog
                            doc = DocumentManager.Instance.CurrentDBDocument
                            if 'form' not in globals():
                                pass
                            else:
                                form = LIST_MAKER(doc)
                                form.ShowDialog()

                    # [SCRIPT:RETURN_RESULTS] Return results for report
                    return form.columns, form.c1, form.c_names, form.c_pname ,form.c_ptype, form.c2, form.c3                

                # [SCRIPT:UNPACK_RESULTS] Unpack results from function
                headers, c1, c_names, c_pname ,c_ptype, c2, c3 = list_maker_from_excel_for_value_set()

                # [SCRIPT:CREATE_DATA] Prepare data for report
                data = [
                    c1,
                    c_names,
                    c_pname,
                    c_ptype,
                    c2,
                    c3
                ]
                editable = [False, False, False, False, False, False]
                
                # [UI:CREATE_REPORT_TAB] Create report tab
                if headers:
                    self.create_report_tab(headers, data, editable, title=button_text) 
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Batch Parameter Set using Dataset] Batch Parameter Value Set with Data Converter
        #
        # Handles batch parameter value setting using dataset IDs and categories:
        # - Sets parameter values for multiple elements using dataset IDs
        # - Converts data types for parameter values
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:BATCH_PARAMETER_SET_USING_DATASET]
        elif button_text == tool_str_40(lan):
            """
            This function handles the event when the "Batch Parameter Value Set using Dataset ID and Category with Data Convertor" button is clicked.

            Workflow:
            1. Initializes a form with multiple tabs for managing elements, categories, and data conversion.
            2. Allows users to import Excel files, set parameter values, and generate reports.
            3. Provides functionality to save, filter, and refresh data in the form.
            4. Ensures proper handling of exceptions to maintain application stability.

            Key Features:
            - Supports batch parameter value setting for multiple elements and categories.
            - Provides a user-friendly interface for managing data and generating reports.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-

                def batch_parameter_value_set_using_dataset_id_and_category_with_data_convertor():
                    # [SCRIPT:IMPORTS] Import necessary modules
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitAPIUI')
                    clr.AddReference('RevitServices')
                    clr.AddReference('System')
                    import System.Windows.Forms as WinForms
                    import System.Drawing as Drawing
                    from System.Drawing import Point, Image, Size, Color, Font, FontStyle, Icon, GraphicsUnit, Point
                    from System.Windows.Forms import RadioButton, ScrollBars, Form, Label, TextBox, Button, PictureBox, Cursors, DataGridView, DataGridViewAutoSizeColumnsMode, OpenFileDialog, DialogResult
                    from System import Array
                    from System.Collections.Generic import List
                    import Autodesk.Revit.DB as DB
                    from Autodesk.Revit.DB import ElementId, Transaction, StorageType, BuiltInCategory, FilteredElementCollector, ElementCategoryFilter, ElementId, Family
                    from RevitServices.Persistence import DocumentManager
                    from Autodesk.Revit.UI import (TaskDialog)
                    from Autodesk.Revit.DB import BuiltInCategory, FilteredElementCollector, ElementCategoryFilter, ElementId
                    from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                    import codecs
                    import xlrd
                    import csv
                    import os
                    import sys
                    import xlsxwriter 
                    import webbrowser
                    from pyrevit import forms, script, revit
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.forms.single import single_input
                    from sajdmo.scripts.pset import print_table_from_4lists, print_table_from_lists, c_name
                    from structure.root import (wurl_path, param_tasklist_icon, param_tasklist_back, param_tasklist_sym, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon, importexc_button, 
                    delete_row_button, focus_button, save_button, refresh_button, filter2_button, save_tasklist_back, convert_file_icon, convert_file_back, convert_file_back2, category_list_back, 
                    category_list_sym)
                    from UI.strings_batch_parameter_set_using_dataset import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, 
                    str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_33, str_34, str_35, str_36, str_37, str_38, 
                    str_39, str_40, str_41, str_42, str_43, str_44, str_45, str_46, str_47, str_48, str_49, str_50, str_51, str_52, str_53, str_54, str_55, str_56, str_57, str_58, str_59,str_68, 
                    str_69, str_70, str_71, str_72, str_73, str_74, str_75, str_76, str_77, str_h1, str_h2)
                    from UI.url import parsweb

                    # [SCRIPT:INITIAL_SETUP] Initialize variables
                    lan = lan_path()
                    wurl= wurl_path()

                    with forms.ProgressBar(title='', indeterminate=True):
                        # [UI:BATCH_PARAMETER_SET_FORM] Define the form
                        class BATCH_PARAMETER_SET(Form):
                            def __init__(self, doc):
                                """
                                This function initializes the form for batch parameter value setting using dataset ID and category with data conversion.

                                Workflow:
                                1. Sets up the form with a title, size, and background color.
                                2. Configures UI elements such as labels, text boxes, combo boxes, and buttons.
                                3. Implements event handlers for button clicks, text changes, and combo box selections.

                                Key Features:
                                - Provides a user-friendly interface for managing data and generating reports.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:FORM_INITIALIZATION] Initialize form properties
                                self.Text = str_1(lan)
                                self.Width = 600
                                self.Height = 725
                                self.BackColor = Color.White
                                self.doc = doc
                                self.CenterToScreen()
                                self.Icon = Drawing.Icon(param_tasklist_icon())
                                self.toolTip = WinForms.ToolTip()
                                self.tabControl = WinForms.TabControl()
                                self.tabControl.Dock = WinForms.DockStyle.Fill
                                
                                # [UI:TAB_PAGE_ELEMENT_LIST] Create element list tab
                                tabPage_element_list = WinForms.TabPage()
                                tabPage_element_list.Text = str_36(lan)
                                tabPage_element_list.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage_element_list)
                                
                                # [UI:TAB_PAGE_CATEGORY] Create category tab
                                tabPage_category = WinForms.TabPage()
                                tabPage_category.Text = str_48(lan)
                                tabPage_category.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage_category)
                                
                                # [UI:TAB_PAGE_CONVERTOR] Create convertor tab
                                tabPage_convertor = WinForms.TabPage()
                                tabPage_convertor.Text = str_37(lan)
                                tabPage_convertor.BackColor = Color.White
                                self.tabControl.TabPages.Add(tabPage_convertor)
                                
                                # [SCRIPT:INITIALIZE_REPORT_LISTS] Initialize report lists
                                self.report_element_id=[]
                                self.report_element_name=[]
                                self.report_category_of_elements=[]
                                self.report_parameter_name=[]
                                self.report_parameter_type=[]
                                self.report_parameter_previous_value=[]
                                self.report_parameter_new_value=[]
                                
                                # [UI:CREATED_BY_LABEL] Add created by label
                                self.created_by_label = Label()
                                self.created_by_label.AutoSize = True
                                self.created_by_label.Text = "BIM Pars"
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.created_by_label.ForeColor = Color.Blue
                                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                self.created_by_label.Cursor = Cursors.Hand  
                                self.created_by_label.Click += self.Label_Click
                                self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                                self.Controls.Add(self.created_by_label)

                                # [UI:ALERT_LABEL] Add alert label
                                self.alert_label = Label()
                                self.alert_label.Text = str_5(lan)
                                self.alert_label.Location = Point(200 , 30)
                                self.alert_label.AutoSize = True
                                self.alert_label.MaximumSize = Size(240,75)
                                self.alert_label.Font = Font(self.alert_label.Font, FontStyle.Bold)
                                self.Controls.Add(self.alert_label)
                                
                                # [UI:TAB1_ELEMENT_LIST] Initialize element list tab
                                self.element_list_back = PictureBox()
                                self.element_list_back.Location = Point(40, 30)
                                self.element_list_back.Size = Size(96, 96)
                                image = Image.FromFile(param_tasklist_back())
                                self.element_list_back.Image = image
                                tabPage_element_list.Controls.Add(self.element_list_back)
                                self.element_list_back.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                                
                                # [UI:DATAGRIDVIEW_ELEMENT_LIST] Create DataGridView for element list
                                self.dataGridView_element_list = DataGridView()
                                self.dataGridView_element_list.ColumnCount = 4
                                self.dataGridView_element_list.Columns[0].Name = str_3(lan)
                                self.dataGridView_element_list.Columns[1].Name = str_4(lan)
                                self.dataGridView_element_list.Columns[2].Name = str_6(lan)
                                self.dataGridView_element_list.Columns[3].Name = str_8(lan)
                                self.dataGridView_element_list.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill
                                self.dataGridView_element_list.AllowUserToAddRows = False 
                                self.dataGridView_element_list.Location = Point(40, 150)
                                self.dataGridView_element_list.Width = self.Width-100
                                self.dataGridView_element_list.Height = 400
                                self.dataGridView_element_list.Columns[0].ReadOnly = True
                                self.dataGridView_element_list.Columns[1].ReadOnly = False
                                self.dataGridView_element_list.Columns[2].ReadOnly = False
                                self.dataGridView_element_list.Columns[3].ReadOnly = True
                                for _ in range(0):
                                    self.dataGridView_element_list.Rows.Add("", "", "")
                                tabPage_element_list.Controls.Add(self.dataGridView_element_list)
                                
                                # [UI:BUTTONS_ELEMENT_LIST] Add buttons for element list tab
                                self.import_data_button_element_list = Button()
                                self.import_data_button_element_list.Width = 35
                                self.import_data_button_element_list.Height = 35
                                self.import_data_button_element_list.Location = Point(40, 575)
                                self.import_data_button_element_list.Image = Icon(importexc_button()).ToBitmap()
                                self.import_data_button_element_list.Click += self.import_data_button_element_list_Click 
                                tabPage_element_list.Controls.Add(self.import_data_button_element_list)
                                #self.toolTip.SetToolTip(self.import_data_button_element_list, "Load data from Excel")
                                
                                self.deleterow_button_element_list = Button()
                                self.deleterow_button_element_list.Width = 35
                                self.deleterow_button_element_list.Height = 35
                                self.deleterow_button_element_list.Location = Point(465, 575)#80
                                self.deleterow_button_element_list.Image = Icon(delete_row_button()).ToBitmap()
                                self.deleterow_button_element_list.Click += self.deleterow_button_element_list_Click 
                                tabPage_element_list.Controls.Add(self.deleterow_button_element_list)
                                #self.toolTip.SetToolTip(self.deleterow_button_element_list, "Delete selected row")
                                
                                self.set_button_element_list = Button()
                                self.set_button_element_list.Location = Point(250, 575)#120
                                self.set_button_element_list.Width = 35
                                self.set_button_element_list.Height = 35
                                self.set_button_element_list.Image = Icon(ok_icon()).ToBitmap()
                                self.set_button_element_list.Click += self.p_value2_element_list 
                                self.set_button_element_list.Click += self.set_button_element_list_clicked 
                                self.set_button_element_list.Click += self.select_all_visible_ids_element_list_Click 
                                self.set_button_element_list.Click += self.p_value3_element_list 
                                self.set_button_element_list.Click += self.report_element_list 
                                self.set_button_element_list.Enabled = False
                                tabPage_element_list.Controls.Add(self.set_button_element_list)
                                #self.toolTip.SetToolTip(self.set_button_element_list, "Set parameters from the list")
                                
                                self.cancel_button_element_list = Button()
                                self.cancel_button_element_list.Location = Point(290, 575)
                                self.cancel_button_element_list.Width = 35
                                self.cancel_button_element_list.Height = 35
                                self.cancel_button_element_list.Image = Icon(cancel_icon()).ToBitmap()
                                self.cancel_button_element_list.Click += self.cancel_button_clicked 
                                tabPage_element_list.Controls.Add(self.cancel_button_element_list)
                                #self.toolTip.SetToolTip(self.cancel_button_element_list, "Cancel the operation")
                                
                                self.focus_button_element_list = Button()
                                self.focus_button_element_list.Location = Point(425, 575)
                                self.focus_button_element_list.Width = 35
                                self.focus_button_element_list.Height = 35
                                self.focus_button_element_list.Image = Icon(focus_button()).ToBitmap()
                                self.focus_button_element_list.Click += self.focus_button_element_list_clicked 
                                self.focus_button_element_list.Click += self.select_button_element_list_Click 
                                tabPage_element_list.Controls.Add(self.focus_button_element_list)
                                #self.toolTip.SetToolTip(self.focus_button_element_list, "Focus on selected elements")
                                
                                self.save_button_element_list = Button()
                                self.save_button_element_list.Location = Point(80, 575)#270
                                self.save_button_element_list.Width = 35
                                self.save_button_element_list.Height = 35
                                self.save_button_element_list.Image = Icon(save_button()).ToBitmap()
                                self.save_button_element_list.Click += self.save_button_element_list_Click 
                                tabPage_element_list.Controls.Add(self.save_button_element_list)
                                #self.toolTip.SetToolTip(self.save_button_element_list, "Save the current data")
                                
                                self.check_button_element_list = Button()
                                self.check_button_element_list.Location = Point(120, 575)#270
                                self.check_button_element_list.Width = 35
                                self.check_button_element_list.Height = 35
                                self.check_button_element_list.Image = Icon(refresh_button()).ToBitmap()
                                self.check_button_element_list.Click += self.check_button_element_list_Click 
                                tabPage_element_list.Controls.Add(self.check_button_element_list)
                                #self.toolTip.SetToolTip(self.check_button_element_list, "Refresh the data")
                                
                                self.filter_button_element_list = Button()
                                self.filter_button_element_list.Location = Point(505, 575)
                                self.filter_button_element_list.Width = 35
                                self.filter_button_element_list.Height = 35
                                self.filter_button_element_list.Image = Icon(filter2_button()).ToBitmap()
                                self.filter_button_element_list.Click += self.filter_button_element_list_Click 
                                tabPage_element_list.Controls.Add(self.filter_button_element_list)
                                #self.toolTip.SetToolTip(self.filter_button_element_list, "Filter the data")
                                
                                # [UI:LABELS_ELEMENT_LIST] Add labels for element list tab
                                self.dataname_element_list = Label()
                                self.dataname_element_list.Text = str_2(lan)
                                self.dataname_element_list.Location = Point(40, 620)
                                self.dataname_element_list.AutoSize = True
                                self.dataname_element_list.Font = Font(self.dataname_element_list.Font, FontStyle.Bold)
                                tabPage_element_list.Controls.Add(self.dataname_element_list)
                                
                                self.name = Label()
                                self.name.Text = ""
                                self.name.Location = Point(self.dataname_element_list.Width +50, 620)
                                self.name.AutoSize = True
                                self.name.ForeColor = Color.Black
                                self.name.MaximumSize = Size(240,240)
                                tabPage_element_list.Controls.Add(self.name)
                                
                                self.alert_element_list = TextBox()
                                self.alert_element_list.Multiline = True
                                self.alert_element_list.ScrollBars = ScrollBars.Vertical  
                                self.alert_element_list.Text = ""
                                self.alert_element_list.Location = Point(200, 50)  
                                self.alert_element_list.Size = Size(340, 75) 
                                self.alert_element_list.ForeColor = Drawing.Color.Red
                                self.alert_element_list.BackColor = Drawing.Color.White 
                                self.alert_element_list.ReadOnly = True  
                                tabPage_element_list.Controls.Add(self.alert_element_list)
                                
                                self.element_count_element_list = Label()
                                self.element_count_element_list.Text = ""
                                self.element_count_element_list.Location = Point(425 , 620)
                                self.element_count_element_list.AutoSize = True
                                self.element_count_element_list.ForeColor = Color.Blue
                                self.element_count_element_list.MaximumSize = Size(240,75)
                                self.element_count_element_list.Font = Font(self.element_count_element_list.Font, FontStyle.Bold)
                                tabPage_element_list.Controls.Add(self.element_count_element_list)
                                self.Controls.Add(self.tabControl)
                                
                                # [UI:TAB2_CATEGORY] Initialize category tab
                                self.category_back = PictureBox()
                                self.category_back.Location = Point(40, 30)
                                self.category_back.Size = Size(96, 96)
                                image = Image.FromFile(category_list_back())
                                self.category_back.Image = image
                                tabPage_category.Controls.Add(self.category_back)
                                
                                # [UI:DATAGRIDVIEW_CATEGORY] Create DataGridView for category tab
                                self.dataGridView_category = DataGridView()
                                self.dataGridView_category.ColumnCount = 5
                                self.dataGridView_category.Columns[0].Name = str_46(lan)
                                self.dataGridView_category.Columns[1].Name = str_4(lan)
                                self.dataGridView_category.Columns[2].Name = str_6(lan)
                                self.dataGridView_category.Columns[3].Name = str_8(lan)
                                self.dataGridView_category.Columns[4].Name = str_47(lan)
                                self.dataGridView_category.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill
                                self.dataGridView_category.AllowUserToAddRows = False 
                                self.dataGridView_category.Location = Point(40, 150)
                                self.dataGridView_category.Width = 500
                                self.dataGridView_category.Height = 400
                                self.dataGridView_category.Columns[0].ReadOnly = True
                                self.dataGridView_category.Columns[1].ReadOnly = False
                                self.dataGridView_category.Columns[2].ReadOnly = False
                                self.dataGridView_category.Columns[3].ReadOnly = True
                                self.dataGridView_category.Columns[4].ReadOnly = True
                                for _ in range(0):
                                    self.dataGridView_category.Rows.Add("", "", "")
                                tabPage_category.Controls.Add(self.dataGridView_category)
                                
                                # [UI:BUTTONS_CATEGORY] Add buttons for category tab
                                self.cancel_button_category = Button()
                                self.cancel_button_category.Location = Point(290, 575)
                                self.cancel_button_category.Width = 35
                                self.cancel_button_category.Height = 35
                                self.cancel_button_category.Image = Icon(cancel_icon()).ToBitmap()
                                self.cancel_button_category.Click += self.cancel_button_clicked 
                                tabPage_category.Controls.Add(self.cancel_button_category)
                                #self.toolTip.SetToolTip(self.cancel_button_category, "exit")

                                self.import_data_button = Button()
                                self.import_data_button.Width = 35
                                self.import_data_button.Height = 35
                                self.import_data_button.Location = Point(40, 575)
                                self.import_data_button.Image = Icon(importexc_button()).ToBitmap()
                                self.import_data_button.Click += self.import_data_button_category_Click 
                                tabPage_category.Controls.Add(self.import_data_button)
                                #self.toolTip.SetToolTip(self.import_data_button, "Load data from Excel")
                                
                                self.deleterow_button_category = Button()
                                self.deleterow_button_category.Width = 35
                                self.deleterow_button_category.Height = 35
                                self.deleterow_button_category.Location = Point(465, 575)#80
                                self.deleterow_button_category.Image = Icon(delete_row_button()).ToBitmap()
                                self.deleterow_button_category.Click += self.deleterow_button_category_Click 
                                tabPage_category.Controls.Add(self.deleterow_button_category)
                                #self.toolTip.SetToolTip(self.deleterow_button_category, "delete")
                                
                                self.set_button_category = Button()
                                self.set_button_category.Location = Point(250, 575)#120
                                self.set_button_category.Width = 35
                                self.set_button_category.Height = 35
                                self.set_button_category.Image = Icon(ok_icon()).ToBitmap()
                                self.set_button_category.Click += self.set_button_category_Click 
                                self.set_button_category.Enabled = False
                                tabPage_category.Controls.Add(self.set_button_category)
                                
                                # [SCRIPT:INITIALIZE_SUCCESSFUL_LISTS] Initialize lists for successful operations
                                self.successful_element_ids_category = set() 
                                self.successful_categories_category = []
                                self.successful_parameters_category = []
                                self.successful_values_category = []
                                #self.toolTip.SetToolTip(self.set_button_category, "set")
                                
                                # [UI:BUTTONS_CATEGORY] Add focus button for category tab
                                self.focus_button_category = Button()
                                self.focus_button_category.Location = Point(425, 575)
                                self.focus_button_category.Width = 35
                                self.focus_button_category.Height = 35
                                self.focus_button_category.Image = Icon(focus_button()).ToBitmap()
                                self.focus_button_category.Click += self.focus_button_category_Click 
                                self.focus_button_category.Click += self.select_button_category_Click 
                                tabPage_category.Controls.Add(self.focus_button_category)
                                #self.toolTip.SetToolTip(self.focus_button_category, "focus")
                                
                                # [UI:BUTTONS_CATEGORY] Add save button for category tab
                                self.save_button_category = Button()
                                self.save_button_category.Location = Point(80, 575)#270
                                self.save_button_category.Width = 35
                                self.save_button_category.Height = 35
                                self.save_button_category.Image = Icon(save_button()).ToBitmap()
                                self.save_button_category.Click += self.save_button_category_Click 
                                tabPage_category.Controls.Add(self.save_button_category)
                                #self.toolTip.SetToolTip(self.save_button_category, "save")
                                
                                # [UI:BUTTONS_CATEGORY] Add check button for category tab
                                self.check_button_category = Button()
                                self.check_button_category.Location = Point(120, 575)#270
                                self.check_button_category.Width = 35
                                self.check_button_category.Height = 35
                                self.check_button_category.Image = Icon(refresh_button()).ToBitmap()
                                self.check_button_category.Click += self.check_button_category_Click 
                                tabPage_category.Controls.Add(self.check_button_category)
                                #self.toolTip.SetToolTip(self.check_button_category, "refresh")
                                
                                # [UI:BUTTONS_CATEGORY] Add filter button for category tab
                                self.filter_button_category = Button()
                                self.filter_button_category.Location = Point(505, 575)
                                self.filter_button_category.Width = 35
                                self.filter_button_category.Height = 35
                                self.filter_button_category.Image = Icon(filter2_button()).ToBitmap()
                                self.filter_button_category.Click += self.filter_button_category_Click 
                                tabPage_category.Controls.Add(self.filter_button_category)
                                #self.toolTip.SetToolTip(self.filter_button_category, "filter")
                                
                                # [UI:LABELS_CATEGORY] Add labels for category tab
                                self.dataname_category = Label()
                                self.dataname_category.Text = str_2(lan)
                                self.dataname_category.Location = Point(40, 620)
                                self.dataname_category.AutoSize = True
                                self.dataname_category.Font = Font(self.dataname_category.Font, FontStyle.Bold)
                                tabPage_category.Controls.Add(self.dataname_category)
                                
                                self.name_category = Label()
                                self.name_category.Text = ""
                                self.name_category.Location = Point(self.dataname_category.Width +50, 620)
                                self.name_category.AutoSize = True
                                self.name_category.ForeColor = Color.Black
                                self.name_category.MaximumSize = Size(240,240)
                                tabPage_category.Controls.Add(self.name_category)
                                
                                self.alert_category = TextBox()
                                self.alert_category.Multiline = True
                                self.alert_category.ScrollBars = ScrollBars.Vertical  
                                self.alert_category.Text = ""
                                self.alert_category.Location = Point(200, 50)  
                                self.alert_category.Size = Size(340, 75)  
                                self.alert_category.ForeColor = Drawing.Color.Red
                                self.alert_category.BackColor = Drawing.Color.White  
                                self.alert_category.ReadOnly = True  
                                tabPage_category.Controls.Add(self.alert_category)
                                
                                self.element_count_category = Label()
                                self.element_count_category.Text = ""
                                self.element_count_category.Location = Point(425 , 620)
                                self.element_count_category.AutoSize = True
                                self.element_count_category.ForeColor = Color.Blue
                                self.element_count_category.MaximumSize = Size(240,75)
                                self.element_count_category.Font = Font(self.element_count_category.Font, FontStyle.Bold)
                                tabPage_category.Controls.Add(self.element_count_category)
                                
                                # [UI:TAB3_CONVERTOR] Initialize convertor tab
                                self.convertor_back = PictureBox()
                                self.convertor_back.Location = Point(40, 30)
                                self.convertor_back.Size = Size(96, 96)
                                image = Image.FromFile(convert_file_back())
                                self.convertor_back.Image = image
                                tabPage_convertor.Controls.Add(self.convertor_back)
                                
                                # [UI:BUTTONS_CONVERTOR] Add buttons for convertor tab
                                self.convert_button_id_list = Button()
                                self.convert_button_id_list.Text = str_68(lan)
                                self.convert_button_id_list.Location = Point(50, 180)
                                self.convert_button_id_list.Size = Size(475, 40)
                                self.convert_button_id_list.Click += lambda sender, event: self.convert_xlsx_to_txt_id_list()  
                                tabPage_convertor.Controls.Add(self.convert_button_id_list)
                                
                                self.convert_button_category_list = Button()
                                self.convert_button_category_list.Text = str_69(lan)
                                self.convert_button_category_list.Location = Point(50, 240)
                                self.convert_button_category_list.Size = Size(475, 40)
                                self.convert_button_category_list.Click += lambda sender, event: self.convert_xlsx_to_txt_category_list()  
                                tabPage_convertor.Controls.Add(self.convert_button_category_list)
                                
                                self.convert_button_csv_id_list = Button()
                                self.convert_button_csv_id_list.Text = str_70(lan)
                                self.convert_button_csv_id_list.Location = Point(50, 300)
                                self.convert_button_csv_id_list.Size = Size(475, 40)
                                self.convert_button_csv_id_list.Click += lambda sender, event: self.convert_csv_to_txt_id_list()  
                                tabPage_convertor.Controls.Add(self.convert_button_csv_id_list)
                                
                                self.convert_button_csv_category_list = Button()
                                self.convert_button_csv_category_list.Text = str_71(lan)
                                self.convert_button_csv_category_list.Location = Point(50, 360)
                                self.convert_button_csv_category_list.Size = Size(475, 40)
                                self.convert_button_csv_category_list.Click += lambda sender, event: self.convert_csv_to_txt_category_list()  
                                tabPage_convertor.Controls.Add(self.convert_button_csv_category_list)
                                
                                # [UI:ALERT_CONVERTOR] Add alert textbox for convertor tab
                                self.alert_convert = TextBox()
                                self.alert_convert.Multiline = True
                                self.alert_convert.ScrollBars = ScrollBars.Vertical
                                self.alert_convert.ForeColor = Drawing.Color.Black
                                self.alert_convert.Text = str_40(lan)
                                self.alert_convert.Location = Point(200, 50)
                                self.alert_convert.Size = Size(340, 75)
                                self.alert_convert.BackColor = Drawing.Color.White
                                self.alert_convert.ReadOnly = True
                                tabPage_convertor.Controls.Add(self.alert_convert)
                            
                            # [EVENT_HANDLER:CANCEL_BUTTON] Handle cancel button click
                            def cancel_button_clicked(self, sender, e):  
                                """
                                This function handles the event when the "Cancel" button is clicked.

                                Workflow:
                                1. Closes the form without making any changes to the Revit model.

                                Key Features:
                                - Provides a quick way to exit the form without performing any actions.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    self.Close()
                                except StopIteration:
                                    pass
                                except Exception:
                                    pass            
                                except SystemExit:
                                    pass

                            # [EVENT_HANDLER:LABEL_CLICK] Handle label click event
                            def Label_Click(self, sender, event):  
                                """
                                This function handles the event when the "BIM Pars" label is clicked.

                                Workflow:
                                1. Opens the specified URL in the default web browser when the label is clicked.

                                Key Features:
                                - Provides a quick link to the BIM Pars website.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                url = parsweb(wurl)
                                webbrowser.open(url)
                            
                            # [SCRIPT:CONVERT_CSV_TO_TXT_ID_LIST] Convert CSV to text file for ID list
                            def convert_csv_to_txt_id_list(self):
                                """
                                This function converts a CSV file to a text file for Element ID List.

                                Workflow:
                                1. Prompts the user to select a CSV file.
                                2. Converts the CSV data into a formatted text file.
                                3. Saves the converted file in the same directory as the original CSV file.

                                Key Features:
                                - Provides a user-friendly interface for converting CSV files to text files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_17, str_18, str_42, str_43, str_44, str_45
                                open_file_dialog = OpenFileDialog()
                                open_file_dialog.Filter = "CSV Files (*.csv)|*.csv"
                                if open_file_dialog.ShowDialog() == DialogResult.OK:
                                    file_path = open_file_dialog.FileName
                                    directory = os.path.dirname(file_path)
                                    icon_path = convert_file_icon()
                                    search_image_path = convert_file_back2()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_17(lan)
                                    url = parsweb(wurl)
                                    window_name = str_18(lan)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None or "":
                                        user_input = "Converted_CSV_ID_List.txt"
                                        converted_file_name = user_input
                                    else:
                                        converted_file_name = user_input + ".txt"
                                    output_path = os.path.join(directory, converted_file_name)  
                                    try:
                                        data_written = False
                                        with open(file_path, "r") as csv_file:  
                                            reader = csv.reader(csv_file, delimiter=';')
                                            header = next(reader)  
                                            lines = []  
                                            with open(output_path, "w") as txt_file:  
                                                data_written = False
                                                for row_index, row in enumerate(reader, start=1):  
                                                    if len(row) >= 3:
                                                        column1 = self.format_value(row[0].strip())
                                                        column2 = self.format_value(row[1].strip())
                                                        column3 = self.format_value(row[2].strip())
                                                        line = "r{}_#i[{}]_#p[{}]_#v[{}]".format(row_index, column1, column2, column3)
                                                        lines.append(line)
                                                        data_written = True
                                                if data_written:
                                                    txt_file.write("%ID_PARAM_VALUE#//\n")
                                                    txt_file.write("\n".join(lines))
                                                    txt_file.write("\n//")
                                        if not data_written:
                                            self.alert_convert.ForeColor = Drawing.Color.Red
                                            self.alert_convert.Text = str_42(lan)
                                        else:
                                            self.alert_convert.ForeColor = Drawing.Color.Green
                                            self.alert_convert.Text = str_43(lan) + output_path
                                    except Exception as e:
                                        self.alert_convert.ForeColor = Drawing.Color.Red
                                        self.alert_convert.Text = str_44(lan) + str(e) + "\n"
                                else:
                                    self.alert_convert.ForeColor = Drawing.Color.Black
                                    self.alert_convert.Text = str_45(lan)

                            # [SCRIPT:FORMAT_VALUE] Format a given value for consistency
                            def format_value(self, value):
                                """
                                This function formats a given value for consistency in the output file.

                                Workflow:
                                1. Attempts to convert the value to a float.
                                2. If the value is an integer, converts it to an integer string.
                                3. If the value is a float, keeps it as a float string.
                                4. If the value is empty, returns 'EMPTY'.
                                5. If the value cannot be converted to a float, returns it as a string.

                                Key Features:
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    value = value.strip()  
                                    if value == '':
                                        return 'EMPTY'  
                                    float_value = float(value)
                                    if float_value.is_integer():
                                        return str(int(float_value))  
                                    else:
                                        return str(float_value)  
                                except ValueError:
                                    return value  
                                    
                            # [SCRIPT:CONVERT_XLSX_TO_TXT_ID_LIST] Convert Excel to text file for ID list
                            def convert_xlsx_to_txt_id_list(self):
                                """
                                This function converts an Excel file to a text file for Element ID List.

                                Workflow:
                                1. Prompts the user to select an Excel file.
                                2. Converts the Excel data into a formatted text file.
                                3. Saves the converted file in the same directory as the original Excel file.

                                Key Features:
                                - Provides a user-friendly interface for converting Excel files to text files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_17, str_18, str_43, str_44, str_45
                                open_file_dialog = OpenFileDialog()
                                open_file_dialog.Filter = "Excel Files (*.xlsx)|*.xlsx"
                                if open_file_dialog.ShowDialog() == DialogResult.OK:
                                    file_path = open_file_dialog.FileName
                                    workbook = xlrd.open_workbook(file_path)
                                    sheet = workbook.sheet_by_index(0)
                                    directory = os.path.dirname(file_path) 
                                    icon_path = convert_file_icon()
                                    search_image_path = convert_file_back2()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_17(lan)
                                    url = parsweb(wurl)
                                    window_name = str_18(lan)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None or "":
                                        user_input = "Converted_XLSX_ID_List.txt"
                                        converted_file_name = user_input
                                    else:
                                        converted_file_name = user_input + ".txt"
                                    output_path = os.path.join(directory, converted_file_name)  
                                    lines = []  
                                    try:
                                        for row_idx in range(1, sheet.nrows):  
                                            row = sheet.row(row_idx)
                                            if len(row) >= 3:
                                                column1 = self.format_value(row[0].value)
                                                column2 = self.format_value(row[1].value)
                                                column3 = self.format_value(row[2].value)
                                                line = "r{}_#i[{}]_#p[{}]_#v[{}]".format(row_idx, column1, column2, column3)
                                                lines.append(line)
                                        with open(output_path, "w") as txt_file:
                                            if lines:
                                                txt_file.write("%ID_PARAM_VALUE#//\n")
                                                txt_file.write("\n".join(lines))
                                                txt_file.write("\n//")
                                        self.alert_convert.ForeColor = Drawing.Color.Green
                                        self.alert_convert.Text = str_43(lan) + output_path
                                    except Exception as e:
                                        self.alert_convert.ForeColor = Drawing.Color.Red
                                        self.alert_convert.Text = str_44(lan) + str(e) + "\n"
                                else:
                                    self.alert_convert.ForeColor = Drawing.Color.Black
                                    self.alert_convert.Text = str_45(lan)

                            # [SCRIPT:FORMAT_VALUE] Format a given value based on its type
                            def format_value(self, value):
                                """
                                This function formats a given value based on its type.

                                Workflow:
                                1. If the value is a float, checks if it is an integer and converts it to an integer string if true.
                                2. If the value is a float with a decimal part, keeps it as a float string.
                                3. For all other types, converts the value to a string.

                                Key Features:
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if isinstance(value, float):
                                    if value.is_integer():
                                        return str(int(value))  
                                    else:
                                        return str(value)  
                                else:
                                    return str(value)  

                            # [SCRIPT:CONVERT_CSV_TO_TXT_CATEGORY_LIST] Convert CSV to text file for category list
                            def convert_csv_to_txt_category_list(self):
                                """
                                This function converts a CSV file to a text file for Category List.

                                Workflow:
                                1. Prompts the user to select a CSV file.
                                2. Converts the CSV data into a formatted text file.
                                3. Saves the converted file in the same directory as the original CSV file.

                                Key Features:
                                - Provides a user-friendly interface for converting CSV files to text files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_17, str_18, str_42, str_43, str_44, str_45
                                open_file_dialog = OpenFileDialog()
                                open_file_dialog.Filter = "CSV Files (*.csv)|*.csv"
                                if open_file_dialog.ShowDialog() == DialogResult.OK:
                                    file_path = open_file_dialog.FileName
                                    directory = os.path.dirname(file_path)
                                    icon_path = convert_file_icon()
                                    search_image_path = convert_file_back2()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_17(lan)
                                    url = parsweb(wurl)
                                    window_name = str_18(lan)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None or "":
                                        user_input = "Converted_CSV_Category_List.txt"
                                        converted_file_name = user_input
                                    else:
                                        converted_file_name = user_input + ".txt"
                                    output_path = os.path.join(directory, converted_file_name)  
                                    try:
                                        data_written = False
                                        with open(file_path, "r") as csv_file: 
                                            reader = csv.reader(csv_file, delimiter=';')
                                            header = next(reader)  
                                            lines = []  
                                            with open(output_path, "w") as txt_file:  
                                                data_written = False
                                                for row_index, row in enumerate(reader, start=1):  
                                                    if len(row) >= 3:
                                                        column1 = self.format_value(row[0].strip())
                                                        column2 = self.format_value(row[1].strip())
                                                        column3 = self.format_value(row[2].strip())
                                                        # Format the line and add it to the list
                                                        line = "r{}_#c[{}]_#p[{}]_#v[{}]".format(row_index, column1, column2, column3)
                                                        lines.append(line)
                                                        data_written = True
                                                if data_written:
                                                    txt_file.write("%CATEGORY_PARAM_VALUE#//\n")
                                                    txt_file.write("\n".join(lines))
                                                    txt_file.write("\n//")
                                        if not data_written:
                                            self.alert_convert.ForeColor = Drawing.Color.Red
                                            self.alert_convert.Text = str_42(lan)
                                        else:
                                            self.alert_convert.ForeColor = Drawing.Color.Green
                                            self.alert_convert.Text = str_43(lan) + output_path
                                    except Exception as e:
                                        self.alert_convert.ForeColor = Drawing.Color.Red
                                        self.alert_convert.Text = str_44(lan) + str(e) + "\n"
                                else:
                                    self.alert_convert.ForeColor = Drawing.Color.Black
                                    self.alert_convert.Text = str_45(lan)

                            # [SCRIPT:CONVERT_XLSX_TO_TXT_CATEGORY_LIST] Convert Excel to text file for category list
                            def convert_xlsx_to_txt_category_list(self):
                                """
                                This function converts an Excel file to a text file for Category List.

                                Workflow:
                                1. Prompts the user to select an Excel file.
                                2. Converts the Excel data into a formatted text file.
                                3. Saves the converted file in the same directory as the original Excel file.

                                Key Features:
                                - Provides a user-friendly interface for converting Excel files to text files.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_17, str_18, str_43, str_44, str_45
                                open_file_dialog = OpenFileDialog()
                                open_file_dialog.Filter = "Excel Files (*.xlsx)|*.xlsx"
                                if open_file_dialog.ShowDialog() == DialogResult.OK:
                                    file_path = open_file_dialog.FileName
                                    workbook = xlrd.open_workbook(file_path)
                                    sheet = workbook.sheet_by_index(0)
                                    directory = os.path.dirname(file_path)
                                    icon_path = convert_file_icon()
                                    search_image_path = convert_file_back2()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_17(lan)
                                    url = parsweb(wurl)
                                    window_name = str_18(lan)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None or "":   
                                        user_input = "Converted_XLSX_Category_List.txt"
                                        converted_file_name = user_input
                                    else:
                                        converted_file_name = user_input + ".txt"
                                    output_path = os.path.join(directory, converted_file_name)  
                                    lines = [] 
                                    try:
                                        for row_idx in range(1, sheet.nrows):  
                                            row = sheet.row(row_idx)
                                            if len(row) >= 3:
                                                column1 = self.format_value(row[0].value)
                                                column2 = self.format_value(row[1].value)
                                                column3 = self.format_value(row[2].value)
                                                line = "r{}_#c[{}]_#p[{}]_#v[{}]".format(row_idx, column1, column2, column3)
                                                lines.append(line)
                                        with open(output_path, "w") as txt_file:
                                            if lines:
                                                txt_file.write("%CATEGORY_PARAM_VALUE#//\n")
                                                txt_file.write("\n".join(lines))
                                                txt_file.write("\n//")
                                        self.alert_convert.ForeColor = Drawing.Color.Green
                                        self.alert_convert.Text = str_43(lan) + output_path
                                    except Exception as e:
                                        self.alert_convert.ForeColor = Drawing.Color.Red
                                        self.alert_convert.Text = str_44(lan) + str(e) + "\n"
                                else:
                                    self.alert_convert.ForeColor = Drawing.Color.Black
                                    self.alert_convert.Text = str_45(lan)

                            # [EVENT_HANDLER:CHECK_BUTTON_ELEMENT_LIST] Handle check button click for element list
                            def check_button_element_list_Click(self, sender, event_args):
                                """
                                This function handles the event when the "Refresh" button is clicked in the Element List tab.

                                Workflow:
                                1. Retrieves and updates the parameter types for the elements in the list.

                                Key Features:
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.retrieve_parameter_types_element_list()

                            # [EVENT_HANDLER:SET_BUTTON_ELEMENT_LIST] Handle set button click for element list
                            def set_button_element_list_clicked(self, sender, event_args):
                                """
                                This function handles the event when the "Set" button is clicked in the Element List tab.

                                Workflow:
                                1. Retrieves and updates the parameter types for the elements in the list.
                                2. Sets the parameter values for the selected elements in the Revit model.
                                3. Marks rows as successful or skipped based on the outcome of the operation.

                                Key Features:
                                - Provides a user-friendly interface for setting parameter values for multiple elements.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_7
                                self.alert_element_list.Text = ""
                                self.retrieve_parameter_types_element_list()
                                doc = revit.doc
                                try:
                                    with Transaction(doc, 'Set Parameters from DataGridView') as trans:
                                        trans.Start()
                                        for row in self.dataGridView_element_list.Rows:
                                            if row.IsNewRow:
                                                continue  
                                            element_id_str = str(row.Cells[0].Value)
                                            parameter_name = str(row.Cells[1].Value)
                                            parameter_value = str(row.Cells[2].Value)
                                            if element_id_str.isdigit():
                                                element_id = ElementId(int(element_id_str))
                                                element = doc.GetElement(element_id)
                                                if element:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param:
                                                        try:
                                                            if param.StorageType == StorageType.String:
                                                                param.Set(parameter_value)
                                                            elif param.StorageType == StorageType.Double:
                                                                double_value = float(parameter_value)
                                                                param.Set(double_value)
                                                            elif param.StorageType == StorageType.Integer:
                                                                int_value = int(parameter_value)
                                                                param.Set(int_value)
                                                            elif param.StorageType == StorageType.ElementId:
                                                                if parameter_value.isdigit():
                                                                    param.Set(ElementId(int(parameter_value)))
                                                            for cell in row.Cells:
                                                                cell.Style.BackColor = Color.Green
                                                        except Exception as e:
                                                            for cell in row.Cells:
                                                                cell.Style.BackColor = Color.Red
                                                            self.alert_element_list.ForeColor = Drawing.Color.Red
                                                            self.alert_element_list.Text = str_7(lan).format(parameter_name, element_id_str, str(e))
                                                    else:
                                                        for cell in row.Cells:
                                                            cell.Style.BackColor = Color.Red
                                                else:
                                                    for cell in row.Cells:
                                                        cell.Style.BackColor = Color.Red
                                            else:
                                                for cell in row.Cells:
                                                    cell.Style.BackColor = Color.Red
                                        trans.Commit()
                                except Exception as e:
                                    pass

                            # [SCRIPT:P_VALUE2_ELEMENT_LIST] Retrieve and store parameter values and element properties
                            def p_value2_element_list(self, sender, event_args):
                                """
                                This function retrieves and stores parameter values, element names, categories, and parameter storage types for the elements in the Element List tab.

                                Workflow:
                                1. Loops through each row in the DataGridView to retrieve element IDs, parameter names, and values.
                                2. Retrieves and stores the element names, categories, and parameter storage types for each element.
                                3. Handles exceptions and errors gracefully to ensure the function continues processing.

                                Key Features:
                                - Provides a user-friendly interface for retrieving and storing parameter values and element properties.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_72, str_73, str_74, str_75, str_76, str_77
                                doc = revit.doc
                                output = script.get_output()
                                ids = []
                                parameters = []
                                values = []
                                combined = []
                                linkified_ids = []
                                int_ids_list=[]
                                for row in self.dataGridView_element_list.Rows:
                                    if row.IsNewRow:
                                        continue  
                                    element_id_str = str(row.Cells[0].Value)
                                    parameter_name = str(row.Cells[1].Value)
                                    if element_id_str.isdigit(): 
                                        try:
                                            element_id = ElementId(int(element_id_str))
                                            element = doc.GetElement(element_id)
                                            if element:
                                                param = element.LookupParameter(parameter_name)
                                                if param:
                                                    param_value = param.AsValueString() 
                                                    ids.append(element_id_str)
                                                    parameters.append(parameter_name)
                                                    values.append(param_value)
                                                    combined.append('{0}, {1}, {2}'.format(element_id_str, parameter_name, param_value))
                                                    linkified_ids.append(output.linkify(element_id))
                                                    int_ids_list.append(str(element_id))
                                                    
                                        except Exception:
                                            continue

                                self.ids = ids
                                self.parameters = parameters
                                self.values = values
                                self.combined = combined
                                self.linkified_ids = linkified_ids
                                doc = __revit__.ActiveUIDocument.Document
                                self.report_element_id = int_ids_list
                                self.report_element_name = []
                                self.report_category_of_elements = []  
                                self.report_parameter_type = []  
                                for int_id in int_ids_list:
                                    try:
                                        int_id = int(int_id)  
                                        element = doc.GetElement(ElementId(int_id))  
                                        if element is not None:
                                            self.report_element_name.append(element.Name)  
                                            category = element.Category
                                            if category is not None:
                                                self.report_category_of_elements.append(category.Name)  
                                            else:
                                                self.report_category_of_elements.append(str_72(lan))  
                                            for param_name in self.parameters:  
                                                param = element.LookupParameter(param_name)
                                                if param is not None:
                                                    storage_type = param.StorageType
                                                    self.report_parameter_type.append(str(storage_type))  
                                                else:
                                                    self.report_parameter_type.append(str_73(lan))  
                                        else:
                                            self.report_element_name.append(str_74(lan))  
                                            self.report_category_of_elements.append(str_74(lan))  
                                            self.report_parameter_type.append(str_74(lan))  
                                    except Exception as e:
                                        self.report_element_name.append(str_75(lan) + str(int_id) + ": " + str(e))  
                                        self.report_category_of_elements.append(str_76(lan))  
                                        self.report_parameter_type.append(str_77(lan))  
       
                            # [SCRIPT:P_VALUE3_ELEMENT_LIST] Retrieve updated parameter values for element list
                            def p_value3_element_list(self, sender, event_args):
                                """
                                This function retrieves and stores updated parameter values for the elements in the Element List tab.

                                Workflow:
                                1. Loops through each row in the DataGridView to retrieve element IDs and parameter names.
                                2. Retrieves and stores the updated parameter values for each element.
                                3. Handles exceptions and errors gracefully to ensure the function continues processing.

                                Key Features:
                                - Provides a user-friendly interface for retrieving and storing updated parameter values.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                doc = revit.doc
                                values2 = []
                                for row in self.dataGridView_element_list.Rows:
                                    if row.IsNewRow:
                                        continue  
                                    element_id_str = str(row.Cells[0].Value)
                                    parameter_name = str(row.Cells[1].Value)
                                    if element_id_str.isdigit():  
                                        try:
                                            element_id = ElementId(int(element_id_str))
                                            element = doc.GetElement(element_id)
                                            if element:
                                                param = element.LookupParameter(parameter_name)
                                                if param:
                                                    param_value = param.AsValueString()  
                                                    values2.append(param_value)
                                        except Exception:
                                            continue
                                self.parameter_values2 = values2  
                                pass

                            # [SCRIPT:REPORT_ELEMENT_LIST] Generate report for element list
                            def report_element_list(self, sender, event):
                                """
                                This function generates a report for the elements in the Element List tab.

                                Workflow:
                                1. Retrieves the element IDs, parameter names, previous parameter values, and new parameter values.
                                2. Stores the retrieved data in instance variables for reporting purposes.

                                Key Features:
                                - Provides a user-friendly interface for generating reports for the elements in the Element List tab.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                c1=self.linkified_ids
                                c2=self.parameters
                                self.report_parameter_name = c2
                                c3 =self.values
                                c4=self.parameter_values2
                                self.report_parameter_previous_value=c3
                                self.report_parameter_new_value=c4

                            # [EVENT_HANDLER:SELECT_ALL_VISIBLE_IDS_ELEMENT_LIST] Handle select all visible IDs button click
                            def select_all_visible_ids_element_list_Click(self, sender, event):
                                """
                                This function handles the event when the "Select All Visible IDs" button is clicked in the Element List tab.

                                Workflow:
                                1. Collects all visible element IDs from the DataGridView.
                                2. Converts the IDs to Revit ElementId objects.
                                3. Sets the selection in the Revit document to the collected elements.
                                4. Optionally zooms to the selected elements.

                                Key Features:
                                - Provides a quick way to select all visible elements in the list.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    element_id_objects = List[DB.ElementId]()
                                    for row_idx in range(self.dataGridView_element_list.Rows.Count):
                                        row = self.dataGridView_element_list.Rows[row_idx]
                                        if row.Visible:  
                                            element_id = row.Cells[0].Value 
                                            if element_id and element_id.isdigit(): 
                                                try:
                                                    element_id_object = DB.ElementId(int(element_id))
                                                    element_id_objects.Add(element_id_object)
                                                except ValueError:
                                                    continue
                                    if element_id_objects.Count > 0:
                                        revit.uidoc.Selection.SetElementIds(element_id_objects)
                                        revit.uidoc.ShowElements(element_id_objects)
                                except Exception as e:
                                    pass

                            # [EVENT_HANDLER:FILTER_BUTTON_ELEMENT_LIST] Handle filter button click for element list
                            def filter_button_element_list_Click(self, sender, event):
                                """
                                This function handles the event when the "Filter" button is clicked in the Element List tab.

                                Workflow:
                                1. Extracts unique values from each column in the DataGridView.
                                2. Displays a multi-group list selection form to the user.
                                3. Applies the selected filter to the DataGridView.

                                Key Features:
                                - Provides a user-friendly interface for filtering data in the Element List tab.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_10, str_11, str_33
                                try:
                                    column_groups = {}
                                    for col_idx in range(self.dataGridView_element_list.ColumnCount):
                                        unique_values = set()
                                        for row_idx in range(self.dataGridView_element_list.Rows.Count):
                                            cell_value = self.dataGridView_element_list.Rows[row_idx].Cells[col_idx].Value
                                            if cell_value is not None:
                                                unique_values.add(str(cell_value))  
                                        column_name = self.dataGridView_element_list.Columns[col_idx].HeaderText
                                        column_groups[column_name] = list(unique_values)                                    
                                    selected_groups = forms.SelectFromList.show(
                                        column_groups,
                                        title=str_10(lan),
                                        group_selector_title=str_11(lan),
                                        button_name =str_33(lan),
                                        multiselect=True
                                    )
                                    if not selected_groups:
                                        return  
                                    selected_values_set = set(selected_groups)  
                                    self.apply_filter_element_list(selected_values_set)  
                                except Exception as e:
                                    pass

                            # [SCRIPT:APPLY_FILTER_ELEMENT_LIST] Apply filter to DataGridView in Element List tab
                            def apply_filter_element_list(self, selected_values_set):
                                """
                                This function applies a filter to the DataGridView in the Element List tab.

                                Workflow:
                                1. Resets the visibility of all rows to True initially.
                                2. Applies the filter criteria to each row in the DataGridView.
                                3. Shows or hides rows based on the filter result.

                                Key Features:
                                - Provides a user-friendly interface for filtering data in the Element List tab.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    for row_idx in range(self.dataGridView_element_list.Rows.Count):
                                        self.dataGridView_element_list.Rows[row_idx].Visible = True
                                    for row_idx in range(self.dataGridView_element_list.Rows.Count):
                                        row = self.dataGridView_element_list.Rows[row_idx]
                                        include_row = False
                                        for col_idx in range(self.dataGridView_element_list.ColumnCount):
                                            cell_value = row.Cells[col_idx].Value
                                            cell_value_str = str(cell_value) if cell_value is not None else ''
                                            if cell_value_str in selected_values_set:
                                                include_row = True
                                                break
                                        row.Visible = include_row
                                except Exception as e:
                                    pass

                            # [EVENT_HANDLER:SAVE_BUTTON_ELEMENT_LIST] Handle save button click for element list
                            def save_button_element_list_Click(self, sender, event):
                                """
                                This function handles the event when the "Save" button is clicked in the Element List tab.

                                Workflow:
                                1. Prompts the user to select a folder and provide a filename for saving the data.
                                2. Exports the visible rows from the DataGridView to an Excel file.
                                3. Applies cell background colors based on the DataGridView cell colors.
                                4. Displays a success message or handles errors appropriately.

                                Key Features:
                                - Provides a user-friendly interface for saving data to an Excel file.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_17, str_19, str_20, str_21
                                try:
                                    icon_path = save_button()
                                    search_image_path = save_tasklist_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_17(lan)
                                    url = parsweb(wurl)
                                    window_name = str_18(lan)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None or "":    
                                        pass
                                    target_folder = forms.pick_folder()
                                    if target_folder:
                                        if user_input:
                                            filename = "{}.xlsx".format(user_input.strip())
                                            save_path = os.path.join(target_folder, filename)
                                        else:
                                            save_path = os.path.join(target_folder, "Batch Parameter Set using Dataset.xlsx")
                                        workbook = xlsxwriter.Workbook(save_path)
                                        worksheet = workbook.add_worksheet()
                                        red_format = workbook.add_format({'bg_color': '#FF0000'})  
                                        green_format = workbook.add_format({'bg_color': '#00FF00'})  
                                        orange_format = workbook.add_format({'bg_color': '#FFA500'})  
                                        default_format = workbook.add_format()  
                                        visible_row_idx = 0
                                        for row_idx in range(self.dataGridView_element_list.Rows.Count):
                                            row = self.dataGridView_element_list.Rows[row_idx]
                                            if row.Visible:  
                                                for col_idx in range(self.dataGridView_element_list.Columns.Count):
                                                    cell_value = row.Cells[col_idx].Value
                                                    cell_color = row.Cells[col_idx].Style.BackColor
                                                    if cell_color == Drawing.Color.Red:
                                                        cell_format = red_format
                                                    elif cell_color == Drawing.Color.Green:
                                                        cell_format = green_format
                                                    elif cell_color == Drawing.Color.Orange:
                                                        cell_format = orange_format
                                                    else:
                                                        cell_format = default_format
                                                    worksheet.write(visible_row_idx, col_idx, cell_value, cell_format)
                                                visible_row_idx += 1
                                        workbook.close()
                                        self.alert_element_list.ForeColor = Drawing.Color.Green
                                        self.alert_element_list.Text = str_19(lan) + save_path + "!"
                                    else:
                                        self.alert_element_list.ForeColor = Drawing.Color.Black
                                        self.alert_element_list.Text = str_20(lan)
                                except Exception as e:
                                    self.alert_element_list.ForeColor = Drawing.Color.Red
                                    self.alert_element_list.Text = str_21(lan) + str(e)

                            # [EVENT_HANDLER:DELETE_ROW_ELEMENT_LIST] Handle delete row button click for element list
                            def deleterow_button_element_list_Click(self, sender, event):
                                """
                                This function handles the event when the "Delete Row" button is clicked in the Element List tab.

                                Workflow:
                                1. Retrieves the indices of the selected rows in the DataGridView.
                                2. Removes the selected rows from the DataGridView.
                                3. Handles exceptions and displays error messages if necessary.

                                Key Features:
                                - Provides a user-friendly interface for deleting rows from the DataGridView.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    selected_row_indices = {cell.RowIndex for cell in self.dataGridView_element_list.SelectedCells}
                                    rows_to_remove = sorted(selected_row_indices, reverse=True)
                                    for row_index in rows_to_remove:
                                        self.dataGridView_element_list.Rows.RemoveAt(row_index)
                                except Exception as e:
                                    pass

                            # [EVENT_HANDLER:IMPORT_DATA_BUTTON_ELEMENT_LIST] Handle import data button click for element list
                            def import_data_button_element_list_Click(self, sender, event):
                                """
                                This function handles the event when the "Import Data" button is clicked in the Element List tab.

                                Workflow:
                                1. Prompts the user to select an Excel, CSV, or TXT file.
                                2. Reads the file and extracts data based on the file type.
                                3. Populates the DataGridView with the extracted data.
                                4. Retrieves and displays the parameter types for the imported data.

                                Key Features:
                                - Supports multiple file formats (Excel, CSV, TXT) for data import.
                                - Provides a user-friendly interface for importing and displaying data.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_34
                                try:
                                    self.alert_element_list.Text = ""
                                    self.dataGridView_element_list.Rows.Clear()
                                    open_file_dialog = OpenFileDialog()
                                    open_file_dialog.Filter = "Excel Files (*.xlsx)|*.xlsx|CSV Files (*.csv)|*.csv|txt Files (*.txt)|*.txt"
                                    open_file_dialog.Multiselect = False
                                    if open_file_dialog.ShowDialog() == DialogResult.OK:
                                        file_path = open_file_dialog.FileName
                                        file_name = os.path.basename(file_path)
                                        self.name.Text = str(file_name)
                                        file_ext = os.path.splitext(file_path)[1].lower()
                                        data = []
                                        if file_ext == '.xlsx':
                                            workbook = xlrd.open_workbook(file_path, encoding_override="utf-8")  
                                            sheet = workbook.sheet_by_index(0)   
                                            for row_idx in range(sheet.nrows):
                                                row_values = []
                                                for col_idx in range(min(sheet.ncols, 3)): 
                                                    cell_value = sheet.cell_value(row_idx, col_idx)
                                                    if sheet.cell_type(row_idx, col_idx) == xlrd.XL_CELL_NUMBER:
                                                        if int(cell_value) == cell_value:
                                                            row_values.append(str(int(cell_value)))
                                                        else:
                                                            row_values.append(str(cell_value))
                                                    elif sheet.cell_type(row_idx, col_idx) == xlrd.XL_CELL_DATE:
                                                        date_value = xlrd.xldate_as_datetime(cell_value, workbook.datemode)
                                                        row_values.append(date_value.strftime('%Y-%m-%d %H:%M:%S'))
                                                    else:
                                                        row_values.append(str(cell_value))
                                                data.append(row_values)
                                        elif file_ext == '.csv':
                                            with codecs.open(file_path, 'r', encoding='utf-8') as csvfile:
                                                reader = csv.reader(csvfile, delimiter=';')  
                                                for row in reader:
                                                    if len(row):  
                                                        row_values = [cell.strip() for cell in row]  
                                                        data.append(row_values)
                                        elif file_ext == '.txt':
                                            with codecs.open(file_path, 'r', encoding='utf-8') as txtfile:
                                                for line in txtfile:
                                                    line = line.strip() 
                                                    if line:
                                                        parts = line.split('_#')
                                                        if len(parts) == 4:
                                                            id_value = parts[1].strip('i[]')
                                                            parameter_value = parts[2].strip('p[]')
                                                            value_value = parts[3].strip('v[]')
                                                            data.append([id_value, parameter_value, value_value])
                                        else:
                                            self.alert_element_list.ForeColor = Drawing.Color.Red
                                            self.alert_element_list.Text = str_34(lan)
                                            return
                                        self.dataGridView_element_list.Rows.Clear()
                                        self.dataGridView_element_list.AllowUserToAddRows = False
                                        for row in data:
                                            self.dataGridView_element_list.Rows.Add(*row)
                                        self.retrieve_parameter_types_element_list()
                                except Exception as e:
                                    pass

                            # [SCRIPT:RETRIEVE_PARAMETER_TYPES_ELEMENT_LIST] Retrieve and display parameter types for element list
                            def retrieve_parameter_types_element_list(self):
                                """
                                This function retrieves and displays the parameter types for the elements in the Element List tab.

                                Workflow:
                                1. Loops through each row in the DataGridView to retrieve element IDs and parameter names.
                                2. Retrieves and displays the parameter types for each element.
                                3. Handles exceptions and errors gracefully to ensure the function continues processing.

                                Key Features:
                                - Provides a user-friendly interface for retrieving and displaying parameter types.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    from UI.strings_batch_parameter_set_using_dataset import str_24, str_25, str_26, str_27, str_28, str_29
                                    doc = __revit__.ActiveUIDocument.Document
                                    for row_idx in range(self.dataGridView_element_list.RowCount):
                                        for col_idx in range(self.dataGridView_element_list.ColumnCount):
                                            self.dataGridView_element_list.Rows[row_idx].Cells[col_idx].Style.BackColor = Drawing.Color.White
                                    for row_idx in range(self.dataGridView_element_list.RowCount):
                                        element_id_str = self.dataGridView_element_list.Rows[row_idx].Cells[0].Value
                                        if element_id_str is not None:
                                            self.set_button_element_list.Enabled = True
                                            try:
                                                element_id = int(element_id_str)  
                                            except ValueError:
                                                self.dataGridView_element_list.Rows[row_idx].Cells[3].Value = str_25(lan)
                                                for cell in self.dataGridView_element_list.Rows[row_idx].Cells:
                                                        cell.Style.BackColor = Drawing.Color.Orange
                                                continue
                                            parameter_name = self.dataGridView_element_list.Rows[row_idx].Cells[1].Value
                                            if parameter_name:
                                                element = doc.GetElement(ElementId(element_id))
                                                if element is not None:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param is not None:
                                                        param_type = param.StorageType
                                                        self.dataGridView_element_list.Rows[row_idx].Cells[3].Value = str(param_type)
                                                    else:
                                                        self.dataGridView_element_list.Rows[row_idx].Cells[3].Value = str_26(lan)
                                                        for cell in self.dataGridView_element_list.Rows[row_idx].Cells:
                                                            cell.Style.BackColor = Drawing.Color.Orange
                                                else:
                                                    self.dataGridView_element_list.Rows[row_idx].Cells[3].Value = str_27(lan)
                                                    for cell in self.dataGridView_element_list.Rows[row_idx].Cells:
                                                        cell.Style.BackColor = Drawing.Color.Orange
                                            else:
                                                self.dataGridView_element_list.Rows[row_idx].Cells[3].Value = str_28(lan)
                                                for cell in self.dataGridView_element_list.Rows[row_idx].Cells:
                                                    cell.Style.BackColor = Drawing.Color.Orange
                                        else:
                                            self.dataGridView_element_list.Rows[row_idx].Cells[3].Value = str_29(lan)
                                            for cell in self.dataGridView_element_list.Rows[row_idx].Cells:
                                                cell.Style.BackColor = Drawing.Color.Orange
                                except Exception as e:
                                    pass

                            # [EVENT_HANDLER:SELECT_BUTTON_ELEMENT_LIST] Handle select button click for element list
                            def select_button_element_list_Click(self, sender, event):
                                """
                                This function handles the event when the "Select" button is clicked in the Element List tab.

                                Workflow:
                                1. Collects the element IDs from the selected rows and cells in the DataGridView.
                                2. Converts the IDs to Revit ElementId objects.
                                3. Sets the selection in the Revit document to the collected elements.
                                4. Updates the UI to reflect the number of selected elements.

                                Key Features:
                                - Provides a quick way to select elements from the DataGridView in the Revit document.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_31
                                selected_rows = self.dataGridView_element_list.SelectedRows
                                selected_cells = self.dataGridView_element_list.SelectedCells
                                element_ids = []
                                for row in selected_rows:
                                    element_id = row.Cells[0].Value
                                    if element_id not in element_ids: 
                                        element_ids.append(element_id)
                                for cell in selected_cells:
                                    if cell.ColumnIndex == 0:  
                                        element_id = cell.Value
                                        if element_id not in element_ids:  
                                            element_ids.append(element_id)
                                element_id_objects = List[DB.ElementId]()
                                for element_id in element_ids:
                                    try:
                                        element_id_object = DB.ElementId(int(element_id))
                                        element_id_objects.Add(element_id_object)
                                    except ValueError:
                                        self.alert_element_list.ForeColor = Drawing.Color.Red
                                        self.alert_element_list.Text = str(str_31(lan) + element_id)
                                        return
                                revit.uidoc.Selection.SetElementIds(element_id_objects)
                                selection = revit.uidoc.Selection
                                selected_elements = selection.GetElementIds()
                                self.element_count_element_list.Text = str(len(selected_elements))
                                self.alert_element_list.Text = ""

                            # [EVENT_HANDLER:FOCUS_BUTTON_ELEMENT_LIST] Handle focus button click for element list
                            def focus_button_element_list_clicked(self, sender, event):
                                """
                                This function handles the event when the "Focus" button is clicked in the Element List tab.

                                Workflow:
                                1. Checks if any elements are selected in the Revit document.
                                2. If no elements are selected, displays an error message.
                                3. If elements are selected, zooms to the selected elements in the Revit view.

                                Key Features:
                                - Provides a quick way to focus on selected elements in the Revit view.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_32
                                selection = revit.uidoc.Selection
                                selected_elements = selection.GetElementIds()
                                if len(selected_elements) == 0:
                                    self.alert_element_list.ForeColor = Drawing.Color.Red
                                    self.alert_element_list.Text = str_32(lan)
                                else:
                                    self.alert_element_list.Text = ""
                                    revit.uidoc.ShowElements(selected_elements)

                            # [EVENT_HANDLER:CHECK_BUTTON_CATEGORY] Handle check button click for category list
                            def check_button_category_Click(self, sender, event_args):
                                """
                                This function handles the event when the "Refresh" button is clicked in the Category List tab.

                                Workflow:
                                1. Retrieves and updates the parameter types for the categories in the list.

                                Key Features:
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                self.catch_parameter_types_category()

                            # [EVENT_HANDLER:SET_BUTTON_CATEGORY] Handle set button click for category list
                            def set_button_category_Click(self, sender, event_args):
                                """
                                This function handles the event when the "Set" button is clicked in the Category List tab.

                                Workflow:
                                1. Retrieves and updates the parameter types for the categories in the list.
                                2. Sets the parameter values for the selected categories in the Revit model.
                                3. Marks rows as successful or skipped based on the outcome of the operation.

                                Key Features:
                                - Provides a user-friendly interface for setting parameter values for multiple categories.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from Autodesk.Revit.DB import ElementId, Transaction, StorageType, FilteredElementCollector, BuiltInCategory, ElementCategoryFilter
                                from pyrevit import revit
                                from System.Drawing import Color
                                self.alert_category.Text = ""
                                self.catch_parameter_types_category()
                                doc = revit.doc
                                self.successful_categories_category = []
                                self.successful_element_ids_category = []
                                self.successful_parameter_names = []
                                self.successful_values_category = []
                                self.linkified_element_ids = []

                                self.simple_table=[]
                                try:
                                    with Transaction(doc, 'Set Parameters from DataGridView') as trans:
                                        trans.Start()
                                        for row in self.dataGridView_category.Rows:
                                            if row.IsNewRow:
                                                continue  
                                            category_name = str(row.Cells[0].Value)
                                            parameter_name = str(row.Cells[1].Value)
                                            parameter_value = str(row.Cells[2].Value)
                                            if not category_name or not parameter_name or not parameter_value:
                                                for cell in row.Cells:
                                                    cell.Style.BackColor = Color.Red
                                                continue 
                                            try:
                                                category_name_clean = category_name.replace('OST_', '')
                                                category_attr_name = 'OST_' + category_name_clean
                                                category = getattr(BuiltInCategory, category_attr_name)
                                            except AttributeError:
                                                for cell in row.Cells:
                                                    cell.Style.BackColor = Color.Red
                                                continue
                                            collector = FilteredElementCollector(doc)
                                            category_filter = ElementCategoryFilter(category)
                                            elements = collector.WherePasses(category_filter).ToElements()
                                            if not elements:
                                                for cell in row.Cells:
                                                    cell.Style.BackColor = Color.Red
                                                continue
                                            for element in elements:
                                                param = element.LookupParameter(parameter_name)
                                                if param:
                                                    param_type = param.StorageType
                                                    self.report_parameter_type.append(str(param_type))  
                                                    previous_value = param.AsValueString()  
                                                    self.report_parameter_previous_value.append(previous_value)   
                                                    try:
                                                        if param.StorageType == StorageType.String:
                                                            param.Set(parameter_value)
                                                        elif param.StorageType == StorageType.Double:
                                                            double_value = float(parameter_value)
                                                            param.Set(double_value)
                                                        elif param.StorageType == StorageType.Integer:
                                                            int_value = int(parameter_value)
                                                            param.Set(int_value)
                                                        elif param.StorageType == StorageType.ElementId:
                                                            if parameter_value.isdigit():
                                                                param.Set(ElementId(int(parameter_value)))
                                                        for cell in row.Cells:
                                                            cell.Style.BackColor = Color.Green
                                                        output = script.get_output()
                                                        self.successful_categories_category.append(category_name)
                                                        self.successful_element_ids_category.append(element.Id)
                                                        self.successful_parameter_names.append(parameter_name)
                                                        self.successful_values_category.append(parameter_value)
                                                        linkified_id = output.linkify(element.Id)
                                                        self.linkified_element_ids.append(linkified_id)
                                                        int_ids_list = str(element.Id)
                                                        self.report_element_id.append(int_ids_list)
                                                        element_name = element.Name
                                                        from UI.strings_batch_parameter_set_using_dataset import str_72, str_49
                                                        element_category = element.Category.Name if element.Category else str_72(lan)
                                                        self.report_element_name.append(element_name)  
                                                        self.report_category_of_elements.append(element_category)  
                                                        new_value = param.AsValueString()  
                                                        self.report_parameter_new_value.append(new_value) 
                                                        self.report_parameter_name.append(parameter_name)  
                                                        new_entry = {'Category': category_name, 'ParameterName': parameter_name, 'Value': parameter_value}
                                                        if new_entry not in self.simple_table:
                                                            self.simple_table.append(new_entry)
                                                    except Exception as e:
                                                        for cell in row.Cells:
                                                            cell.Style.BackColor = Color.Red
                                                        self.alert_category.Text = str_49(lan).format(parameter_name, element.Id, str(e))
                                                else:
                                                    pass
                                        trans.Commit()
                                except Exception as e:
                                    for cell in row.Cells:
                                        cell.Style.BackColor = Color.Red
                                    self.alert_category.Text = str_50(lan).format(str(e))
                                self.category_list = [entry['Category'] for entry in self.simple_table]
                                self.parameter_name_list = [entry['ParameterName'] for entry in self.simple_table]
                                self.value_list = [entry['Value'] for entry in self.simple_table]
                                self.select_successful_elements_category()
                                
                            # [SCRIPT:SELECT_SUCCESSFUL_ELEMENTS_CATEGORY] Select successful elements in category list
                            def select_successful_elements_category(self):
                                """
                                This function selects the successful elements in the Revit document based on the Category List tab.

                                Workflow:
                                1. Converts the list of successful element IDs to a List<ElementId>.
                                2. Sets the selection in the Revit document to the collected elements.
                                3. Optionally focuses the view on the selected elements.

                                Key Features:
                                - Provides a quick way to select successful elements in the Revit document.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from Autodesk.Revit.UI import UIDocument
                                from Autodesk.Revit.DB import ElementId
                                from System.Collections.Generic import List
                                uidoc = revit.uidoc
                                ids_list = List[ElementId](self.successful_element_ids_category)
                                uidoc.Selection.SetElementIds(ids_list)
                                if ids_list:
                                    first_element = uidoc.Document.GetElement(ids_list[0])
                                    uidoc.ShowElements(ids_list)

                            # [SCRIPT:GET_SUCCESSFUL_ELEMENT_IDS_CATEGORY] Retrieve successful element IDs for category list
                            def get_successful_element_ids_category(self):
                                """
                                This function retrieves and returns the list of successful element IDs from the Category List tab.

                                Workflow:
                                1. Converts the set of successful element IDs to a sorted list.
                                2. Returns the sorted list of element IDs.

                                Key Features:
                                - Provides a quick way to retrieve successful element IDs.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                return sorted(self.successful_element_ids_category)
                            
                            # [EVENT_HANDLER:FILTER_BUTTON_CATEGORY] Handle filter button click for category list
                            def filter_button_category_Click(self, sender, event):
                                """
                                This function handles the event when the "Filter" button is clicked in the Category List tab.

                                Workflow:
                                1. Extracts unique values from each column in the DataGridView.
                                2. Displays a multi-group list selection form to the user.
                                3. Applies the selected filter to the DataGridView.

                                Key Features:
                                - Provides a user-friendly interface for filtering data in the Category List tab.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """,
                                from UI.strings_batch_parameter_set_using_dataset import str_10, str_11, str_27, str_33
                                try:
                                    column_groups = {}
                                    for col_idx in range(self.dataGridView_category.ColumnCount):
                                        unique_values = set()
                                        for row_idx in range(self.dataGridView_category.Rows.Count):
                                            cell_value = self.dataGridView_category.Rows[row_idx].Cells[col_idx].Value
                                            if cell_value is not None:
                                                unique_values.add(str(cell_value))  
                                        column_name = self.dataGridView_category.Columns[col_idx].HeaderText
                                        column_groups[column_name] = list(unique_values)
                                    selected_groups = forms.SelectFromList.show(
                                        column_groups,
                                        title=str_10(lan),
                                        group_selector_title=str_11(lan),
                                        button_name =str_33(lan),
                                        multiselect=True
                                    )
                                    if not selected_groups:
                                        return 
                                    selected_values_set = set(selected_groups)  
                                    self.apply_filter_category(selected_values_set)    
                                except Exception as e:
                                    pass

                            # [SCRIPT:APPLY_FILTER_CATEGORY] Apply filter to DataGridView in category list
                            def apply_filter_category(self, selected_values_set):
                                """
                                This function applies a filter to the DataGridView in the Category List tab.

                                Workflow:
                                1. Resets the visibility of all rows to True initially.
                                2. Applies the filter criteria to each row in the DataGridView.
                                3. Shows or hides rows based on the filter result.

                                Key Features:
                                - Provides a user-friendly interface for filtering data in the Category List tab.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    for row_idx in range(self.dataGridView_category.Rows.Count):
                                        self.dataGridView_category.Rows[row_idx].Visible = True
                                    for row_idx in range(self.dataGridView_category.Rows.Count):
                                        row = self.dataGridView_category.Rows[row_idx]
                                        include_row = False
                                        for col_idx in range(self.dataGridView_category.ColumnCount):
                                            cell_value = row.Cells[col_idx].Value
                                            cell_value_str = str(cell_value) if cell_value is not None else ''
                                            if cell_value_str in selected_values_set:
                                                include_row = True
                                                break
                                        row.Visible = include_row
                                except Exception as e:
                                    pass

                            # [EVENT_HANDLER:SAVE_BUTTON_CATEGORY] Handle save button click for category list
                            def save_button_category_Click(self, sender, event):
                                """
                                This function handles the event when the "Save" button is clicked in the Category List tab.

                                Workflow:
                                1. Prompts the user to select a folder and provide a filename for saving the data.
                                2. Exports the visible rows from the DataGridView to an Excel file.
                                3. Applies cell background colors based on the DataGridView cell colors.
                                4. Displays a success message or handles errors appropriately.

                                Key Features:
                                - Provides a user-friendly interface for saving data to an Excel file.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_19, str_20, str_21
                                try:
                                    icon_path = save_button()
                                    search_image_path = save_tasklist_back()
                                    ok_icon_path = ok_icon()
                                    cancel_icon_path = cancel_icon()
                                    parameter_label = str_17(lan)
                                    url = parsweb(wurl)
                                    window_name = str_18(lan)
                                    user_input = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                    if user_input is None or "":
                                        pass
                                    target_folder = forms.pick_folder()
                                    if target_folder:
                                        if user_input:
                                            filename = "{}.xlsx".format(user_input.strip())
                                            save_path = os.path.join(target_folder, filename)
                                        else:
                                            save_path = os.path.join(target_folder, "Batch Parameter Set using Dataset.xlsx")
                                        workbook = xlsxwriter.Workbook(save_path)
                                        worksheet = workbook.add_worksheet()
                                        red_format = workbook.add_format({'bg_color': '#FF0000'})  
                                        green_format = workbook.add_format({'bg_color': '#00FF00'})  
                                        orange_format = workbook.add_format({'bg_color': '#FFA500'})  
                                        default_format = workbook.add_format()  
                                        visible_row_idx = 0
                                        for row_idx in range(self.dataGridView_category.Rows.Count):
                                            row = self.dataGridView_category.Rows[row_idx]
                                            if row.Visible:  
                                                for col_idx in range(self.dataGridView_category.Columns.Count):
                                                    cell_value = row.Cells[col_idx].Value
                                                    cell_color = row.Cells[col_idx].Style.BackColor
                                                    if cell_color == Drawing.Color.Red:
                                                        cell_format = red_format
                                                    elif cell_color == Drawing.Color.Green:
                                                        cell_format = green_format
                                                    elif cell_color == Drawing.Color.Orange:
                                                        cell_format = orange_format
                                                    else:
                                                        cell_format = default_format
                                                    worksheet.write(visible_row_idx, col_idx, cell_value, cell_format)
                                                visible_row_idx += 1
                                        workbook.close()
                                        self.alert_category.ForeColor = Drawing.Color.Green
                                        self.alert_category.Text = str_19(lan) + save_path + "!"
                                    else:
                                        self.alert_category.ForeColor = Drawing.Color.Black
                                        self.alert_category.Text = str_20(lan)
                                except Exception as e:
                                    self.alert_category.ForeColor = Drawing.Color.Red
                                    self.alert_category.Text = str_21(lan) + str(e)
                                    
                            # [EVENT_HANDLER:DELETE_ROW_CATEGORY] Handle delete row button click for category list
                            def deleterow_button_category_Click(self, sender, event):
                                """
                                This function handles the event when the "Delete Row" button is clicked in the Category List tab.

                                Workflow:
                                1. Retrieves the indices of the selected rows in the DataGridView.
                                2. Removes the selected rows from the DataGridView.
                                3. Handles exceptions and displays error messages if necessary.

                                Key Features:
                                - Provides a user-friendly interface for deleting rows from the DataGridView.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    selected_row_indices = {cell.RowIndex for cell in self.dataGridView_category.SelectedCells}  
                                    rows_to_remove = sorted(selected_row_indices, reverse=True)
                                    for row_index in rows_to_remove:
                                        self.dataGridView_category.Rows.RemoveAt(row_index)
                                except Exception as e:
                                    pass

                            # [EVENT_HANDLER:IMPORT_DATA_BUTTON_CATEGORY] Handle import data button click for category list
                            def import_data_button_category_Click(self, sender, event):
                                """
                                This function handles the event when the "Import Data" button is clicked in the Category List tab.

                                Workflow:
                                1. Prompts the user to select an Excel, CSV, or TXT file.
                                2. Reads the file and extracts data based on the file type.
                                3. Populates the DataGridView with the extracted data.
                                4. Retrieves and displays the parameter types for the imported data.

                                Key Features:
                                - Supports multiple file formats (Excel, CSV, TXT) for data import.
                                - Provides a user-friendly interface for importing and displaying data.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_34
                                try:
                                    self.alert_category.Text = ""
                                    self.dataGridView_category.Rows.Clear()
                                    open_file_dialog = OpenFileDialog()
                                    open_file_dialog.Filter = "Excel Files (*.xlsx)|*.xlsx|CSV Files (*.csv)|*.csv|txt Files (*.txt)|*.txt"
                                    open_file_dialog.Multiselect = False
                                    if open_file_dialog.ShowDialog() == DialogResult.OK:
                                        file_path = open_file_dialog.FileName
                                        file_name = os.path.basename(file_path)
                                        self.name_category.Text = str(file_name)
                                        file_ext = os.path.splitext(file_path)[1].lower()
                                        data = []
                                        if file_ext == '.xlsx':
                                            workbook = xlrd.open_workbook(file_path, encoding_override="utf-8")  
                                            sheet = workbook.sheet_by_index(0)    
                                            for row_idx in range(sheet.nrows):
                                                row_values = []
                                                for col_idx in range(min(sheet.ncols, 3)):  
                                                    cell_value = sheet.cell_value(row_idx, col_idx)
                                                    if sheet.cell_type(row_idx, col_idx) == xlrd.XL_CELL_NUMBER:
                                                        if int(cell_value) == cell_value:
                                                            row_values.append(str(int(cell_value)))
                                                        else:
                                                            row_values.append(str(cell_value))
                                                    elif sheet.cell_type(row_idx, col_idx) == xlrd.XL_CELL_DATE:
                                                        date_value = xlrd.xldate_as_datetime(cell_value, workbook.datemode)
                                                        row_values.append(date_value.strftime('%Y-%m-%d %H:%M:%S'))
                                                    else:
                                                        row_values.append(str(cell_value))
                                                data.append(row_values)
                                        elif file_ext == '.csv':
                                            with codecs.open(file_path, 'r', encoding='utf-8') as csvfile:
                                                reader = csv.reader(csvfile, delimiter=';')  
                                                for row in reader:
                                                    if len(row):  
                                                        row_values = [cell.strip() for cell in row]  
                                                        data.append(row_values)
                                        elif file_ext == '.txt':
                                            with codecs.open(file_path, 'r', encoding='utf-8') as txtfile:
                                                for line in txtfile:
                                                    line = line.strip()  
                                                    if line:
                                                        parts = line.split('_#')
                                                        if len(parts) == 4:
                                                            id_value = parts[1].strip('c[]')
                                                            parameter_value = parts[2].strip('p[]')
                                                            value_value = parts[3].strip('v[]')
                                                            data.append([id_value, parameter_value, value_value])
                                        else:
                                            self.alert_category.ForeColor = Drawing.Color.Red
                                            self.alert_category.Text = str_34(lan)
                                            return
                                        self.dataGridView_category.Rows.Clear()
                                        self.dataGridView_category.AllowUserToAddRows = False
                                        for row in data:
                                            self.dataGridView_category.Rows.Add(*row)
                                        self.catch_parameter_types_category()
                                        self.set_button_category.Enabled = True
                                except Exception as e:
                                    pass

                            # [SCRIPT:CATCH_PARAMETER_TYPES_CATEGORY] Retrieve and display parameter types for category list
                            def catch_parameter_types_category(self):
                                """
                                This function retrieves and displays the parameter types for the categories in the Category List tab.

                                Workflow:
                                1. Loops through each row in the DataGridView to retrieve category names and parameter names.
                                2. Retrieves and displays the parameter types for each category.
                                3. Handles exceptions and errors gracefully to ensure the function continues processing.

                                Key Features:
                                - Provides a user-friendly interface for retrieving and displaying parameter types.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_25, str_26, str_27, str_28, str_29
                                try:
                                    doc = __revit__.ActiveUIDocument.Document
                                    for row_idx in range(self.dataGridView_category.RowCount):
                                        for col_idx in range(self.dataGridView_category.ColumnCount):
                                            self.dataGridView_category.Rows[row_idx].Cells[col_idx].Style.BackColor = Drawing.Color.White

                                    def elements_by_category(doc, view, category_str):
                                        try:
                                            from Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, ElementCategoryFilter, ElementId
                                            from System.Drawing import Color
                                            from pyrevit import forms, script
                                            from Autodesk.Revit.UI import TaskDialog
                                            category_name = category_str.replace('OST_', '')
                                            category_attr_name = 'OST_' + category_name
                                            category = getattr(BuiltInCategory, category_attr_name)
                                        except AttributeError:
                                            return []  
                                        collector = FilteredElementCollector(doc, view.Id)
                                        category_filter = ElementCategoryFilter(category)
                                        elements = collector.WherePasses(category_filter).ToElements()
                                        element_ids = [element.Id for element in elements]
                                        return element_ids
                                    for row_idx in range(self.dataGridView_category.RowCount):
                                        doc = __revit__.ActiveUIDocument.Document
                                        view = doc.ActiveView
                                        category_str = self.dataGridView_category.Rows[row_idx].Cells[0].Value
                                        element_ids = elements_by_category(doc, view, category_str)
                                        self.dataGridView_category.Rows[row_idx].Cells[4].Value = str(len(element_ids))
                                        if element_ids:
                                            try:
                                                element_id = int(str(element_ids[0]))  
                                            except ValueError:
                                                self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_25(lan)
                                                for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                    cell.Style.BackColor = Drawing.Color.Orange
                                                continue
                                            parameter_name = self.dataGridView_category.Rows[row_idx].Cells[1].Value
                                            if parameter_name:
                                                element = doc.GetElement(ElementId(element_id))
                                                if element:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param:
                                                        param_type = param.StorageType
                                                        self.dataGridView_category.Rows[row_idx].Cells[3].Value = str(param_type)
                                                    else:
                                                        self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_26(lan)
                                                        for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                            cell.Style.BackColor = Drawing.Color.Orange
                                                else:
                                                    self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_27(lan)
                                                    for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                        cell.Style.BackColor = Drawing.Color.Orange
                                            else:
                                                self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_28(lan)
                                                for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                    cell.Style.BackColor = Drawing.Color.Orange
                                        else:
                                            self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_29(lan)
                                            for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                cell.Style.BackColor = Drawing.Color.Orange
                                except Exception as e:
                                    pass

                            # [EVENT_HANDLER:SELECT_BUTTON_CATEGORY] Handle select button click for category list
                            def select_button_category_Click(self, sender, event):
                                """
                                This function handles the event when the "Select" button is clicked in the Category List tab.

                                Workflow:
                                1. Collects the category names from the selected rows and cells in the DataGridView.
                                2. Retrieves all elements belonging to the selected categories.
                                3. Sets the selection in the Revit document to the collected elements.
                                4. Updates the UI to reflect the number of selected elements.

                                Key Features:
                                - Provides a quick way to select elements based on categories in the Revit document.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                try:
                                    selected_rows = self.dataGridView_category.SelectedRows
                                    selected_cells = self.dataGridView_category.SelectedCells
                                    element_ids = []
                                    for row in selected_rows:
                                        element_id = row.Cells[0].Value
                                        if element_id not in element_ids:  
                                            element_ids.append(element_id)
                                    for cell in selected_cells:
                                        if cell.ColumnIndex == 0:  
                                            element_id = cell.Value
                                            if element_id not in element_ids:  
                                                element_ids.append(element_id)

                                    from Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, ElementCategoryFilter, ElementId
                                    from Autodesk.Revit.UI import Selection
                                    from System.Collections.Generic import List
                                    def elements_by_categories(doc, view, category_names):
                                        element_ids = set()  
                                        for category_name in category_names:
                                            try:
                                                category_name_clean = category_name.replace('OST_', '')
                                                category_attr_name = 'OST_' + category_name_clean
                                                category = getattr(BuiltInCategory, category_attr_name)
                                            except AttributeError:
                                                pass
                                            collector = FilteredElementCollector(doc, view.Id)
                                            category_filter = ElementCategoryFilter(category)
                                            elements = collector.WherePasses(category_filter).ToElements()
                                            for element in elements:
                                                element_ids.add(element.Id)
                                        element_id_collection = List[ElementId](element_ids)
                                        uidoc = __revit__.ActiveUIDocument
                                        uidoc.Selection.SetElementIds(element_id_collection)
                                        self.element_count_category.Text = str(len(element_id_collection))
                                    doc = __revit__.ActiveUIDocument.Document
                                    view = doc.ActiveView
                                    input_categories = element_ids  
                                    elements_by_categories(doc, view, input_categories)
                                except:
                                    __revit__.ActiveUIDocument.Selection.SetElementIds(List[ElementId]())
                                    self.element_count_category.Text = ""
                                    pass

                            # [EVENT_HANDLER:FOCUS_BUTTON_CATEGORY] Handle focus button click for category list
                            def focus_button_category_Click(self, sender, event):
                                """
                                This function handles the event when the "Focus" button is clicked in the Category List tab.

                                Workflow:
                                1. Checks if any elements are selected in the Revit document.
                                2. If no elements are selected, displays an error message.
                                3. If elements are selected, zooms to the selected elements in the Revit view.
                                4. Retrieves and displays the parameter types for the categories in the DataGridView.

                                Key Features:
                                - Provides a quick way to focus on selected elements in the Revit view.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                from UI.strings_batch_parameter_set_using_dataset import str_25, str_26, str_27, str_28, str_29, str_32
                                selection = revit.uidoc.Selection
                                selected_elements = selection.GetElementIds()
                                if len(selected_elements) == 0:
                                    self.alert_category.ForeColor = Drawing.Color.Red
                                    self.alert_category.Text = str_32(lan)
                                else:
                                    self.alert_category.Text = ""
                                    revit.uidoc.ShowElements(selected_elements)
                                try:
                                    doc = __revit__.ActiveUIDocument.Document
                                    for row_idx in range(self.dataGridView_category.RowCount):
                                        for col_idx in range(self.dataGridView_category.ColumnCount):
                                            self.dataGridView_category.Rows[row_idx].Cells[col_idx].Style.BackColor = Drawing.Color.White

                                    def elements_by_category(doc, view, category_str):
                                        try:
                                            from Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, ElementCategoryFilter, ElementId   
                                            category_name = category_str.replace('OST_', '')
                                            category_attr_name = 'OST_' + category_name
                                            category = getattr(BuiltInCategory, category_attr_name)
                                        except AttributeError:
                                            return []  
                                        collector = FilteredElementCollector(doc, view.Id)
                                        category_filter = ElementCategoryFilter(category)
                                        elements = collector.WherePasses(category_filter).ToElements()
                                        element_ids = [element.Id for element in elements]
                                        return element_ids
                                    for row_idx in range(self.dataGridView_category.RowCount):
                                        doc = __revit__.ActiveUIDocument.Document
                                        view = doc.ActiveView
                                        category_str = self.dataGridView_category.Rows[row_idx].Cells[0].Value
                                        element_ids = elements_by_category(doc, view, category_str)
                                        self.dataGridView_category.Rows[row_idx].Cells[4].Value = str(len(element_ids))
                                        if element_ids:
                                            try:
                                                element_id = int(str(element_ids[0]))  
                                            except ValueError:
                                                self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_25(lan)
                                                for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                    cell.Style.BackColor = Drawing.Color.Orange
                                                continue
                                            parameter_name = self.dataGridView_category.Rows[row_idx].Cells[1].Value
                                            if parameter_name:
                                                element = doc.GetElement(ElementId(element_id))
                                                if element:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param:
                                                        param_type = param.StorageType
                                                        
                                                        self.dataGridView_category.Rows[row_idx].Cells[3].Value = str(param_type)
                                                    else:
                                                        self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_26(lan)
                                                        for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                            cell.Style.BackColor = Drawing.Color.Orange
                                                else:
                                                    self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_27(lan)
                                                    for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                        cell.Style.BackColor = Drawing.Color.Orange
                                            else:
                                                self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_28(lan)
                                                for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                    cell.Style.BackColor = Drawing.Color.Orange
                                        else:
                                            self.dataGridView_category.Rows[row_idx].Cells[3].Value = str_29(lan)
                                            for cell in self.dataGridView_category.Rows[row_idx].Cells:
                                                cell.Style.BackColor = Drawing.Color.Orange
                                except Exception as e:
                                    pass

                        doc = DocumentManager.Instance.CurrentDBDocument
                        if 'form' not in globals():
                            pass
                        else:
                            form = BATCH_PARAMETER_SET(doc)
                            form.ShowDialog()

                    return form.report_element_id, form.report_element_name, form.report_category_of_elements, form.report_parameter_name, form.report_parameter_type, form.report_parameter_previous_value, form.report_parameter_new_value

                # [SCRIPT:CREATE_REPORT_TAB] Create report tab with batch parameter data
                from structure.root import lan_path
                from UI.strings_batch_parameter_set_using_dataset import str_60, str_61, str_62, str_63, str_64, str_65, str_66, str_67
                lan = lan_path()

                batch_id, batch_name, batch_category, batch_parameter, batch_strage_type, batch_previous, batch_new = batch_parameter_value_set_using_dataset_id_and_category_with_data_convertor()
                headers = [str_61(lan), str_60(lan), str_63(lan), str_64(lan), str_65(lan), str_66(lan), str_67(lan)]
                data = [
                    batch_id,
                    batch_name,
                    batch_category,
                    batch_parameter,
                    batch_strage_type,
                    batch_previous,
                    batch_new
                ]
                editable = [False, False, False, False, False, False, False]
                if batch_id:
                    self.create_report_tab(headers, data, editable, title=button_text)  
                
                # [EVENT_HANDLER:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                MessageBox.Show(str(e),str_62(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:ID Generator] Unique ID Generator
        #
        # Handles generation of unique IDs for elements:
        # - Generates IDs using various methods (count, random numbers, strings, etc.)
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:ID_GENERATOR]
        elif button_text == tool_str_41(lan):
            """
            This function handles the event when the "ID Generator" button is clicked in the Element List tab.

            Workflow:
            1. Prompts the user to select an option for generating IDs.
            2. Generates IDs based on the selected option.
            3. Sets the generated IDs as parameter values for the selected elements.
            4. Handles exceptions and errors gracefully to ensure the function continues processing.

            Key Features:
            - Provides a user-friendly interface for generating IDs.
            - Ensures proper handling of exceptions to maintain application stability.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                def id_generator():
                    # [SCRIPT:IMPORTS] Import necessary libraries
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    from System.Windows.Forms import Form, RadioButton, Button, PictureBox, Label, Cursors
                    from System.Drawing import Point, Size, Bitmap, Color, Icon, Font, FontStyle, GraphicsUnit
                    from RevitServices.Persistence import DocumentManager
                    from pyrevit import forms, script  
                    import os
                    import sys
                    import webbrowser
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.pset import p_values, link_ids, print_table_from_lists, int_ids, c_name, c_category, c_storage_type
                    from sajdmo.forms.mixture import mix_input1_radio2, mix_input2_radio4, mix_input_combo, mix_input_combo2, mix_2input_1radio_combo, mix_2input_1radio_combo2
                    from sajdmo.forms.double import double_input_plusnote
                    from structure.root import (wurl_path, borid_back, mod_path, id_icon, lan_path, id_back, submit_icon, cancel_icon, ok_icon, searchbar_icon, searchbar_back, math_back, math_icon, 
                    rannumber_icon, rannumber_back, ranstring_icon, ranstring_back, logo_path, cuslogo_path)
                    from UI.strings_id_generator import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, 
                    str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_33, str_34, str_35, str_36, str_37, str_38, str_39, str_40, str_41, 
                    str_42, str_43, str_44, str_45, str_46, str_47, str_48, str_49, str_50, str_51, str_52, str_53, str_54, str_55, str_56, str_57, str_58, str_59, str_60, str_61, str_62, str_63, 
                    str_64, str_65, str_66, str_67, str_68, str_h1, str_h2)
                    from UI.skin import skin_mode
                    from UI.url import parsweb

                    lan = lan_path()
                    skin =mod_path()
                    coo = id_back()
                    bor = borid_back()
                    wurl= wurl_path()

                    # [SCRIPT:ACTIVE_DOCUMENT] Get active document and UIDocument
                    doc = __revit__.ActiveUIDocument.Document
                    uidoc = __revit__.ActiveUIDocument
                    with forms.ProgressBar(title='', indeterminate=True):

                        # [UI:ID_GENERATOR_FORM] Define ID Generator form
                        class ID_GENERATOR(Form):
                            def __init__(self, doc):
                                """
                                This function initializes the ID Generator form.

                                Workflow:
                                1. Sets up the form properties, including size, background color, and icon.
                                2. Initializes the report lists to store the results of the ID generation.
                                3. Creates and configures the radio buttons for the different ID generation options.
                                4. Creates and configures the submit button and the "Created by" label.
                                5. Adds the controls to the form.

                                Key Features:
                                - Provides a user-friendly interface for generating IDs.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                # [UI:FORM_INIT] Initialize form properties
                                self.Text = str_1(lan)
                                self.Width = 900
                                self.Height = 600
                                self.BackColor = Color.White
                                self.doc = doc
                                self.CenterToScreen()
                                self.Icon = Icon(id_icon())

                                # [SCRIPT:REPORT_LISTS] Initialize report lists
                                self.report_element_id=[]
                                self.report_element_name=[]
                                self.report_category_of_elements=[]
                                self.report_parameter_name=[]
                                self.report_parameter_type=[]
                                self.report_generation_methode = []
                                self.report_parameter_previous_value=[]
                                self.report_parameter_new_value=[]

                                # [UI:RADIO_BUTTON_OPTION1] Count elements from '0' or '1' to 'n' :   'ID=...n'"
                                self.radioButton01 = RadioButton()
                                self.radioButton01.Appearance = 0  
                                self.radioButton01.Text = str_2(lan)
                                self.radioButton01.Width = 800
                                self.radioButton01.Height = 50
                                self.radioButton01.MaximumSize = Size(555,30)
                                self.radioButton01.Left = 50
                                self.radioButton01.Top = 40
                                self.radioButton01.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton01.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION2] Get element Id as reference and add the Count before element Id:   'ID=(...n)ElementId'"
                                self.radioButton2 = RadioButton()
                                self.radioButton2.Appearance = 0  
                                self.radioButton2.Text = str_3(lan)
                                self.radioButton2.Width = 800
                                self.radioButton2.Height = 50
                                self.radioButton2.MaximumSize = Size(555,30)
                                self.radioButton2.Left = 50
                                self.radioButton2.Top = 80
                                self.radioButton2.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton2.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION3] Get element Id as reference and add the Count after element Id:   'ID=ElementId(...n)'"
                                self.radioButton3 = RadioButton()
                                self.radioButton3.Appearance = 0  
                                self.radioButton3.Text = str_4(lan)
                                self.radioButton3.Width = 800
                                self.radioButton3.Height = 50
                                self.radioButton3.MaximumSize = Size(555,30)
                                self.radioButton3.Left = 50
                                self.radioButton3.Top = 120
                                self.radioButton3.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton3.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION4] Math operation on element Id:    'ID=ElementId(+ - * /)n'"
                                self.radioButton4 = RadioButton()
                                self.radioButton4.Appearance = 0  
                                self.radioButton4.Text = str_5(lan)
                                self.radioButton4.Width = 800
                                self.radioButton4.Height = 50
                                self.radioButton4.MaximumSize = Size(555,30)
                                self.radioButton4.Left = 50
                                self.radioButton4.Top = 160
                                self.radioButton4.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton4.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION5] Random integer with specified number of digits:    'ID=Random integer'"
                                self.radioButton5 = RadioButton()
                                self.radioButton5.Appearance = 0  
                                self.radioButton5.Text = str_6(lan)
                                self.radioButton5.Width = 800
                                self.radioButton5.Height = 50
                                self.radioButton5.MaximumSize = Size(555,30)
                                self.radioButton5.Left = 50
                                self.radioButton5.Top = 200
                                self.radioButton5.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton5.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION6] Random string with specified number of leters:    'ID=Random string'"
                                self.radioButton6 = RadioButton()
                                self.radioButton6.Appearance = 0  
                                self.radioButton6.Text = str_7(lan) 
                                self.radioButton6.Width = 800
                                self.radioButton6.Height = 50
                                self.radioButton6.MaximumSize = Size(555,30)
                                self.radioButton6.Left = 50
                                self.radioButton6.Top = 240
                                self.radioButton6.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton6.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION7] ElementId befor a random integer with specified number of digits:    'ID=ElementId(Random integer)'"
                                self.radioButton7 = RadioButton()
                                self.radioButton7.Appearance = 0  
                                self.radioButton7.Text = str_8(lan)
                                self.radioButton7.Width = 800
                                self.radioButton7.Height = 50
                                self.radioButton7.MaximumSize = Size(555,30)
                                self.radioButton7.Left = 50
                                self.radioButton7.Top = 280
                                self.radioButton7.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton7.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION8] ElementId after a random integer with specified number of digits:    'ID=(Random integer)ElementId'"
                                self.radioButton8 = RadioButton()
                                self.radioButton8.Appearance = 0  
                                self.radioButton8.Text = str_9(lan)
                                self.radioButton8.Width = 800
                                self.radioButton8.Height = 50
                                self.radioButton8.MaximumSize = Size(555,30)
                                self.radioButton8.Left = 50
                                self.radioButton8.Top = 320
                                self.radioButton8.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton8.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION9] ElementId befor a random string with specified number of characters:    'ID=ElementId(Random string)'"
                                self.radioButton9 = RadioButton()
                                self.radioButton9.Appearance = 0  
                                self.radioButton9.Text = str_10(lan)
                                self.radioButton9.Width = 800
                                self.radioButton9.Height = 50
                                self.radioButton9.MaximumSize = Size(555,30)
                                self.radioButton9.Left = 50
                                self.radioButton9.Top = 360
                                self.radioButton9.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton9.CheckedChanged += self.RadioChanged

                                # [UI:RADIO_BUTTON_OPTION10] ElementId after a random string with specified number of characters:    'ID=(Random string)ElementId'"
                                self.radioButton10 = RadioButton()
                                self.radioButton10.Appearance = 0  
                                self.radioButton10.Text = str_11(lan)
                                self.radioButton10.Width = 800
                                self.radioButton10.Height = 50
                                self.radioButton10.MaximumSize = Size(555,30)
                                self.radioButton10.Left = 50
                                self.radioButton10.Top = 400
                                self.radioButton10.CheckedChanged += self.radioButton_checked_changed
                                self.radioButton10.CheckedChanged += self.RadioChanged

                                # [UI:BUTTON] Create and configure submit button
                                self.button = Button()
                                self.button.Width = 40
                                self.button.Height = 40
                                self.button.Left = (self.Width - self.button.Width - 10) // 2
                                self.button.Top = 460
                                icon_button = submit_icon()
                                self.button.Image = Icon(icon_button).ToBitmap()
                                self.button.Click += self.button_click

                                # [UI:CREATED_BY_LABEL] Create and configure "Created by" label
                                self.created_by_label = Label()
                                self.created_by_label.AutoSize = True
                                self.created_by_label.Text = "BIM Pars"
                                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                self.created_by_label.ForeColor = Color.Blue
                                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                self.created_by_label.Cursor = Cursors.Hand  
                                self.created_by_label.Click += self.Label_Click
                                self.Controls.Add(self.created_by_label)
                                
                                # [UI:PICTUREBOX] Create and configure picture box
                                self.pictureBox = PictureBox()
                                self.pictureBox = PictureBox()
                                self.pictureBox.Location = Point(610, 0) 
                                self.pictureBox.Size = Size(290, 477)  
                                self.Controls.Add(self.pictureBox)
                                icon_path = skin_mode(skin, coo, bor)
                                image = Bitmap(icon_path)
                                self.pictureBox.Image = image

                                # [UI:ADD_CONTROLS] Add radio buttons and button to form
                                self.Controls.Add(self.radioButton01)
                                self.Controls.Add(self.radioButton2)
                                self.Controls.Add(self.radioButton3)
                                self.Controls.Add(self.radioButton4)
                                self.Controls.Add(self.radioButton5)
                                self.Controls.Add(self.radioButton6)
                                self.Controls.Add(self.radioButton7)
                                self.Controls.Add(self.radioButton8)
                                self.Controls.Add(self.radioButton9)
                                self.Controls.Add(self.radioButton10)

                                # [UI:ENABLE_BUTTON] Disable button initially
                                self.button.Enabled = False
                                self.Controls.Add(self.button)
                                self.checked_radiobutton = None

                            # [EVENT_HANDLER:LABEL_CLICK] Handle "Created by" label click
                            def Label_Click(self, sender, event):
                                """
                                This function handles the event when the "Created by" label is clicked.

                                Workflow:
                                1. Opens the specified URL in the default web browser.

                                Key Features:
                                - Provides a quick way to access the creator's website.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                url = parsweb(wurl)
                                webbrowser.open(url)

                            # [EVENT_HANDLER:RADIO_CHANGED] Handle radio button change
                            def RadioChanged(self, sender, e):
                                """
                                This function handles the event when a radio button is changed in the ID Generator form.

                                Workflow:
                                1. Enables the submit button if any radio button is selected.
                                2. Disables the submit button if no radio button is selected.

                                Key Features:
                                - Provides a user-friendly interface for generating IDs.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if self.radioButton01:
                                    self.button.Enabled = True
                                elif self.radioButton2:
                                    self.button.Enabled = True
                                elif self.radioButton3:
                                    self.button.Enabled = True
                                elif self.radioButton4:
                                    self.button.Enabled = True
                                elif self.radioButton5:
                                    self.button.Enabled = True
                                elif self.radioButton6:
                                    self.button.Enabled = True
                                elif self.radioButton7:
                                    self.button.Enabled = True
                                elif self.radioButton8:
                                    self.button.Enabled = True
                                elif self.radioButton9:
                                    self.button.Enabled = True
                                elif self.radioButton10:
                                    self.button.Enabled = True
                                else:
                                    self.button.Enabled = False

                            # [EVENT_HANDLER:RADIO_CHECKED_CHANGED] Handle radio button checked state change
                            def radioButton_checked_changed(self, sender, e):
                                """
                                This function handles the event when a radio button's checked state changes in the ID Generator form.

                                Workflow:
                                1. Ensures only one radio button is selected at a time.
                                2. Updates the currently checked radio button.

                                Key Features:
                                - Provides a user-friendly interface for generating IDs.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                radiobutton = sender
                                if radiobutton.Checked:
                                    if self.checked_radiobutton is not None and self.checked_radiobutton != radiobutton:
                                        self.checked_radiobutton.Checked = False
                                    self.checked_radiobutton = radiobutton

                            # [EVENT_HANDLER:BUTTON_CLICK] Handle submit button click
                            def button_click(self, sender, e):
                                """
                                This function handles the event when the submit button is clicked in the ID Generator form.

                                Workflow:
                                1. Checks if a radio button is selected.
                                2. Executes the corresponding script based on the selected radio button.
                                3. Closes the form after execution.

                                Key Features:
                                - Provides a user-friendly interface for generating IDs.
                                - Ensures proper handling of exceptions to maintain application stability.
                                """
                                if self.checked_radiobutton is not None:
                                    self.button.Enabled = True
                                    script_name = self.checked_radiobutton.Text
                                    script_result = self.execute_script(script_name)
                                    self.Close()

                            # [SCRIPT:EXECUTE_SCRIPT] Handle script execution based on selected option
                            def execute_script(self, script_name):
                                
                                # [OPTION_1:COUNT_ELEMENTS] Handle Option 1: Count elements from '0' or '1' to 'n'
                                if script_name.startswith(str_2(lan)):
                                    """
                                    This function handles the event when the "Option 1" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter and an option for generating IDs.
                                    2. Generates IDs based on the selected option.
                                    3. Sets the generated IDs as parameter values for the selected elements.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating IDs.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                    
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        if len(selection) == 0:
                                            forms.alert(str_12(lan), title=str_13(lan))
                                            sys.exit()
                                        else:
                                            # [UI:OPTION_1_FORM] Display Option 1 form
                                            icon_path = searchbar_icon()
                                            search_image_path = searchbar_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            radio_label = str_14(lan)
                                            radio_op1 = "0"
                                            radio_op2 = "1"
                                            parameter_label = str_15(lan)
                                            window_name = str_16(lan)
                                            url = parsweb(wurl)
                                            param, selected_option = mix_input1_radio2(icon_path, search_image_path, ok_icon_path, cancel_icon_path, radio_label, radio_op1, radio_op2, parameter_label, window_name, url) 
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, param, doc) 

                                            # [SCRIPT:REPORT_DATA] Prepare report data
                                            self.report_element_id = c1
                                            c_names= c_name(c1, doc)
                                            self.report_element_name = c_names 
                                            c_categories = c_category(c1, doc)
                                            self.report_category_of_elements = c_categories
                                            self.report_parameter_previous_value = c2

                                            if param is None:
                                                forms.alert(str_17(lan))
                                                sys.exit()
                                            
                                            # [OPTION_1:OPTION_1] Handle Option 1: Count from '0'
                                            if selected_option == "option 1":
                                                id_counter = 0
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        parameter.Set(str(id_counter))
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID= '"+radio_op1+" ... n'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()
                                                    
                                            # [OPTION_1:OPTION_2] Handle Option 2: Count from '1'
                                            elif selected_option == "option 2":
                                                id_counter = 1
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        parameter.Set(str(id_counter))
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID= '"+radio_op2+" ... n'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen
                                                        
                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,
                                                    TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_2:ID_GENERATOR] Handle Option 2: Count before element ID
                                elif script_name.startswith(str_3(lan)):
                                    """
                                    This function handles the event when the "Option 2" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter and an option for generating IDs.
                                    2. Generates IDs based on the selected option.
                                    3. Sets the generated IDs as parameter values for the selected elements.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating IDs.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        if len(selection) == 0:
                                            forms.alert(str_12(lan), title=str_13(lan))
                                            sys.exit()
                                        else:
                                            # [UI:OPTION_2_FORM] Display Option 2 form
                                            icon_path = searchbar_icon()
                                            search_image_path = searchbar_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            radio_label = str_14(lan)
                                            radio_op1 = "0"
                                            radio_op2 = "1"
                                            radio_label2 = str_24(lan)
                                            radio_op3 = str_25(lan)
                                            radio_op4 = str_26(lan)
                                            parameter_label = str_15(lan)
                                            window_name = str_16(lan)
                                            url = parsweb(wurl)
                                            param, seprator, selected_option1, selected_option2 = mix_input2_radio4(icon_path, search_image_path, ok_icon_path, cancel_icon_path, radio_label, radio_op1, radio_op2, radio_label2, radio_op3, radio_op4, parameter_label, window_name, url)
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, param, doc)

                                            # [SCRIPT:REPORT_DATA] Prepare report data
                                            self.report_element_id = c1
                                            c_names= c_name(c1, doc)
                                            self.report_element_name = c_names 
                                            c_categories = c_category(c1, doc)
                                            self.report_category_of_elements = c_categories
                                            self.report_parameter_previous_value = c2

                                            # [OPTION_2:OPTION_1] Handle Option 2: Count before element ID with separator
                                            if selected_option1 == "C1R1" and selected_option2 == "C2R1":
                                                id_counter = 0
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        element_id_with_counter = str(id_counter) + seprator + str(element_id) 
                                                        parameter.Set(element_id_with_counter)
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = '" + radio_op1 +" ... n' '"  + seprator +"' 'Element Id'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                            # [OPTION_2:OPTION_2] Handle Option 2: Count before element ID without separator
                                            elif selected_option1 == "C1R1" and selected_option2 == "C2R2":
                                                id_counter = 0
                                                if param is None:
                                                    forms.alert(str_17(lan))
                                                    sys.exit()
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        element_id_with_counter = str(id_counter) + str(element_id) 
                                                        parameter.Set(element_id_with_counter)
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = '" + radio_op1 +" ... n' "  +" 'Element Id'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()
                                                    
                                            # [OPTION_2:OPTION_3] Handle Option 2: Count before element ID with separator (starting from 1)
                                            elif selected_option1 == "C1R2" and selected_option2 == "C2R1":
                                                id_counter = 1
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        element_id_with_counter = str(id_counter) + seprator + str(element_id) 
                                                        parameter.Set(element_id_with_counter)
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = '" + radio_op2 +" ... n' '"  + seprator +"' 'Element Id'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                            # [OPTION_2:OPTION_4] Handle Option 2: Count before element ID without separator (starting from 1)
                                            elif selected_option1 == "C1R2" and selected_option2 == "C2R2":
                                                id_counter = 1
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        element_id_with_counter = str(element_id) + str(id_counter) 
                                                        parameter.Set(element_id_with_counter)
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = '" + radio_op2 +" ... n' "  +" 'Element Id'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()
                                            else:
                                                sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_3:ID_GENERATOR] Handle Option 3: Count after element ID
                                elif script_name.startswith(str_4(lan)):
                                    """
                                    This function handles the event when the "Option 3" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter and an option for generating IDs.
                                    2. Generates IDs based on the selected option.
                                    3. Sets the generated IDs as parameter values for the selected elements.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating IDs.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        if len(selection) == 0:
                                            forms.alert(str_12(lan), title=str_13(lan))
                                            sys.exit()
                                        else:
                                            # [UI:OPTION_3_FORM] Display Option 3 form
                                            icon_path = searchbar_icon()
                                            search_image_path = searchbar_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            radio_label = str_14(lan)
                                            radio_op1 = "0"
                                            radio_op2 = "1"
                                            radio_label2 = str_24(lan)
                                            radio_op3 = str_25(lan)
                                            radio_op4 = str_26(lan)
                                            parameter_label = str_15(lan)
                                            window_name = str_16(lan)
                                            url = parsweb(wurl)
                                            param, seprator, selected_option1, selected_option2 = mix_input2_radio4(icon_path, search_image_path, ok_icon_path, cancel_icon_path, radio_label, radio_op1, radio_op2, radio_label2, radio_op3, radio_op4, parameter_label, window_name, url)
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, param, doc) 

                                            # [SCRIPT:REPORT_DATA] Prepare report data
                                            self.report_element_id = c1
                                            c_names= c_name(c1, doc)
                                            self.report_element_name = c_names 
                                            c_categories = c_category(c1, doc)
                                            self.report_category_of_elements = c_categories
                                            self.report_parameter_previous_value = c2  

                                            # [OPTION_3:OPTION_1] Handle Option 3: Count after element ID with separator
                                            if selected_option1 == "C1R1" and selected_option2 == "C2R1":
                                                id_counter = 0
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        element_id_with_counter = str(element_id) + seprator + str(id_counter)
                                                        parameter.Set(element_id_with_counter)
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = " +"'Element Id' '"+seprator+"' '"+radio_op1+" ... n'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                            # [OPTION_3:OPTION_2] Handle Option 3: Count after element ID without separator
                                            elif selected_option1 == "C1R1" and selected_option2 == "C2R2":
                                                id_counter = 0
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        element_id_with_counter = str(element_id) + str(id_counter) 
                                                        parameter.Set(element_id_with_counter)
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = " +"'Element Id' "+" '"+radio_op1+" ... n'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                            # [OPTION_3:OPTION_3] Handle Option 3: Count after element ID with separator (starting from 1)
                                            elif selected_option1 == "C1R2" and selected_option2 == "C2R1":
                                                id_counter = 1
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        element_id_with_counter = str(element_id) + seprator + str(id_counter) 
                                                        parameter.Set(element_id_with_counter)
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = " +"'Element Id' '"+seprator+"' '"+radio_op2+" ... n'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()
                                            
                                            # [OPTION_3:OPTION_4] Handle Option 3: Count after element ID without separator (starting from 1)
                                            elif selected_option1 == "C1R2" and selected_option2 == "C2R2":
                                                id_counter = 1
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    parameter = element.LookupParameter(param)
                                                    if parameter is None:
                                                        from pyrevit import script
                                                        output = script.get_output()
                                                        a = output.linkify(element.Id)
                                                        all_elements_have_param = False
                                                    elif parameter.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        element_id_with_counter = str(element_id) + str(id_counter) 
                                                        parameter.Set(element_id_with_counter)
                                                        id_counter += 1
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param, doc)  
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = " +"'Element Id' "+" '"+radio_op2+" ... n'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                            else:
                                                sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_4:MATH_OPERATION] Handle Option 4: Math operation on element ID
                                elif script_name.startswith(str_5(lan)):
                                    """
                                    This function handles the event when the "Option 4" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter and a math operation for generating IDs.
                                    2. Generates IDs based on the selected math operation.
                                    3. Sets the generated IDs as parameter values for the selected elements.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating IDs.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        if len(selection) == 0:
                                            forms.alert(str_12(lan), title=str_13(lan))
                                            sys.exit()
                                        else:
                                            # [UI:OPTION_4_FORM] Display Option 4 form
                                            icon_path = math_icon()
                                            search_image_path = math_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            parameter_label = str_15(lan)
                                            value_label = str_32(lan)
                                            window_name = str_33(lan)
                                            note = str_34(lan)
                                            url = parsweb(wurl)
                                            param_name, math_operations = double_input_plusnote(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, url)
                                            all_elements_have_param = True
                                            any_parameter_not_text = False
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, param_name, doc)  

                                            # [SCRIPT:REPORT_DATA] Prepare report data
                                            self.report_element_id = c1
                                            c_names= c_name(c1, doc)
                                            self.report_element_name = c_names 
                                            c_categories = c_category(c1, doc)
                                            self.report_category_of_elements = c_categories
                                            self.report_parameter_previous_value = c2

                                            if math_operations is None:
                                                forms.alert(str_35(lan))
                                                sys.exit()
                                            
                                            # [SCRIPT:TRANSACTION] Start transaction
                                            t = Transaction(doc, "Modify Elements")
                                            t.Start()
                                            for element_id in selection:
                                                element = doc.GetElement(element_id)
                                                param = element.LookupParameter(param_name)
                                                if param is not None:
                                                    if param.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        try:
                                                            element_value = element_id.IntegerValue
                                                            operations = math_operations.split(',')
                                                            for operation in operations:
                                                                element_value = eval(str(element_value) + operation)
                                                            new_param_value = str(element_value)
                                                            param.Set(new_param_value)
                                                        except:
                                                            forms.alert(str_36(lan))
                                                            t.RollBack()
                                                            sys.exit()
                                                else:
                                                    all_elements_have_param = False
                                            if all_elements_have_param:
                                                if any_parameter_not_text:
                                                    forms.alert(str_18(lan))
                                                    t.RollBack()
                                                else:
                                                    t.Commit()

                                                    # [SCRIPT:REPORT] Generate report
                                                    c3=p_values(selection, param_name, doc) 
                                                    self.report_parameter_new_value = c3
                                                    generation_methode = ["ID = 'Element Id' '"+math_operations+"'"] *len(c1)
                                                    self.report_generation_methode = generation_methode
                                                    param_n_gen = [param_name] *len(c1)
                                                    self.report_parameter_name = param_n_gen
                                                    from sajdmo.scripts.pset import c_storage_type
                                                    param_typ_gen = c_storage_type(param_n_gen, element)
                                                    self.report_parameter_type = param_typ_gen

                                                    # [UI:RESULT_DIALOG] Show result dialog
                                                    from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogResult)
                                                    import sys
                                                    title = str_19(lan)
                                                    dialog = TaskDialog(title)
                                                    dialog.MainContent = str_20(lan)
                                                    dialog.TitleAutoPrefix = False
                                                    dialog.AllowCancellation = True
                                                    dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                    dialog.DefaultButton = TaskDialogResult.None
                                                    result = dialog.Show()
                                                    if result == TaskDialogResult.Ok:
                                                        sys.exit()
                                                    if result == TaskDialogResult.Cancel:
                                                        sys.exit() 
                                            else:
                                                forms.alert(str_21(lan))
                                                t.RollBack()
                                                sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_5:RANDOM_INTEGER] Handle Option 5: Random integer with specified number of digits
                                elif script_name.startswith(str_6(lan)):
                                    """
                                    This function handles the event when the "Option 5" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter and a range for generating random integers.
                                    2. Generates unique random integers within the specified range.
                                    3. Sets the generated integers as parameter values for the selected elements.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating random integers.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        import random
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [UI:OPTION_5_FORM] Display Option 5 form
                                        icon_path = rannumber_icon()
                                        search_image_path = rannumber_back()
                                        ok_icon_path = ok_icon()
                                        cancel_icon_path = cancel_icon()
                                        parameter_label = str_15(lan)
                                        value_label = str_37(lan)
                                        window_name = str_38(lan)
                                        url = parsweb(wurl)
                                        param_name, res = mix_input_combo(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, url)
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        c1=int_ids(selection, doc)
                                        c2=p_values(selection, param_name, doc)

                                        # [SCRIPT:REPORT_DATA] Prepare report data
                                        self.report_element_id = c1
                                        c_names= c_name(c1, doc)
                                        self.report_element_name = c_names 
                                        c_categories = c_category(c1, doc)
                                        self.report_category_of_elements = c_categories
                                        self.report_parameter_previous_value = c2

                                        # [SCRIPT:VALIDATION] Check if any element is selected
                                        if len(selection) == 0:
                                            forms.alert(str_12(lan), title=str_13(lan))
                                            sys.exit()
                                        else:
                                            all_elements_have_param = True
                                            any_parameter_not_text = False
                                            if param_name is None:
                                                forms.alert(str_30(lan))
                                                sys.exit()
                                            
                                            # [SCRIPT:RANGE_OPTIONS] Define range options for random integers
                                            ranges = [
                                                ('3 digits', 100, 999),
                                                ('4 digits', 1000, 9999),
                                                ('5 digits', 10000, 99999),
                                                ('6 digits', 100000, 999999),
                                                ('7 digits', 1000000, 9999999),
                                                ('8 digits', 10000000, 99999999),
                                                ('9 digits', 100000000, 999999999),
                                                ('10 digits', 1000000000, 9999999999),
                                                ('11 digits', 10000000000, 99999999999),
                                                ('12 digits', 100000000000, 999999999999),
                                                ('13 digits', 1000000000000, 9999999999999),
                                                ('14 digits', 10000000000000, 99999999999999),
                                                ('15 digits', 100000000000000, 999999999999999),
                                                ('16 digits', 1000000000000000, 9999999999999999)
                                            ]
                                            if res is None:
                                                forms.alert(str_23(lan))
                                                sys.exit()
                                            selected_range = None
                                            for item in ranges:
                                                if item[0] == res:
                                                    selected_range = item
                                                    break
                                            if selected_range is None:
                                                forms.alert(str_22(lan))
                                                sys.exit()
                                            
                                            # [SCRIPT:TRANSACTION] Start transaction
                                            t = Transaction(doc, "Modify Elements")
                                            t.Start()
                                            min_value = selected_range[1]
                                            max_value = selected_range[2]
                                            generated_numbers = set()
                                            for element_id in selection:
                                                element = doc.GetElement(element_id)
                                                param = element.LookupParameter(param_name)
                                                if param is not None:
                                                    if param.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        # [SCRIPT:GENERATE_RANDOM] Generate a unique random number within the specified range
                                                        random_number = str(random.randint(min_value, max_value))
                                                        while random_number in generated_numbers:
                                                            random_number = str(random.randint(min_value, max_value))
                                                        generated_numbers.add(random_number)
                                                        param.Set(random_number)
                                                else:
                                                    all_elements_have_param = False
                                            if all_elements_have_param:
                                                if any_parameter_not_text:
                                                    forms.alert(str_18(lan))
                                                    t.RollBack()
                                                else:
                                                    t.Commit()

                                                    # [SCRIPT:REPORT] Generate report
                                                    c3=p_values(selection, param_name, doc) 
                                                    self.report_parameter_new_value = c3
                                                    generation_methode = ["ID = 'Random "+res+"'"] *len(c1)
                                                    self.report_generation_methode = generation_methode
                                                    param_n_gen = [param_name] *len(c1)
                                                    self.report_parameter_name = param_n_gen
                                                    from sajdmo.scripts.pset import c_storage_type
                                                    param_typ_gen = c_storage_type(param_n_gen, element)
                                                    self.report_parameter_type = param_typ_gen

                                                    # [UI:RESULT_DIALOG] Show result dialog
                                                    from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                    import sys
                                                    title = str_19(lan)
                                                    dialog = TaskDialog(title)
                                                    dialog.MainContent = str_20(lan)
                                                    dialog.TitleAutoPrefix = False
                                                    dialog.AllowCancellation = True
                                                    dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                    dialog.DefaultButton = TaskDialogResult.None
                                                    result = dialog.Show()
                                                    if result == TaskDialogResult.Ok:
                                                        sys.exit()
                                                    if result == TaskDialogResult.Cancel:
                                                        sys.exit()
                                            else:
                                                forms.alert(str_21(lan))
                                                t.RollBack()
                                                sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_6:RANDOM_STRING] Handle Option 6: Random string with specified number of characters
                                elif script_name.startswith(str_7(lan)):
                                    """
                                    This function handles the event when the "Option 6" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter and a length for generating random strings.
                                    2. Generates unique random strings with the specified length.
                                    3. Sets the generated strings as parameter values for the selected elements.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating random strings.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        import random
                                        import string
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        if len(selection) == 0:
                                            forms.alert(str_12(lan), title=str_13(lan))
                                            sys.exit()
                                        else:
                                            all_elements_have_param = True
                                            any_parameter_not_text = False
                                            
                                            # [UI:OPTION_6_FORM] Display Option 6 form
                                            icon_path = ranstring_icon()
                                            search_image_path = ranstring_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            parameter_label = str_15(lan)
                                            value_label = str_39(lan)
                                            window_name = str_40(lan)
                                            url = parsweb(wurl)
                                            param_name, res = mix_input_combo2(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, url)
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, param_name, doc)   

                                            # [SCRIPT:REPORT_DATA] Prepare report data
                                            self.report_element_id = c1
                                            c_names= c_name(c1, doc)
                                            self.report_element_name = c_names 
                                            c_categories = c_category(c1, doc)
                                            self.report_category_of_elements = c_categories
                                            self.report_parameter_previous_value = c2

                                            if param_name is None:
                                                forms.alert(str_30(lan))
                                                sys.exit()
                                            
                                            # [SCRIPT:RANGE_OPTIONS] Define range options for random strings
                                            ranges = [
                                                ('2 characters', 2),
                                                ('3 characters', 3),
                                                ('4 characters', 4),
                                                ('5 characters', 5),
                                                ('6 characters', 6),
                                                ('7 characters', 7),
                                                ('8 characters', 8),
                                                ('9 characters', 9),
                                                ('10 characters', 10),
                                                ('11 characters', 11),
                                                ('12 characters', 12),
                                                ('13 characters', 13),
                                                ('14 characters', 14),
                                                ('15 characters', 15),
                                                ('16 characters', 16)
                                            ]
                                            if res is None:
                                                forms.alert(str_23(lan))
                                                sys.exit()
                                            selected_range = None
                                            for item in ranges:
                                                if item[0] == res:
                                                    selected_range = item
                                                    break
                                            if selected_range is None:
                                                forms.alert(str_22(lan))
                                                sys.exit()
                                            
                                            # [SCRIPT:TRANSACTION] Start transaction
                                            t = Transaction(doc, "Modify Elements")
                                            t.Start()
                                            character_count = selected_range[1]
                                            generated_strings = set()
                                            for element_id in selection:
                                                element = doc.GetElement(element_id)
                                                param = element.LookupParameter(param_name)
                                                if param is not None:
                                                    if param.StorageType != StorageType.String:
                                                        any_parameter_not_text = True
                                                    else:
                                                        # [SCRIPT:GENERATE_RANDOM] Generate a unique random string with the specified length
                                                        import uuid
                                                        random_string = str(uuid.uuid4())[:character_count]
                                                        while random_string in generated_strings:
                                                            random_string = str(uuid.uuid4())[:character_count]
                                                        generated_strings.add(random_string)
                                                        param.Set(random_string)
                                                else:
                                                    all_elements_have_param = False
                                            if all_elements_have_param:
                                                if any_parameter_not_text:
                                                    forms.alert(str_18(lan))
                                                    t.RollBack()
                                                else:
                                                    t.Commit()

                                                    # [SCRIPT:REPORT] Generate report
                                                    c3=p_values(selection, param_name, doc) 
                                                    self.report_parameter_new_value = c3
                                                    generation_methode = ["ID = 'Random "+res+"'"] *len(c1)
                                                    self.report_generation_methode = generation_methode
                                                    param_n_gen = [param_name] *len(c1)
                                                    self.report_parameter_name = param_n_gen
                                                    from sajdmo.scripts.pset import c_storage_type
                                                    param_typ_gen = c_storage_type(param_n_gen, element)
                                                    self.report_parameter_type = param_typ_gen

                                                    # [UI:RESULT_DIALOG] Show result dialog
                                                    from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                    import sys
                                                    title = str_19(lan)
                                                    dialog = TaskDialog(title)
                                                    dialog.MainContent = str_20(lan)
                                                    dialog.TitleAutoPrefix = False
                                                    dialog.AllowCancellation = True
                                                    dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                    dialog.DefaultButton = TaskDialogResult.None
                                                    result = dialog.Show()
                                                    if result == TaskDialogResult.Ok:
                                                        sys.exit()
                                                    if result == TaskDialogResult.Cancel:
                                                        sys.exit()
                                            else:
                                                forms.alert(str_21(lan))
                                                t.RollBack()
                                                sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_7:ELEMENTID_RANDOM_INTEGER] Handle Option 7: ElementId before a random integer with specified number of digits
                                elif script_name.startswith(str_8(lan)):
                                    """
                                    This function handles the event when the "Option 7" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter, a separator, and a range for generating random integers.
                                    2. Generates unique random integers within the specified range.
                                    3. Sets the generated integers as parameter values for the selected elements, prefixed by the element ID.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating random integers prefixed by element IDs.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        import random
                                        import string
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        
                                        # [UI:OPTION_7_FORM] Display Option 7 form
                                        icon_path = rannumber_icon()
                                        search_image_path = rannumber_back()
                                        ok_icon_path = ok_icon()
                                        cancel_icon_path = cancel_icon()
                                        parameter_label = str_15(lan)
                                        value_label = str_37(lan)
                                        window_name = str_41(lan)
                                        seprator_label = str_28(lan)
                                        radio_op1 = str_25(lan)
                                        radio_op2 = str_26(lan)
                                        url = parsweb(wurl)
                                        param_name, selected_option, seprator, res = mix_2input_1radio_combo(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, seprator_label, radio_op1, radio_op2, url) 
                                        c1=int_ids(selection, doc)
                                        c2=p_values(selection, param_name, doc)  

                                        # [SCRIPT:REPORT_DATA] Prepare report data
                                        self.report_element_id = c1
                                        c_names= c_name(c1, doc)
                                        self.report_element_name = c_names 
                                        c_categories = c_category(c1, doc)
                                        self.report_category_of_elements = c_categories
                                        self.report_parameter_previous_value = c2

                                        if selected_option == "C1R1":
                                            import random
                                            from pyrevit import script
                                            
                                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                            doc = __revit__.ActiveUIDocument.Document
                                            uidoc = __revit__.ActiveUIDocument
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                    
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            if len(selection) == 0:
                                                forms.alert(str_12(lan), title=str_13(lan))
                                                sys.exit()
                                            else:
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                if param_name is None:
                                                    forms.alert(str_30(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:RANGE_OPTIONS] Define range options for random integers
                                                ranges = [
                                                    ('3 digits', 100, 999),
                                                    ('4 digits', 1000, 9999),
                                                    ('5 digits', 10000, 99999),
                                                    ('6 digits', 100000, 999999),
                                                    ('7 digits', 1000000, 9999999),
                                                    ('8 digits', 10000000, 99999999),
                                                    ('9 digits', 100000000, 999999999),
                                                    ('10 digits', 1000000000, 9999999999),
                                                    ('11 digits', 10000000000, 99999999999),
                                                    ('12 digits', 100000000000, 999999999999),
                                                    ('13 digits', 1000000000000, 9999999999999),
                                                    ('14 digits', 10000000000000, 99999999999999),
                                                    ('15 digits', 100000000000000, 999999999999999),
                                                    ('16 digits', 1000000000000000, 9999999999999999)
                                                ]
                                                if res is None:
                                                    forms.alert(str_23(lan))
                                                    sys.exit()
                                                if seprator is None:
                                                    forms.alert(str_42(lan))
                                                    sys.exit()
                                                selected_range = None
                                                for item in ranges:
                                                    if item[0] == res:
                                                        selected_range = item
                                                        break
                                                if selected_range is None:
                                                    forms.alert(str_22(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                min_value = selected_range[1]
                                                max_value = selected_range[2]
                                                generated_numbers = set()
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    param = element.LookupParameter(param_name)
                                                    if param is not None:
                                                        if param.StorageType != StorageType.String:
                                                            any_parameter_not_text = True
                                                        else:
                                                            # [SCRIPT:GENERATE_RANDOM] Generate a unique random number within the specified range
                                                            random_number = str(random.randint(min_value, max_value))
                                                            while random_number in generated_numbers:
                                                                random_number = str(random.randint(min_value, max_value))
                                                            generated_numbers.add(random_number)
                                                            new_param_value = str(element_id.IntegerValue) + seprator + random_number  
                                                            param.Set(new_param_value)
                                                    else:
                                                        all_elements_have_param = False
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param_name, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = 'Element Id' '"+seprator+"' 'Random "+res+"'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param_name] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen
                                                        title=str_43(lan)
                                                        columns = [str_44(lan), str_45(lan), str_46(lan)]
                                                        output.print_image(id_icon())
                                                        output.print_code(str_47(lan) + str_61(lan))
                                                        output.print_code(str_62(lan) + res)
                                                        output.print_code(str_63(lan) + seprator)
                                                        output.print_code(str_50(lan)+ param_name)
                                                        print_table_from_lists(c1, c2, c3, columns, title)

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                        if selected_option == "C1R2":
                                            import random
                                            from pyrevit import script
                                            
                                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                            doc = __revit__.ActiveUIDocument.Document
                                            uidoc = __revit__.ActiveUIDocument
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            if len(selection) == 0:
                                                forms.alert(str_12(lan), title=str_13(lan))
                                                sys.exit()
                                            else:
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                if param_name is None:
                                                    forms.alert(str_30(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:RANGE_OPTIONS] Define range options for random integers
                                                ranges = [
                                                    ('3 digits', 100, 999),
                                                    ('4 digits', 1000, 9999),
                                                    ('5 digits', 10000, 99999),
                                                    ('6 digits', 100000, 999999),
                                                    ('7 digits', 1000000, 9999999),
                                                    ('8 digits', 10000000, 99999999),
                                                    ('9 digits', 100000000, 999999999),
                                                    ('10 digits', 1000000000, 9999999999),
                                                    ('11 digits', 10000000000, 99999999999),
                                                    ('12 digits', 100000000000, 999999999999),
                                                    ('13 digits', 1000000000000, 9999999999999),
                                                    ('14 digits', 10000000000000, 99999999999999),
                                                    ('15 digits', 100000000000000, 999999999999999),
                                                    ('16 digits', 1000000000000000, 9999999999999999)
                                                ]
                                                if res is None:
                                                    forms.alert(str_23(lan))
                                                    sys.exit()
                                                selected_range = None
                                                for item in ranges:
                                                    if item[0] == res:
                                                        selected_range = item
                                                        break
                                                if selected_range is None:
                                                    forms.alert(str_22(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                min_value = selected_range[1]
                                                max_value = selected_range[2]
                                                generated_numbers = set()
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    param = element.LookupParameter(param_name)
                                                    if param is not None:
                                                        if param.StorageType != StorageType.String:
                                                            any_parameter_not_text = True
                                                        else:
                                                            # [SCRIPT:GENERATE_RANDOM] Generate a unique random number within the specified range
                                                            random_number = str(random.randint(min_value, max_value))
                                                            while random_number in generated_numbers:
                                                                random_number = str(random.randint(min_value, max_value))
                                                            generated_numbers.add(random_number)
                                                            new_param_value = str(element_id.IntegerValue) + random_number  
                                                            param.Set(new_param_value)
                                                    else:
                                                        all_elements_have_param = False
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()
                                                        
                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param_name, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = 'Element Id' 'Random "+res+"'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param_name] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_8:ELEMENTID_RANDOM_INTEGER] Handle Option 8: ElementId after a random integer with specified number of digits
                                elif script_name.startswith(str_9(lan)):
                                    """
                                    This function handles the event when the "Option 8" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter, a separator, and a range for generating random integers.
                                    2. Generates unique random integers within the specified range.
                                    3. Sets the generated integers as parameter values for the selected elements, suffixed by the element ID.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating random integers suffixed by element IDs.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        import random
                                        import string
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        
                                        # [UI:OPTION_8_FORM] Display Option 8 form
                                        icon_path = rannumber_icon()
                                        search_image_path = rannumber_back()
                                        ok_icon_path = ok_icon()
                                        cancel_icon_path = cancel_icon()
                                        parameter_label = str_15(lan)
                                        value_label = str_37(lan)
                                        window_name = str_41(lan)
                                        seprator_label = str_28(lan)
                                        radio_op1 = str_25(lan)
                                        radio_op2 = str_26(lan)
                                        url = parsweb(wurl)
                                        param_name, selected_option, seprator, res = mix_2input_1radio_combo(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, seprator_label, radio_op1, radio_op2, url)
                                        c1=int_ids(selection, doc)
                                        c2=p_values(selection, param_name, doc) 

                                        # [SCRIPT:REPORT_DATA] Prepare report data
                                        self.report_element_id = c1
                                        c_names= c_name(c1, doc)
                                        self.report_element_name = c_names 
                                        c_categories = c_category(c1, doc)
                                        self.report_category_of_elements = c_categories
                                        self.report_parameter_previous_value = c2

                                        if selected_option == "C1R1":
                                            import random
                                        
                                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                            doc = __revit__.ActiveUIDocument.Document
                                            uidoc = __revit__.ActiveUIDocument
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            if len(selection) == 0:
                                                forms.alert(str_12(lan), title=str_13(lan))
                                                sys.exit()
                                            else:
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                if param_name is None:
                                                    forms.alert(str_30(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:RANGE_OPTIONS] Define range options for random integers
                                                ranges = [
                                                    ('3 digits', 100, 999),
                                                    ('4 digits', 1000, 9999),
                                                    ('5 digits', 10000, 99999),
                                                    ('6 digits', 100000, 999999),
                                                    ('7 digits', 1000000, 9999999),
                                                    ('8 digits', 10000000, 99999999),
                                                    ('9 digits', 100000000, 999999999),
                                                    ('10 digits', 1000000000, 9999999999),
                                                    ('11 digits', 10000000000, 99999999999),
                                                    ('12 digits', 100000000000, 999999999999),
                                                    ('13 digits', 1000000000000, 9999999999999),
                                                    ('14 digits', 10000000000000, 99999999999999),
                                                    ('15 digits', 100000000000000, 999999999999999),
                                                    ('16 digits', 1000000000000000, 9999999999999999)
                                                ]
                                                if res is None:
                                                    forms.alert(str_23(lan))
                                                    sys.exit()
                                                if seprator is None:
                                                    forms.alert(str_42(lan))
                                                    sys.exit()
                                                selected_range = None
                                                for item in ranges:
                                                    if item[0] == res:
                                                        selected_range = item
                                                        break
                                                if selected_range is None:
                                                    forms.alert(str_22(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                min_value = selected_range[1]
                                                max_value = selected_range[2]
                                                generated_numbers = set()
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    param = element.LookupParameter(param_name)
                                                    if param is not None:
                                                        if param.StorageType != StorageType.String:
                                                            any_parameter_not_text = True
                                                        else:
                                                            # [SCRIPT:GENERATE_RANDOM] Generate a unique random number within the specified range
                                                            random_number = str(random.randint(min_value, max_value))
                                                            while random_number in generated_numbers:
                                                                random_number = str(random.randint(min_value, max_value))
                                                            generated_numbers.add(random_number)
                                                            new_param_value = random_number + seprator + str(element_id.IntegerValue)  
                                                            param.Set(new_param_value)
                                                    else:
                                                        all_elements_have_param = False
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param_name, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = 'Random "+res+"' '"+seprator+"' 'Element Id'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param_name] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                        if selected_option == "C1R2":
                                            import random
                                        
                                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                            doc = __revit__.ActiveUIDocument.Document
                                            uidoc = __revit__.ActiveUIDocument
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            if len(selection) == 0:
                                                forms.alert(str_12(lan), title=str_13(lan))
                                                sys.exit()
                                            else:
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                if param_name is None:
                                                    forms.alert(str_30(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:RANGE_OPTIONS] Define range options for random integers
                                                ranges = [
                                                    ('3 digits', 100, 999),
                                                    ('4 digits', 1000, 9999),
                                                    ('5 digits', 10000, 99999),
                                                    ('6 digits', 100000, 999999),
                                                    ('7 digits', 1000000, 9999999),
                                                    ('8 digits', 10000000, 99999999),
                                                    ('9 digits', 100000000, 999999999),
                                                    ('10 digits', 1000000000, 9999999999),
                                                    ('11 digits', 10000000000, 99999999999),
                                                    ('12 digits', 100000000000, 999999999999),
                                                    ('13 digits', 1000000000000, 9999999999999),
                                                    ('14 digits', 10000000000000, 99999999999999),
                                                    ('15 digits', 100000000000000, 999999999999999),
                                                    ('16 digits', 1000000000000000, 9999999999999999)
                                                ]
                                                if res is None:
                                                    forms.alert(str_23(lan))
                                                    sys.exit()
                                                selected_range = None
                                                for item in ranges:
                                                    if item[0] == res:
                                                        selected_range = item
                                                        break
                                                if selected_range is None:
                                                    forms.alert(str_22(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                min_value = selected_range[1]
                                                max_value = selected_range[2]
                                                generated_numbers = set()
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    param = element.LookupParameter(param_name)
                                                    if param is not None:
                                                        if param.StorageType != StorageType.String:
                                                            any_parameter_not_text = True
                                                        else:
                                                            # [SCRIPT:GENERATE_RANDOM] Generate a unique random number within the specified range
                                                            random_number = str(random.randint(min_value, max_value))
                                                            while random_number in generated_numbers:
                                                                random_number = str(random.randint(min_value, max_value))
                                                            generated_numbers.add(random_number)
                                                            new_param_value = random_number + str(element_id.IntegerValue)  
                                                            param.Set(new_param_value)
                                                    else:
                                                        all_elements_have_param = False
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param_name, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = 'Random "+res+"' "+"'Element Id'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param_name] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_9:ELEMENTID_RANDOM_STRING] Handle Option 9: ElementId before a random string with specified number of characters
                                elif script_name.startswith(str_10(lan)):
                                    """
                                    This function handles the event when the "Option 9" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter, a separator, and a length for generating random strings.
                                    2. Generates unique random strings with the specified length.
                                    3. Sets the generated strings as parameter values for the selected elements, prefixed by the element ID.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating random strings prefixed by element IDs.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        import random
                                        import string
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        
                                        # [UI:OPTION_9_FORM] Display Option 9 form
                                        icon_path = ranstring_icon()
                                        search_image_path = ranstring_back()
                                        ok_icon_path = ok_icon()
                                        cancel_icon_path = cancel_icon()
                                        parameter_label = str_15(lan)
                                        value_label = str_27(lan)
                                        window_name = str_29(lan)
                                        seprator_label = str_28(lan)
                                        radio_op1 = str_25(lan)
                                        radio_op2 = str_26(lan)
                                        url = parsweb(wurl)
                                        param_name, selected_option, seprator, res = mix_2input_1radio_combo2(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, seprator_label, radio_op1, radio_op2, url)
                                        c1=int_ids(selection, doc)
                                        c2=p_values(selection, param_name, doc)   

                                        # [SCRIPT:REPORT_DATA] Prepare report data
                                        self.report_element_id = c1
                                        c_names= c_name(c1, doc)
                                        self.report_element_name = c_names 
                                        c_categories = c_category(c1, doc)
                                        self.report_category_of_elements = c_categories
                                        self.report_parameter_previous_value = c2

                                        if selected_option == "C1R1":
                                            import random
                                            import string
                                            from pyrevit import forms, script
                                            import sys
                                            
                                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                            doc = __revit__.ActiveUIDocument.Document
                                            uidoc = __revit__.ActiveUIDocument
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            if len(selection) == 0:
                                                forms.alert(str_12(lan), title=str_13(lan))
                                                sys.exit()
                                            else:
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                if param_name is None:
                                                    forms.alert(str_30(lan))
                                                    sys.exit()
                                                if seprator is None:
                                                    forms.alert(str_31(lan))
                                                    sys.exit() 
                                                
                                                # [SCRIPT:RANGE_OPTIONS] Define range options for random strings
                                                ranges = [
                                                    ('2 characters', 2),
                                                    ('3 characters', 3),
                                                    ('4 characters', 4),
                                                    ('5 characters', 5),
                                                    ('6 characters', 6),
                                                    ('7 characters', 7),
                                                    ('8 characters', 8),
                                                    ('9 characters', 9),
                                                    ('10 characters', 10),
                                                    ('11 characters', 11),
                                                    ('12 characters', 12),
                                                    ('13 characters', 13),
                                                    ('14 characters', 14),
                                                    ('15 characters', 15),
                                                    ('16 characters', 16)
                                                ]
                                                if res is None:
                                                    forms.alert(str_23(lan))
                                                    sys.exit()
                                                selected_range = None
                                                for item in ranges:
                                                    if item[0] == res:
                                                        selected_range = item
                                                        break
                                                if selected_range is None:
                                                    forms.alert(str_22(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                character_count = selected_range[1]
                                                generated_strings = set()
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    param = element.LookupParameter(param_name)
                                                    if param is not None:
                                                        if param.StorageType != StorageType.String:
                                                            any_parameter_not_text = True
                                                        else:
                                                            # [SCRIPT:GENERATE_RANDOM] Generate a unique random string with the specified length
                                                            import uuid
                                                            random_string = str(element_id) + seprator + str(uuid.uuid4())[:character_count]
                                                            while random_string in generated_strings:
                                                                random_string = str(element_id) + seprator + str(uuid.uuid4())[:character_count]
                                                            generated_strings.add(random_string)
                                                            param.Set(random_string)
                                                    else:
                                                        all_elements_have_param = False
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:GENERATE_RANDOM] Generate a unique random string with the specified length
                                                        c3=p_values(selection, param_name, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = 'Element Id' '"+seprator+"' 'Random "+res+"'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param_name] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [SCRIPT:REPORT] Generate report
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                        if selected_option == "C1R2":
                                            import random
                                            import string
                                            from pyrevit import forms, script
                                            import sys
                                            
                                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                            doc = __revit__.ActiveUIDocument.Document
                                            uidoc = __revit__.ActiveUIDocument
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            if len(selection) == 0:
                                                forms.alert(str_12(lan), title=str_13(lan))
                                                sys.exit()
                                            else:
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                if param_name is None:
                                                    forms.alert(str_30(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:RANGE_OPTIONS] Define range options for random strings
                                                ranges = [
                                                    ('2 characters', 2),
                                                    ('3 characters', 3),
                                                    ('4 characters', 4),
                                                    ('5 characters', 5),
                                                    ('6 characters', 6),
                                                    ('7 characters', 7),
                                                    ('8 characters', 8),
                                                    ('9 characters', 9),
                                                    ('10 characters', 10),
                                                    ('11 characters', 11),
                                                    ('12 characters', 12),
                                                    ('13 characters', 13),
                                                    ('14 characters', 14),
                                                    ('15 characters', 15),
                                                    ('16 characters', 16)
                                                ]
                                                if res is None:
                                                    forms.alert(str_23(lan))
                                                    sys.exit()
                                                selected_range = None
                                                for item in ranges:
                                                    if item[0] == res:
                                                        selected_range = item
                                                        break
                                                if selected_range is None:
                                                    forms.alert(str_22(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                character_count = selected_range[1]
                                                generated_strings = set()
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    param = element.LookupParameter(param_name)
                                                    if param is not None:
                                                        if param.StorageType != StorageType.String:
                                                            any_parameter_not_text = True
                                                        else:
                                                            # [SCRIPT:GENERATE_RANDOM] Generate a unique random string with the specified length
                                                            import uuid
                                                            random_string = str(element_id) + str(uuid.uuid4())[:character_count]
                                                            while random_string in generated_strings:
                                                                random_string = str(element_id) + str(uuid.uuid4())[:character_count]
                                                            generated_strings.add(random_string)
                                                            param.Set(random_string)
                                                    else:
                                                        all_elements_have_param = False
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param_name, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = 'Element Id' 'Random "+res+"'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param_name] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass
                                
                                # [OPTION_10:ELEMENTID_RANDOM_STRING] Handle Option 10: ElementId after a random string with specified number of characters
                                elif script_name.startswith(str_11(lan)):
                                    """
                                    This function handles the event when the "Option 10" radio button is selected in the ID Generator form.

                                    Workflow:
                                    1. Prompts the user to select a parameter, a separator, and a length for generating random strings.
                                    2. Generates unique random strings with the specified length.
                                    3. Sets the generated strings as parameter values for the selected elements, suffixed by the element ID.
                                    4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                    Key Features:
                                    - Provides a user-friendly interface for generating random strings suffixed by element IDs.
                                    - Ensures proper handling of exceptions to maintain application stability.
                                    """
                                    try:
                                        # [SCRIPT:IMPORTS] Import necessary libraries
                                        import clr
                                        import random
                                        import string
                                        clr.AddReference("RevitAPI")
                                        from Autodesk.Revit.DB import Transaction, StorageType
                                        from pyrevit import forms, script
                                        import sys
                                        
                                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                        doc = __revit__.ActiveUIDocument.Document
                                        uidoc = __revit__.ActiveUIDocument
                                        selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                        
                                        # [UI:OPTION_10_FORM] Display Option 10 form
                                        icon_path = ranstring_icon()
                                        search_image_path = ranstring_back()
                                        ok_icon_path = ok_icon()
                                        cancel_icon_path = cancel_icon()
                                        parameter_label = str_15(lan)
                                        value_label = str_27(lan)
                                        window_name = str_29(lan)
                                        seprator_label = str_28(lan)
                                        radio_op1 = str_25(lan)
                                        radio_op2 = str_26(lan)
                                        url = parsweb(wurl)
                                        param_name, selected_option, seprator, res = mix_2input_1radio_combo2(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, seprator_label, radio_op1, radio_op2, url)
                                        c1=int_ids(selection, doc)
                                        c2=p_values(selection, param_name, doc) 

                                        # [SCRIPT:REPORT_DATA] Prepare report data
                                        self.report_element_id = c1
                                        c_names= c_name(c1, doc)
                                        self.report_element_name = c_names 
                                        c_categories = c_category(c1, doc)
                                        self.report_category_of_elements = c_categories
                                        self.report_parameter_previous_value = c2

                                        if selected_option == "C1R1":
                                            import random
                                            import string
                                            from pyrevit import forms, script
                                            import sys

                                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                            doc = __revit__.ActiveUIDocument.Document
                                            uidoc = __revit__.ActiveUIDocument
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            if len(selection) == 0:
                                                forms.alert(str_12(lan), title=str_13(lan))
                                                sys.exit()
                                            else:
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                if param_name is None:
                                                    forms.alert(str_30(lan))
                                                    sys.exit()
                                                if seprator is None:
                                                    forms.alert(str_31(lan))
                                                    sys.exit() 

                                                # [SCRIPT:RANGE_OPTIONS] Define range options for random strings
                                                ranges = [
                                                    ('2 characters', 2),
                                                    ('3 characters', 3),
                                                    ('4 characters', 4),
                                                    ('5 characters', 5),
                                                    ('6 characters', 6),
                                                    ('7 characters', 7),
                                                    ('8 characters', 8),
                                                    ('9 characters', 9),
                                                    ('10 characters', 10),
                                                    ('11 characters', 11),
                                                    ('12 characters', 12),
                                                    ('13 characters', 13),
                                                    ('14 characters', 14),
                                                    ('15 characters', 15),
                                                    ('16 characters', 16)
                                                ]
                                                if res is None:
                                                    forms.alert(str_23(lan))
                                                    sys.exit()
                                                selected_range = None
                                                for item in ranges:
                                                    if item[0] == res:
                                                        selected_range = item
                                                        break
                                                if selected_range is None:
                                                    forms.alert(str_22(lan))
                                                    sys.exit()

                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                character_count = selected_range[1]
                                                generated_strings = set()
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    param = element.LookupParameter(param_name)
                                                    if param is not None:
                                                        if param.StorageType != StorageType.String:
                                                            any_parameter_not_text = True
                                                        else:
                                                            # [SCRIPT:GENERATE_RANDOM] Generate a unique random string with the specified length
                                                            import uuid
                                                            random_string = str(uuid.uuid4())[:character_count] + seprator + str(element_id)
                                                            while random_string in generated_strings:
                                                                random_string = str(uuid.uuid4())[:character_count] + seprator + str(element_id)
                                                            generated_strings.add(random_string)
                                                            param.Set(random_string)
                                                    else:
                                                        all_elements_have_param = False
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param_name, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = 'Random "+res+"' '"+seprator+"' 'Element Id'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param_name] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit()

                                        if selected_option == "C1R2":
                                            import random
                                            import string
                                            from pyrevit import forms, script
                                            import sys

                                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                                            doc = __revit__.ActiveUIDocument.Document
                                            uidoc = __revit__.ActiveUIDocument
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            if len(selection) == 0:
                                                forms.alert(str_12(lan), title=str_13(lan))
                                                sys.exit()
                                            else:
                                                all_elements_have_param = True
                                                any_parameter_not_text = False
                                                if param_name is None:
                                                    forms.alert(str_30(lan))
                                                    sys.exit()

                                                # [SCRIPT:RANGE_OPTIONS] Define range options for random strings
                                                ranges = [
                                                    ('2 characters', 2),
                                                    ('3 characters', 3),
                                                    ('4 characters', 4),
                                                    ('5 characters', 5),
                                                    ('6 characters', 6),
                                                    ('7 characters', 7),
                                                    ('8 characters', 8),
                                                    ('9 characters', 9),
                                                    ('10 characters', 10),
                                                    ('11 characters', 11),
                                                    ('12 characters', 12),
                                                    ('13 characters', 13),
                                                    ('14 characters', 14),
                                                    ('15 characters', 15),
                                                    ('16 characters', 16)
                                                ]
                                                if res is None:
                                                    forms.alert(str_23(lan))
                                                    sys.exit()
                                                selected_range = None
                                                for item in ranges:
                                                    if item[0] == res:
                                                        selected_range = item
                                                        break

                                                if selected_range is None:
                                                    forms.alert(str_22(lan))
                                                    sys.exit()

                                                # [SCRIPT:TRANSACTION] Start transaction
                                                t = Transaction(doc, "Modify Elements")
                                                t.Start()
                                                character_count = selected_range[1]
                                                generated_strings = set()
                                                for element_id in selection:
                                                    element = doc.GetElement(element_id)
                                                    param = element.LookupParameter(param_name)
                                                    if param is not None:
                                                        if param.StorageType != StorageType.String:
                                                            any_parameter_not_text = True
                                                        else:
                                                            # [SCRIPT:GENERATE_RANDOM] Generate a unique random string with the specified length
                                                            import uuid
                                                            random_string = str(uuid.uuid4())[:character_count] + str(element_id)
                                                            while random_string in generated_strings:
                                                                random_string = str(uuid.uuid4())[:character_count] + str(element_id)
                                                            generated_strings.add(random_string)
                                                            param.Set(random_string)
                                                    else:
                                                        all_elements_have_param = False
                                                if all_elements_have_param:
                                                    if any_parameter_not_text:
                                                        forms.alert(str_18(lan))
                                                        t.RollBack()
                                                    else:
                                                        t.Commit()

                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, param_name, doc) 
                                                        self.report_parameter_new_value = c3
                                                        generation_methode = ["ID = 'Random "+res+"' "+"'Element Id'"] *len(c1)
                                                        self.report_generation_methode = generation_methode
                                                        param_n_gen = [param_name] *len(c1)
                                                        self.report_parameter_name = param_n_gen
                                                        from sajdmo.scripts.pset import c_storage_type
                                                        param_typ_gen = c_storage_type(param_n_gen, element)
                                                        self.report_parameter_type = param_typ_gen

                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogCommandLinkId, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                else:
                                                    forms.alert(str_21(lan))
                                                    t.RollBack()
                                                    sys.exit() 

                                    except StopIteration:
                                        pass
                                    except Exception:
                                        pass            
                                    except SystemExit:
                                        pass  
                                
                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                        doc = DocumentManager.Instance.CurrentDBDocument
                        if 'form' not in globals():
                            pass
                        else:
                            form = ID_GENERATOR(doc)
                            form.ShowDialog()

                    # [SCRIPT:RETURN_REPORT_DATA] Return report data
                    return form.report_element_id, form.report_element_name, form.report_category_of_elements, form.report_parameter_name, form.report_parameter_type, form.report_generation_methode, form.report_parameter_previous_value, form.report_parameter_new_value
                
                # [SCRIPT:IMPORTS] Import language-specific strings
                from structure.root import lan_path
                from UI.strings_id_generator import str_69, str_70, str_71, str_72, str_73, str_74, str_75, str_76, str_77
                
                lan = lan_path()

                # [SCRIPT:REPORT_DATA] Prepare report data
                report_element_id, report_element_name, report_category_of_elements, report_parameter_name, report_parameter_type, report_generation_methode, report_parameter_previous_value, report_parameter_new_value =id_generator()
                headers = [str_70(lan),str_71(lan), str_72(lan), str_73(lan), str_74(lan), str_75(lan), str_76(lan), str_77(lan)]
                data = [
                    report_element_id,
                    report_element_name,
                    report_category_of_elements,
                    report_parameter_name,
                    report_parameter_type,
                    report_generation_methode,
                    report_parameter_previous_value,
                    report_parameter_new_value
                ]
                editable = [False, False, False, False, False, False, False, False]
                if report_element_id and report_parameter_name:
                    self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                pass
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Parameter Value Editor] Parameter Value Editor
        #
        # Handles editing parameter values using various methods:
        # - Replace, prefix, suffix, and math operations
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:PARAMETER_VALUE_EDITOR]
        elif button_text == tool_str_42(lan):
            """
            This function and its associated class handle the Parameter Value Editor tool, which provides a user interface for modifying parameter values of selected elements in Revit.

            Workflow:
            1. Initializes a form with various UI components (labels, buttons, radio buttons, etc.) for user interaction.
            2. Provides options for different parameter value modifications:
            - Replace: Replaces specific characters in parameter values with user-defined text.
            - Prefix: Adds a prefix to parameter values.
            - Suffix: Adds a suffix to parameter values.
            - Math Operations: Performs mathematical operations (+, -, *, /) on parameter values.
            3. Executes the selected operation on the parameter values of the selected elements.
            4. Handles exceptions and errors gracefully to ensure the function continues processing.

            Key Features:
            - Provides a user-friendly interface for modifying parameter values.
            - Supports multiple modification options (replace, prefix, suffix, math operations).
            - Ensures proper handling of exceptions to maintain application stability.
            - Generates reports and logs for the modifications made.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                def parameter_value_editor():
                    # [SCRIPT:IMPORTS] Import necessary libraries
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    clr.AddReference('RevitAPIUI')
                    from System.Windows.Forms import Form, RadioButton, Button, PictureBox, Label, Cursors
                    from System.Drawing import Point, Size, Bitmap, Color, Icon, Font, FontStyle, GraphicsUnit
                    from RevitServices.Persistence import DocumentManager
                    from pyrevit import forms, script
                    import os
                    import sys
                    import webbrowser
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.pset import p_values, int_ids, print_table_from_lists, c_name
                    from sajdmo.forms.double import  double_input_plusnote_dynamiclabel, double_input_plusnote_dynamiclabel2
                    from structure.root import (wurl_path, lan_path, submit_icon, cancel_icon, ok_icon, math_back, math_icon, ranstring_icon, editor_icon, editor_back, replace_back, prefix_back, 
                    suffix_back, logo_path, cuslogo_path, replace_sym, prefix_sym, suffix_sym)
                    from UI.strings_parameter_value_editor import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, 
                    str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_26, str_27, str_28, str_29, str_30, str_31, str_32, str_33, str_34, str_35, str_36, str_37, str_38, str_39, 
                    str_40, str_41, str_42, str_43, str_44, str_45, str_46, str_47, str_48, str_h1, str_h2)
                    from UI.url import parsweb

                    lan = lan_path()
                    wurl= wurl_path()

                    # [SCRIPT:VALIDATION] Check if any element is selected
                    selection = __revit__.ActiveUIDocument.Selection.GetElementIds()  
                    if len(selection) == 0:
                        forms.alert(str_18(lan))
                    else:
                        # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                        doc = __revit__.ActiveUIDocument.Document
                        uidoc = __revit__.ActiveUIDocument
                        with forms.ProgressBar(title='', indeterminate=True):
                            class VALUE_EDITOR(Form):
                                # [UI:INITIALIZATION] Initialize the form
                                def __init__(self, doc):
                                    """
                                    Initializes the Parameter Value Editor form with UI components and event handlers.

                                    Workflow:
                                    1. Sets up the form properties (title, size, background color, icon, etc.).
                                    2. Creates and configures radio buttons for different parameter modification options:
                                    - Replace: Replaces specific characters in parameter values.
                                    - Prefix: Adds a prefix to parameter values.
                                    - Suffix: Adds a suffix to parameter values.
                                    - Math Operations: Performs mathematical operations on parameter values.
                                    3. Adds labels to describe each radio button option.
                                    4. Configures a submit button to trigger the selected operation.
                                    5. Adds a picture box for visual elements and a "Created by" label with a clickable link.
                                    6. Initializes data storage variables for reporting and logging.

                                    Key Features:
                                    - Provides a clean and intuitive user interface for parameter value editing.
                                    - Supports multiple modification options through radio buttons.
                                    - Includes event handlers for user interactions (e.g., button clicks, label clicks).
                                    - Prepares data structures for storing and reporting modification results.
                                    """
                                    # [UI:FORM_INITIALIZATION] Initialize form properties
                                    self.Text = str_32(lan)
                                    self.Width = 900
                                    self.Height = 500
                                    self.BackColor = Color.White
                                    self.doc = doc
                                    self.CenterToScreen()
                                    self.Icon = Icon(editor_icon())

                                    # [UI:RADIO_BUTTONS] Create radio buttons for modification options
                                    self.radioButton01 = RadioButton()
                                    self.radioButton01.Appearance = 0  
                                    self.radioButton01.Text = str_1(lan)
                                    self.radioButton01.Width = 800
                                    self.radioButton01.Height = 30
                                    self.radioButton01.Left = 50
                                    self.radioButton01.Top = 40
                                    self.radioButton01.CheckedChanged += self.radioButton_checked_changed
                                    self.radioButton01.CheckedChanged += self.RadioChanged

                                    self.label01 = Label()
                                    self.label01.Text = str_5(lan)
                                    self.label01.AutoSize = True
                                    self.label01.Left = 115
                                    self.label01.Top = 70
                                    self.label01.MaximumSize = Size(600, 35)
                                    self.label01.ForeColor = Color.Blue
                                    self.Controls.Add(self.label01)

                                    self.radioButton2 = RadioButton()
                                    self.radioButton2.Appearance = 0  
                                    self.radioButton2.Text = str_2(lan)
                                    self.radioButton2.Width = 800
                                    self.radioButton2.Height = 30
                                    self.radioButton2.Left = 50
                                    self.radioButton2.Top = 110
                                    self.radioButton2.CheckedChanged += self.radioButton_checked_changed
                                    self.radioButton2.CheckedChanged += self.RadioChanged

                                    self.label02 = Label()
                                    self.label02.Text = str_6(lan)
                                    self.label02.AutoSize = True
                                    self.label02.Left = 115
                                    self.label02.Top = 140
                                    self.label02.MaximumSize = Size(600, 35)
                                    self.label02.ForeColor = Color.Blue
                                    self.Controls.Add(self.label02)

                                    self.radioButton3 = RadioButton()
                                    self.radioButton3.Appearance = 0 
                                    self.radioButton3.Text = str_3(lan)
                                    self.radioButton3.Width = 800
                                    self.radioButton3.Height = 30
                                    self.radioButton3.Left = 50
                                    self.radioButton3.Top = 180
                                    self.radioButton3.CheckedChanged += self.radioButton_checked_changed
                                    self.radioButton3.CheckedChanged += self.RadioChanged

                                    self.label03 = Label()
                                    self.label03.Text = str_7(lan)
                                    self.label03.AutoSize = True
                                    self.label03.Left = 115
                                    self.label03.Top = 210
                                    self.label03.MaximumSize = Size(600, 35)
                                    self.label03.ForeColor = Color.Blue
                                    self.Controls.Add(self.label03)

                                    self.radioButton4 = RadioButton()
                                    self.radioButton4.Appearance = 0  
                                    self.radioButton4.Text = str_4(lan)
                                    self.radioButton4.Width = 800
                                    self.radioButton4.Height = 30
                                    self.radioButton4.Left = 50
                                    self.radioButton4.Top = 250
                                    self.radioButton4.CheckedChanged += self.radioButton_checked_changed
                                    self.radioButton4.CheckedChanged += self.RadioChanged

                                    self.label04 = Label()
                                    self.label04.Text = str_8(lan)
                                    self.label04.AutoSize = True
                                    self.label04.Left = 115
                                    self.label04.Top = 280
                                    self.label04.MaximumSize = Size(600, 35)
                                    self.label04.ForeColor = Color.Blue
                                    self.Controls.Add(self.label04)

                                    self.notelabel = Label()
                                    self.notelabel.Text = str_9(lan)
                                    self.notelabel.AutoSize = True
                                    self.notelabel.Left = 730
                                    self.notelabel.Top = 150
                                    self.notelabel.MaximumSize = Size(150,350)
                                    self.notelabel.ForeColor = Color.Black
                                    self.Controls.Add(self.notelabel)

                                    # [UI:CREATED_BY_LABEL] Add "Created by" label
                                    self.created_by_label = Label()
                                    self.created_by_label.AutoSize = True
                                    self.created_by_label.Text = "BIM Pars"
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.created_by_label.ForeColor = Color.Blue
                                    self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                    self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                    self.created_by_label.Cursor = Cursors.Hand  
                                    self.created_by_label.Click += self.Label_Click
                                    self.Controls.Add(self.created_by_label)
                                    
                                    # [UI:SUBMIT_BUTTON] Add submit button
                                    self.button = Button()
                                    self.button.Width = 40
                                    self.button.Height = 40
                                    self.button.Left = (self.Width - self.button.Width - 10) // 2
                                    self.button.Top = 360
                                    icon_button = submit_icon()
                                    self.button.Image = Icon(icon_button).ToBitmap()
                                    self.button.Click += self.button_click
                                    self.button.Enabled = False

                                    # [UI:PICTURE_BOX] Add picture box
                                    self.pictureBox = PictureBox()
                                    self.pictureBox.Location = Point(750, 50)
                                    self.pictureBox.Size = Size(200, 200)  
                                    self.Controls.Add(self.pictureBox)
                                    icon_path = editor_back()
                                    image = Bitmap(icon_path)
                                    self.pictureBox.Image = image

                                    # [UI:ADD_CONTROLS] Add all controls to the form
                                    self.Controls.Add(self.radioButton01)
                                    self.Controls.Add(self.radioButton2)
                                    self.Controls.Add(self.radioButton3)
                                    self.Controls.Add(self.radioButton4)
                                    self.Controls.Add(self.button)

                                    # [SCRIPT:DATA_STORAGE] Initialize data storage variables
                                    self.columns = []
                                    self.c1 = []
                                    self.c_names = []
                                    self.c_pname = []
                                    self.c_ptype = []
                                    self.c2 = []
                                    self.c3 = []

                                    self.checked_radiobutton = None
                                
                                # [EVENT_HANDLER:LABEL_CLICK] Handle click event for "Created by" label
                                def Label_Click(self, sender, event):
                                    """
                                    Handles the click event for the "Created by" label, opening a web browser to a specified URL.

                                    Workflow:
                                    1. Retrieves the URL using the `parsweb` function.
                                    2. Opens the URL in the default web browser.

                                    Key Features:
                                    - Provides a clickable label that acts as a hyperlink.
                                    - Enhances user experience by linking to external resources.
                                    """
                                    url = parsweb(wurl)
                                    webbrowser.open(url)
                                
                                # [EVENT_HANDLER:RADIO_CHANGED] Handle radio button selection
                                def RadioChanged(self, sender, e):
                                    """
                                    Handles the event when a radio button is selected, enabling the submit button.

                                    Workflow:
                                    1. Checks which radio button is selected.
                                    2. Enables the submit button if any radio button is selected.
                                    3. Disables the submit button if no radio button is selected.

                                    Key Features:
                                    - Ensures the submit button is only enabled when a valid option is chosen.
                                    - Provides immediate feedback to the user based on their selection.
                                    """
                                    if self.radioButton01:
                                        self.button.Enabled = True
                                    elif self.radioButton2:
                                        self.button.Enabled = True
                                    elif self.radioButton3:
                                        self.button.Enabled = True
                                    elif self.radioButton4:
                                        self.button.Enabled = True
                                    else:
                                        self.button.Enabled = False

                                # [EVENT_HANDLER:RADIO_CHECKED_CHANGED] Handle radio button checked state change
                                def radioButton_checked_changed(self, sender, e):
                                    """
                                    Handles the event when a radio button's checked state changes, ensuring only one radio button is selected at a time.

                                    Workflow:
                                    1. Identifies the radio button that triggered the event.
                                    2. Unchecks the previously selected radio button (if any).
                                    3. Updates the reference to the currently selected radio button.

                                    Key Features:
                                    - Ensures mutual exclusivity among radio buttons.
                                    - Maintains a reference to the currently selected option for further processing.
                                    """
                                    radiobutton = sender
                                    if radiobutton.Checked:
                                        if self.checked_radiobutton is not None and self.checked_radiobutton != radiobutton:
                                            self.checked_radiobutton.Checked = False
                                        self.checked_radiobutton = radiobutton

                                # [EVENT_HANDLER:BUTTON_CLICK] Handle submit button click
                                def button_click(self, sender, e):
                                    """
                                    Handles the click event for the submit button, executing the selected script and closing the form.

                                    Workflow:
                                    1. Checks if a radio button is selected.
                                    2. Retrieves the text of the selected radio button to determine the script to execute.
                                    3. Executes the corresponding script using the `execute_script` method.
                                    4. Closes the form after script execution.

                                    Key Features:
                                    - Ensures a script is only executed when a valid option is selected.
                                    - Automatically closes the form after processing, providing a clean user experience.
                                    """
                                    if self.checked_radiobutton is not None:
                                        self.button.Enabled = True
                                        script_name = self.checked_radiobutton.Text
                                        script_result = self.execute_script(script_name)
                                        self.Close()

                                # [SCRIPT:EXECUTE_REPLACE] Handle "Replace" functionality
                                def execute_script(self, script_name):
                                    # [OPTION:REPLACE] Replace specific characters in parameter values
                                    if script_name.startswith(str_1(lan)):
                                        """
                                        Handles the "Replace" functionality for modifying parameter values by replacing specific characters with user-defined text.

                                        Workflow:
                                        1. Prompts the user to select a parameter and define replacement rules (e.g., "a|b" replaces "a" with "b").
                                        2. Validates the input to ensure it is properly formatted and not a boolean parameter.
                                        3. Executes the replacement operation on the parameter values of the selected elements.
                                        4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                        Key Features:
                                        - Provides a user-friendly interface for defining character replacements.
                                        - Ensures proper handling of exceptions to maintain application stability.
                                        - Generates reports and logs for the modifications made.
                                        """
                                        try:
                                            # [SCRIPT:IMPORTS] Import necessary libraries
                                            import clr
                                            import Autodesk.Revit.DB as DB
                                            from pyrevit import forms
                                            clr.AddReference('RevitAPI')
                                            clr.AddReference('RevitAPIUI')
                                            doc = __revit__.ActiveUIDocument.Document
                                            from pyrevit import forms
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            elements = [doc.GetElement(element_id) for element_id in selection]                                      
                                            
                                            # [UI:REPLACE_FORM] Display Replace form
                                            icon_path = ranstring_icon()
                                            search_image_path = replace_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            parameter_label = str_10(lan)
                                            value_label = str_11(lan)
                                            window_name = str_14(lan)
                                            note = str_13(lan)
                                            dyn = str_12(lan)
                                            url = parsweb(wurl)
                                            parameter_name, replace_text, param_type = double_input_plusnote_dynamiclabel(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, dyn, url)
                                            
                                            # [SCRIPT:DATA_PREPARATION] Prepare data for reporting
                                            c1=int_ids(selection, doc)
                                            self.c1 = c1
                                            c_names = c_name(c1, doc)
                                            self.c_names = c_names
                                            c2=p_values(selection, parameter_name, doc) 
                                            self.c2 = c2 
                                            self.c_pname = [parameter_name]*len(selection)
                                            self.c_ptype = [param_type]*len(selection)

                                            # [SCRIPT:VALIDATION] Check if parameter is boolean
                                            if param_type == DB.StorageType.Integer:
                                                forms.alert(str_15(lan))
                                            else:
                                                while True:
                                                    if replace_text is None:
                                                        forms.alert(str_16(lan))
                                                        sys.exit()
                                                    if ',' in replace_text:
                                                        forms.alert(str_17(lan))
                                                        break

                                                    # [SCRIPT:REPLACE_LOGIC] Process replacement rules
                                                    replacements = replace_text.split(',')
                                                    replace_dict = {}
                                                    for replacement in replacements:
                                                        letter, insert = replacement.split('|')
                                                        replace_dict[letter] = insert
                                                    
                                                    # [SCRIPT:TRANSACTION] Start transaction
                                                    transaction_name = 'Set Parameter Value'
                                                    transaction = DB.Transaction(doc, transaction_name)
                                                    transaction.Start()
                                                    try:
                                                        # [SCRIPT:APPLY_REPLACEMENT] Apply replacements to parameter values
                                                        for element in elements:
                                                            param = element.LookupParameter(parameter_name)
                                                            if param and param.StorageType == DB.StorageType.String:
                                                                current_value = param.AsString()
                                                                new_value = current_value
                                                                for letter, insert in replace_dict.items():
                                                                    new_value = new_value.replace(letter, insert)
                                                                param.Set(new_value)
                                                        transaction.Commit()
                                                        
                                                        # [SCRIPT:REPORT] Generate report
                                                        c3=p_values(selection, parameter_name, doc) 
                                                        self.c3 = c3
                                                        self.columns = [str_34(lan), str_46(lan) , str_47(lan), str_48(lan), str_35(lan), str_36(lan)]
                                                        
                                                        # [UI:RESULT_DIALOG] Show result dialog
                                                        from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
                                                        import sys
                                                        title = str_19(lan)
                                                        dialog = TaskDialog(title)
                                                        dialog.MainContent = str_20(lan)
                                                        dialog.TitleAutoPrefix = False
                                                        dialog.AllowCancellation = True
                                                        dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                        dialog.DefaultButton = TaskDialogResult.None
                                                        result = dialog.Show()
                                                        if result == TaskDialogResult.Ok:
                                                            sys.exit()
                                                        if result == TaskDialogResult.Cancel:
                                                            sys.exit()
                                                        break  
                                                    except Exception as ex:
                                                        # [SCRIPT:ERROR_HANDLING] Rollback transaction on error
                                                        transaction.RollBack()
                                                        forms.alert(str_21(lan).format(ex))
                                        
                                        except StopIteration:
                                            pass
                                        except Exception:
                                            pass            
                                        except SystemExit:
                                            pass
                                    
                                    # [OPTION:PREFIX] Handle "Prefix" functionality
                                    elif script_name.startswith(str_2(lan)):
                                        """
                                        Handles the "Prefix" functionality for modifying parameter values by adding a user-defined prefix to the existing values.

                                        Workflow:
                                        1. Prompts the user to select a parameter and define a prefix to add.
                                        2. Validates the input to ensure it is not a boolean parameter.
                                        3. Executes the prefix operation on the parameter values of the selected elements.
                                        4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                        Key Features:
                                        - Provides a user-friendly interface for defining prefixes.
                                        - Ensures proper handling of exceptions to maintain application stability.
                                        - Generates reports and logs for the modifications made.
                                        """
                                        try:
                                            # [SCRIPT:IMPORTS] Import necessary libraries
                                            import clr
                                            import Autodesk.Revit.DB as DB
                                            from pyrevit import forms
                                            clr.AddReference('RevitAPI')
                                            clr.AddReference('RevitAPIUI')
                                            doc = __revit__.ActiveUIDocument.Document
                                            from pyrevit import forms
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            elements = [doc.GetElement(element_id) for element_id in selection]      
                                            
                                            # [UI:PREFIX_FORM] Display Prefix form
                                            icon_path = ranstring_icon()
                                            search_image_path = prefix_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            parameter_label = str_10(lan)
                                            value_label = str_22(lan)
                                            window_name = str_24(lan)
                                            note = str_23(lan)
                                            dyn = str_12(lan)
                                            url = parsweb(wurl)
                                            parameter_name, prefix, param_type = double_input_plusnote_dynamiclabel(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, dyn, url)
                                            
                                            # [SCRIPT:DATA_PREPARATION] Prepare data for reporting
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, parameter_name, doc)  
                                            c_names = c_name(c1, doc)
                                            self.c1 = c1
                                            self.c_names = c_names
                                            self.c2 = c2 
                                            self.c_pname = [parameter_name]*len(selection)
                                            self.c_ptype = [param_type]*len(selection)

                                            # [SCRIPT:VALIDATION] Check if parameter is boolean
                                            if param_type == DB.StorageType.Integer:
                                                forms.alert(str_15(lan))
                                            else:
                                                if prefix is None:
                                                    forms.alert(str_16(lan))
                                                    sys.exit()
                                                
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                transaction_name = 'Set Parameter Value'
                                                transaction = DB.Transaction(doc, transaction_name)
                                                transaction.Start()
                                                try:
                                                    # [SCRIPT:APPLY_PREFIX] Apply prefix to parameter values
                                                    for element in elements:
                                                        param = element.LookupParameter(parameter_name)
                                                        if param and param.StorageType == DB.StorageType.String:
                                                            current_value = param.AsString()
                                                            new_value = prefix + current_value if current_value else prefix
                                                            param.Set(new_value)
                                                    transaction.Commit()
                                                    
                                                    # [SCRIPT:REPORT] Generate report
                                                    c3=p_values(selection, parameter_name, doc) 
                                                    self.c3 = c3
                                                    self.columns = [str_34(lan), str_46(lan) , str_47(lan), str_48(lan), str_35(lan), str_36(lan)]
                                                    
                                                    # [UI:RESULT_DIALOG] Show result dialog
                                                    from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogResult)
                                                    import sys
                                                    title = str_19(lan)
                                                    dialog = TaskDialog(title)
                                                    dialog.MainContent = str_20(lan)
                                                    dialog.TitleAutoPrefix = False
                                                    dialog.AllowCancellation = True
                                                    dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                    dialog.DefaultButton = TaskDialogResult.None
                                                    result = dialog.Show()
                                                    if result == TaskDialogResult.Ok:
                                                        sys.exit()
                                                    if result == TaskDialogResult.Cancel:
                                                        sys.exit()
                                                except Exception as ex:
                                                    # [SCRIPT:ERROR_HANDLING] Rollback transaction on error
                                                    transaction.RollBack()
                                                    forms.alert(str_21(lan).format(ex))

                                        except StopIteration:
                                            pass
                                        except Exception:
                                            pass            
                                        except SystemExit:
                                            pass
                                    
                                    # [OPTION:SUFFIX] Handle "Suffix" functionality
                                    elif script_name.startswith(str_3(lan)):
                                        """
                                        Handles the "Suffix" functionality for modifying parameter values by adding a user-defined suffix to the existing values.

                                        Workflow:
                                        1. Prompts the user to select a parameter and define a suffix to add.
                                        2. Validates the input to ensure it is not a boolean parameter.
                                        3. Executes the suffix operation on the parameter values of the selected elements.
                                        4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                        Key Features:
                                        - Provides a user-friendly interface for defining suffixes.
                                        - Ensures proper handling of exceptions to maintain application stability.
                                        - Generates reports and logs for the modifications made.
                                        """
                                        try:
                                            # [SCRIPT:IMPORTS] Import necessary libraries
                                            import clr
                                            import Autodesk.Revit.DB as DB
                                            from pyrevit import forms
                                            clr.AddReference('RevitAPI')
                                            clr.AddReference('RevitAPIUI')
                                            doc = __revit__.ActiveUIDocument.Document
                                            from pyrevit import forms
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            elements = [doc.GetElement(element_id) for element_id in selection]
                                            
                                            # [UI:SUFFIX_FORM] Display Suffix form
                                            icon_path = ranstring_icon()
                                            search_image_path = suffix_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            parameter_label = str_10(lan)
                                            value_label = str_25(lan)
                                            window_name = str_27(lan)
                                            note = str_26(lan)
                                            dyn = str_12(lan)
                                            url = parsweb(wurl)
                                            parameter_name, suffix, param_type = double_input_plusnote_dynamiclabel(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, dyn, url)
                                            
                                            # [SCRIPT:DATA_PREPARATION] Prepare data for reporting
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, parameter_name, doc)  
                                            c_names = c_name(c1, doc)
                                            self.c1 = c1
                                            self.c_names = c_names
                                            self.c2 = c2 
                                            self.c_pname = [parameter_name]*len(selection)
                                            self.c_ptype = [param_type]*len(selection)
 
                                            # [SCRIPT:VALIDATION] Check if parameter is boolean
                                            if param_type == DB.StorageType.Integer:
                                                forms.alert(str_15(lan))
                                            else:
                                                if suffix is None:
                                                    forms.alert(str_16(lan))
                                                    sys,exit()
                                                
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                transaction_name = 'Set Parameter Value'
                                                transaction = DB.Transaction(doc, transaction_name)
                                                transaction.Start()
                                                try:
                                                    # [SCRIPT:APPLY_SUFFIX] Apply suffix to parameter values
                                                    for element in elements:
                                                        param = element.LookupParameter(parameter_name)
                                                        if param and param.StorageType == DB.StorageType.String:
                                                            current_value = param.AsString()
                                                            new_value = current_value + suffix if current_value else suffix
                                                            param.Set(new_value)
                                                    transaction.Commit()
                                                    
                                                    # [SCRIPT:REPORT] Generate report
                                                    c3=p_values(selection, parameter_name, doc) 
                                                    self.c3 = c3
                                                    self.columns = [str_34(lan), str_46(lan) , str_47(lan), str_48(lan), str_35(lan), str_36(lan)]

                                                    # [UI:RESULT_DIALOG] Show result dialog
                                                    from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
                                                    import sys
                                                    title = str_19(lan)
                                                    dialog = TaskDialog(title)
                                                    dialog.MainContent = str_20(lan)
                                                    dialog.TitleAutoPrefix = False
                                                    dialog.AllowCancellation = True
                                                    dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                    dialog.DefaultButton = TaskDialogResult.None
                                                    result = dialog.Show()
                                                    if result == TaskDialogResult.Ok:
                                                        sys.exit()
                                                    if result == TaskDialogResult.Cancel:
                                                        sys.exit()
                                                except Exception as ex:
                                                    # [SCRIPT:ERROR_HANDLING] Rollback transaction on error
                                                    transaction.RollBack()
                                                    forms.alert(str_21(lan).format(ex))

                                        except StopIteration:
                                            pass
                                        except Exception:
                                            pass            
                                        except SystemExit:
                                            pass
                                    
                                    # [OPTION:MATH_OPERATION] Handle "Math Operation" functionality
                                    elif script_name.startswith(str_4(lan)):
                                        """
                                        Handles the "Math Operation" functionality for modifying parameter values by performing mathematical operations (+, -, *, /) on the existing values.

                                        Workflow:
                                        1. Prompts the user to select a parameter and define a mathematical operation (e.g., "+5" to add 5).
                                        2. Validates the input to ensure it is properly formatted.
                                        3. Executes the mathematical operation on the parameter values of the selected elements.
                                        4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                        Key Features:
                                        - Provides a user-friendly interface for defining mathematical operations.
                                        - Ensures proper handling of exceptions to maintain application stability.
                                        - Generates reports and logs for the modifications made.
                                        """
                                        try:
                                            # [SCRIPT:IMPORTS] Import necessary libraries
                                            import clr
                                            import Autodesk.Revit.DB as DB
                                            from pyrevit import forms
                                            clr.AddReference('RevitAPI')
                                            clr.AddReference('RevitAPIUI')
                                            doc = __revit__.ActiveUIDocument.Document
                                            from pyrevit import forms
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            elements = [doc.GetElement(element_id) for element_id in selection]
                                            
                                            # [UI:MATH_OPERATION_FORM] Display Math Operation form
                                            icon_path = math_icon()
                                            search_image_path = math_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            parameter_label = str_10(lan)
                                            value_label = str_28(lan)
                                            window_name = str_30(lan)
                                            note = str_29(lan)
                                            dyn = str_12(lan)
                                            url = parsweb(wurl)
                                            parameter_name, operation_value, param_type = double_input_plusnote_dynamiclabel2(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, dyn, url)
                                            
                                            # [SCRIPT:DATA_PREPARATION] Prepare data for reporting
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, parameter_name, doc) 
                                            c_names = c_name(c1, doc)  
                                            self.c1 = c1
                                            self.c_names = c_names
                                            self.c2 = c2 
                                            self.c_pname = [parameter_name]*len(selection)
                                            self.c_ptype = [operation_value]*len(selection)

                                            # [SCRIPT:VALIDATION] Validate operation value
                                            if operation_value is None:
                                                forms.alert(str_16(lan))
                                                sys.exit()

                                            operation = operation_value[:1]
                                            value = operation_value[1:]
                                            
                                            # [SCRIPT:PARSE_OPERATION] Parse operation and value
                                            transaction_name = 'Set Parameter Value'
                                            transaction = DB.Transaction(doc, transaction_name)
                                            transaction.Start()
                                            try:
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                for element in elements:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param and param.StorageType == DB.StorageType.Double:
                                                        current_value = param.AsDouble()
                                                        if operation == '+':
                                                            new_value = current_value + float(value)
                                                        elif operation == '-':
                                                            new_value = current_value - float(value)
                                                        elif operation == '*':
                                                            new_value = current_value * float(value)
                                                        elif operation == '/':
                                                            new_value = current_value / float(value)
                                                        else:
                                                            forms.alert(str_31(lan).format(operation))
                                                            transaction.RollBack()
                                                            sys.exit()
                                                        param.Set(new_value)
                                                transaction.Commit()
                                                
                                                # [SCRIPT:REPORT] Generate report
                                                c3=p_values(selection, parameter_name, doc) 
                                                self.c3 = c3
                                                self.columns = [str_34(lan), str_46(lan) , str_47(lan), str_30(lan), str_35(lan), str_36(lan)]
                                                
                                                # [UI:RESULT_DIALOG] Show result dialog
                                                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
                                                import sys
                                                title = str_19(lan)
                                                dialog = TaskDialog(title)
                                                dialog.MainContent = str_20(lan)
                                                dialog.TitleAutoPrefix = False
                                                dialog.AllowCancellation = True
                                                dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                dialog.DefaultButton = TaskDialogResult.None
                                                result = dialog.Show()
                                                if result == TaskDialogResult.Ok:
                                                    sys.exit()
                                                if result == TaskDialogResult.Cancel:
                                                    sys.exit()
                                            except Exception as ex:
                                                # [SCRIPT:ERROR_HANDLING] Rollback transaction on error
                                                transaction.RollBack()
                                                forms.alert(str_21(lan).format(ex))

                                        except StopIteration:
                                            pass
                                        except Exception:
                                            pass            
                                        except SystemExit:
                                            pass
                            
                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                            doc = DocumentManager.Instance.CurrentDBDocument
                            if 'form' not in globals():
                                pass
                            else:
                                form = VALUE_EDITOR(doc)
                                form.ShowDialog()

                        # [SCRIPT:RETURN_DATA] Return data for reporting
                        return form.columns, form.c1, form.c_names, form.c_pname ,form.c_ptype, form.c2, form.c3  
        
                # [SCRIPT:PROCESS_RESULTS] Process results and create report tab
                headers, c1, c_names, c_pname, c_ptype, c2, c3 = parameter_value_editor()
                data = [
                    c1,
                    c_names,
                    c_pname,
                    c_ptype,
                    c2,
                    c3
                ]
                editable = [False, False, False, False, False, False]
                if headers:
                    self.create_report_tab(headers, data, editable, title=button_text)
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                from structure.root import lan_path
                from UI.strings_parameter_value_editor import str_45
                lan = lan_path()
                MessageBox.Show(str(e),str_45(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Parameter Value Editor for Special Characters] Special Character Editor
        #
        # Handles editing parameter values for special characters:
        # - Replaces commas and umlauts in parameter values
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:PARAMETER_VALUE_EDITOR_FOR_SPECIAL_CHARACTERS]
        elif button_text == tool_str_43(lan):
            """
            This function and its associated class handle the Parameter Value Editor for Special Characters tool, which provides a user interface for modifying parameter values containing special characters (e.g., commas, umlauts) in Revit.

            Workflow:
            1. Initializes a form with various UI components (labels, buttons, radio buttons, etc.) for user interaction.
            2. Provides options for different special character modifications:
            - Replace Comma: Replaces commas in parameter values with user-defined text.
            - Replace Umlaut: Replaces umlauts (e.g., Ä, Ö, Ü) and other special characters with their standard equivalents.
            3. Executes the selected operation on the parameter values of the selected elements.
            4. Handles exceptions and errors gracefully to ensure the function continues processing.

            Key Features:
            - Provides a user-friendly interface for modifying parameter values with special characters.
            - Supports multiple modification options (replace comma, replace umlaut).
            - Ensures proper handling of exceptions to maintain application stability.
            - Generates reports and logs for the modifications made.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                def parameter_editor_for_special_character():
                    # [SCRIPT:IMPORTS] Import necessary libraries
                    import clr
                    clr.AddReference('System.Windows.Forms')
                    clr.AddReference('System.Drawing')
                    clr.AddReference('RevitAPI')
                    clr.AddReference('RevitServices')
                    clr.AddReference('RevitAPIUI')
                    from System.Windows.Forms import  Form, RadioButton, Button, PictureBox, Label, Cursors
                    from System.Drawing import Point, Size, Bitmap, Color, Icon, Font, FontStyle, GraphicsUnit
                    from RevitServices.Persistence import DocumentManager
                    from pyrevit import forms, script
                    import os
                    import sys
                    import webbrowser
                    import getpass
                    from datetime import datetime  
                    sys.path.append(os.path.dirname(__file__))
                    from sajdmo.scripts.pset import p_values, int_ids, print_table_from_lists, c_name
                    from sajdmo.forms.double import double_input
                    from sajdmo.forms.single import single_input
                    from structure.root import wurl_path, mod_path, comma_icon, comma_back, lan_path, submit_icon, cancel_icon, ok_icon, replace_back, borcomma_back, logo_path, cuslogo_path, replace_sym
                    from UI.strings_parameter_value_editor_for_special_character import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, 
                    str_16, str_17, str_18, str_19, str_20, str_21, str_22, str_23, str_24, str_25, str_h1, str_h2)
                    from UI.skin import skin_mode
                    from UI.url import parsweb

                    # [SCRIPT:INITIALIZATION] Initialize variables
                    lan = lan_path()
                    skin =mod_path()
                    coo = comma_back()
                    bor = borcomma_back()
                    wurl= wurl_path()

                    # [SCRIPT:VALIDATION] Check if any element is selected
                    doc = __revit__.ActiveUIDocument.Document
                    selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                    if len(selection) == 0:
                        forms.alert(str_1(lan))
                    else:
                        with forms.ProgressBar(title='', indeterminate=True):
                            class SPECIAL_CHARACTER_EDITOR(Form):
                                def __init__(self, doc):
                                    """
                                    Initializes the Parameter Value Editor for Special Characters form with UI components and event handlers.

                                    Workflow:
                                    1. Sets up the form properties (title, size, background color, icon, etc.).
                                    2. Creates and configures radio buttons for different special character modification options:
                                    - Replace Comma: Replaces commas in parameter values with user-defined text.
                                    - Replace Umlaut: Replaces umlauts and other special characters with their standard equivalents.
                                    3. Adds labels to describe each radio button option.
                                    4. Configures a submit button to trigger the selected operation.
                                    5. Adds a picture box for visual elements and a "Created by" label with a clickable link.
                                    6. Initializes data storage variables for reporting and logging.

                                    Key Features:
                                    - Provides a clean and intuitive user interface for special character editing.
                                    - Supports multiple modification options through radio buttons.
                                    - Includes event handlers for user interactions (e.g., button clicks, label clicks).
                                    - Prepares data structures for storing and reporting modification results.
                                    """
                                    # [UI:FORM_INITIALIZATION] Initialize form properties
                                    self.Text = str_14(lan)
                                    self.Width = 750
                                    self.Height = 400
                                    self.BackColor = Color.White
                                    self.doc = doc
                                    self.CenterToScreen()
                                    self.Icon = Icon(comma_icon())

                                    # [UI:RADIO_BUTTONS] Create radio buttons for modification options
                                    self.radioButton01 = RadioButton()
                                    self.radioButton01.Appearance = 0  
                                    self.radioButton01.Text = str_2(lan)
                                    self.radioButton01.Width = 200
                                    self.radioButton01.Height = 30
                                    self.radioButton01.Left = 50
                                    self.radioButton01.Top = 40
                                    self.radioButton01.CheckedChanged += self.radioButton_checked_changed
                                    self.radioButton01.CheckedChanged += self.RadioChanged

                                    # [UI:LABELS] Add labels for radio button descriptions
                                    self.label01 = Label()
                                    self.label01.Text = str_3(lan)
                                    self.label01.AutoSize = True
                                    self.label01.Left = 110
                                    self.label01.Top = 70
                                    self.label01.MaximumSize = Size(400, 45)
                                    self.label01.ForeColor = Color.Blue
                                    self.Controls.Add(self.label01)

                                    self.radioButton2 = RadioButton()
                                    self.radioButton2.Appearance = 0  
                                    self.radioButton2.Text = str_4(lan)
                                    self.radioButton2.Width = 200
                                    self.radioButton2.Height = 30
                                    self.radioButton2.Left = 50
                                    self.radioButton2.Top = 110
                                    self.radioButton2.CheckedChanged += self.radioButton_checked_changed
                                    self.radioButton2.CheckedChanged += self.RadioChanged

                                    self.label02 = Label()
                                    self.label02.Text = str_5(lan)
                                    self.label02.AutoSize = True
                                    self.label02.Left = 110
                                    self.label02.Top = 140
                                    self.label02.MaximumSize = Size(400, 45)
                                    self.label02.ForeColor = Color.Blue
                                    self.Controls.Add(self.label02)

                                    # [UI:CREATED_BY_LABEL] Add "Created by" label with clickable link
                                    self.created_by_label = Label()
                                    self.created_by_label.AutoSize = True
                                    self.created_by_label.Text = "BIM Pars"
                                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                                    self.created_by_label.ForeColor = Color.Blue
                                    self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                                    self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                                    self.created_by_label.Cursor = Cursors.Hand  
                                    self.created_by_label.Click += self.Label_Click
                                    self.Controls.Add(self.created_by_label)
                                    
                                    # [UI:SUBMIT_BUTTON] Add submit button
                                    self.button = Button()
                                    self.button.Width = 40
                                    self.button.Height = 40
                                    self.button.Left = (self.Width - self.button.Width - 10) // 2
                                    self.button.Top = 260
                                    icon_button = submit_icon()
                                    self.button.Image = Icon(icon_button).ToBitmap()
                                    self.button.Click += self.button_click
                                    self.button.Enabled = False

                                    # [UI:PICTURE_BOX] Add picture box
                                    self.pictureBox = PictureBox()
                                    self.pictureBox.Location = Point(400, 0)
                                    self.pictureBox.Size = Size(480, 320) 
                                    self.Controls.Add(self.pictureBox)
                                    icon_path = skin_mode(skin, coo, bor)
                                    image = Bitmap(icon_path)
                                    self.pictureBox.Image = image

                                    # [UI:ADD_CONTROLS] Add controls to the form
                                    self.Controls.Add(self.radioButton01)
                                    self.Controls.Add(self.radioButton2)
                                    self.Controls.Add(self.button)

                                    # [SCRIPT:DATA_INITIALIZATION] Initialize data storage variables
                                    self.columns = []
                                    self.c1 = []
                                    self.c_names = []
                                    self.c_pname = []
                                    self.c2 = []
                                    self.c3 = []
                                    self.checked_radiobutton = None
                                
                                # [EVENT_HANDLER:LABEL_CLICK] Handle click event for "Created by" label
                                def Label_Click(self, sender, event):
                                    """
                                    Handles the click event for the "Created by" label, opening a web browser to a specified URL.

                                    Workflow:
                                    1. Retrieves the URL using the `parsweb` function.
                                    2. Opens the URL in the default web browser.

                                    Key Features:
                                    - Provides a clickable label that acts as a hyperlink.
                                    - Enhances user experience by linking to external resources.
                                    """
                                    url = parsweb(wurl)
                                    webbrowser.open(url)
                                
                                # [EVENT_HANDLER:RADIO_CHANGED] Handle radio button selection
                                def RadioChanged(self, sender, e):
                                    """
                                    Handles the event when a radio button is selected, enabling the submit button.

                                    Workflow:
                                    1. Checks which radio button is selected.
                                    2. Enables the submit button if any radio button is selected.
                                    3. Disables the submit button if no radio button is selected.

                                    Key Features:
                                    - Ensures the submit button is only enabled when a valid option is chosen.
                                    - Provides immediate feedback to the user based on their selection.
                                    """
                                    if self.radioButton01:
                                        self.button.Enabled = True
                                    elif self.radioButton2:
                                        self.button.Enabled = True
                                    else:
                                        self.button.Enabled = False

                                # [EVENT_HANDLER:RADIO_CHECKED_CHANGED] Handle radio button state change
                                def radioButton_checked_changed(self, sender, e):
                                    """
                                    Handles the event when a radio button's checked state changes, ensuring only one radio button is selected at a time.

                                    Workflow:
                                    1. Identifies the radio button that triggered the event.
                                    2. Unchecks the previously selected radio button (if any).
                                    3. Updates the reference to the currently selected radio button.

                                    Key Features:
                                    - Ensures mutual exclusivity among radio buttons.
                                    - Maintains a reference to the currently selected option for further processing.
                                    """
                                    radiobutton = sender
                                    if radiobutton.Checked:
                                        if self.checked_radiobutton is not None and self.checked_radiobutton != radiobutton:
                                            self.checked_radiobutton.Checked = False
                                        self.checked_radiobutton = radiobutton

                                # [EVENT_HANDLER:BUTTON_CLICK] Handle submit button click
                                def button_click(self, sender, e):
                                    """
                                    Handles the click event for the submit button, executing the selected script and closing the form.

                                    Workflow:
                                    1. Checks if a radio button is selected.
                                    2. Retrieves the text of the selected radio button to determine the script to execute.
                                    3. Executes the corresponding script using the `execute_script` method.
                                    4. Closes the form after script execution.

                                    Key Features:
                                    - Ensures a script is only executed when a valid option is selected.
                                    - Automatically closes the form after processing, providing a clean user experience.
                                    """
                                    if self.checked_radiobutton is not None:
                                        self.button.Enabled = True
                                        script_name = self.checked_radiobutton.Text
                                        script_result = self.execute_script(script_name)
                                        self.Close()

                                # [SCRIPT:EXECUTE_REPLACE_COMMA] Handle "Replace Comma" functionality
                                def execute_script(self, script_name):
                                    # [OPTION:REPLACE_COMMA] Replace commas in parameter values
                                    if script_name.startswith(str_2(lan)):
                                        """
                                        Handles the "Replace Comma" functionality for modifying parameter values by replacing commas with user-defined text.

                                        Workflow:
                                        1. Prompts the user to select a parameter and define the replacement text for commas.
                                        2. Validates the input to ensure the parameter exists and is of string type.
                                        3. Executes the replacement operation on the parameter values of the selected elements.
                                        4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                        Key Features:
                                        - Provides a user-friendly interface for defining comma replacements.
                                        - Ensures proper handling of exceptions to maintain application stability.
                                        - Generates reports and logs for the modifications made.
                                        """
                                        try: 
                                            # [SCRIPT:IMPORTS] Import necessary libraries
                                            import clr
                                            import Autodesk.Revit.DB as DB
                                            from pyrevit import forms
                                            import sys
                                            from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
                                            clr.AddReference('RevitAPI')
                                            clr.AddReference('RevitAPIUI')
                                            
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            doc = __revit__.ActiveUIDocument.Document
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            if len(selection) == 0:
                                                forms.alert(str_1(lan))
                                                sys.exit()
                                            
                                            # [UI:REPLACE_COMMA_FORM] Display Replace Comma form
                                            icon_path = comma_icon()
                                            search_image_path = replace_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            parameter_label = str_6(lan)
                                            value_label = str_7(lan)
                                            window_name = str_8(lan)
                                            url = parsweb(wurl)
                                            parameter_name, desired_value = double_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, url)
                                            
                                            # [SCRIPT:DATA_PREPARATION] Prepare data for reporting
                                            elements = [doc.GetElement(element_id) for element_id in selection]
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, parameter_name, doc)   
                                            c_names = c_name(c1, doc)
                                            self.c1 = c1
                                            self.c_names = c_names
                                            self.c2 = c2 
                                            self.c_pname = [parameter_name]*len(selection)
                                            
                                            # [SCRIPT:VALIDATION] Validate parameter name
                                            if parameter_name is None: 
                                                sys.exit()
                                            
                                            # [SCRIPT:VALIDATION] Check if the parameter exists
                                            invalid_elements = []
                                            for element in elements:
                                                param = element.LookupParameter(parameter_name)
                                                if param is None:
                                                    invalid_elements.append(element)
                                                elif param.StorageType != DB.StorageType.String:
                                                    invalid_elements.append(element)
                                            
                                            # [SCRIPT:VALIDATION] Alert if invalid elements are found
                                            if invalid_elements:
                                                element_names = ', '.join([elem.Name for elem in invalid_elements])
                                                message = str_9(lan).format(parameter_name, element_names)
                                                forms.alert(message)
                                                sys.exit()

                                            # [SCRIPT:VALIDATION] Validate desired value
                                            if desired_value is None: 
                                                sys.exit()
                                            
                                            # [SCRIPT:TRANSACTION] Start transaction
                                            transaction_name = 'Set Parameter Value'
                                            transaction = DB.Transaction(doc, transaction_name)
                                            transaction.Start()
                                            try:
                                                # [SCRIPT:TRANSACTION] Start transaction
                                                for element in elements:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param and param.StorageType == DB.StorageType.String:
                                                        current_value = param.AsString()
                                                        new_value = current_value.replace(',', desired_value)  
                                                        param.Set(new_value)
                                                transaction.Commit()

                                                # [SCRIPT:REPORT] Generate report
                                                c3=p_values(selection, parameter_name, doc) 
                                                self.c3 = c3
                                                self.columns = [str_16(lan), str_24(lan) , str_25(lan), str_17(lan), str_18(lan)]

                                                # [UI:RESULT_DIALOG] Show result dialog
                                                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogResult)
                                                import sys
                                                title = str_10(lan)
                                                dialog = TaskDialog(title)
                                                dialog.MainContent = str_11(lan)
                                                dialog.TitleAutoPrefix = False
                                                dialog.AllowCancellation = True
                                                dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                dialog.DefaultButton = TaskDialogResult.None
                                                result = dialog.Show()
                                                if result == TaskDialogResult.Ok:
                                                    sys.exit()
                                                if result == TaskDialogResult.Cancel:
                                                    sys.exit()
                                            except Exception as ex:
                                                # [SCRIPT:ERROR_HANDLING] Rollback transaction on error
                                                transaction.RollBack()
                                                forms.alert(str_12(lan).format(ex))

                                        except StopIteration:
                                            pass
                                        except Exception:
                                            pass            
                                        except SystemExit:
                                            pass

                                    # [OPTION:REPLACE_UMLAUT] Handle "Replace Umlaut" functionality
                                    elif script_name.startswith(str_4(lan)):
                                        """
                                        Handles the "Replace Umlaut" functionality for modifying parameter values by replacing umlauts and special characters with their standard equivalents.

                                        Workflow:
                                        1. Prompts the user to select a parameter for modification.
                                        2. Validates the input to ensure the parameter exists and is of string type.
                                        3. Executes the replacement operation on the parameter values of the selected elements, converting umlauts (e.g., Ä, Ö, Ü) and special characters (e.g., ß) to their standard equivalents.
                                        4. Handles exceptions and errors gracefully to ensure the function continues processing.

                                        Key Features:
                                        - Provides a user-friendly interface for defining umlaut replacements.
                                        - Ensures proper handling of exceptions to maintain application stability.
                                        - Generates reports and logs for the modifications made.
                                        """
                                        try:
                                            # [SCRIPT:IMPORTS] Import necessary libraries
                                            import clr
                                            import Autodesk.Revit.DB as DB
                                            from pyrevit import forms
                                            import sys
                                            from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons,TaskDialogResult)
                                            clr.AddReference('RevitAPI')
                                            clr.AddReference('RevitAPIUI')
                                            
                                            # [SCRIPT:VALIDATION] Check if any element is selected
                                            doc = __revit__.ActiveUIDocument.Document
                                            selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                                            if len(selection) == 0:
                                                forms.alert(str_1(lan))
                                                sys.exit()
                                            
                                            elements = [doc.GetElement(element_id) for element_id in selection]
                                            
                                            # [UI:REPLACE_UMLAUT_FORM] Display Replace Umlaut form
                                            icon_path = comma_icon()
                                            search_image_path = replace_back()
                                            ok_icon_path = ok_icon()
                                            cancel_icon_path = cancel_icon()
                                            parameter_label = str_6(lan)
                                            window_name = str_13(lan)
                                            url = parsweb(wurl)
                                            parameter_name = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                                            
                                            # [SCRIPT:DATA_PREPARATION] Prepare data for reporting
                                            c1=int_ids(selection, doc)
                                            c2=p_values(selection, parameter_name, doc)
                                            c_names = c_name(c1, doc)
                                            self.c1 = c1
                                            self.c_names = c_names
                                            self.c2 = c2 
                                            self.c_pname = [parameter_name]*len(selection)

                                            # [SCRIPT:VALIDATION] Check if the parameter exists
                                            invalid_elements = []
                                            for element in elements:
                                                param = element.LookupParameter(parameter_name)
                                                if param is None:
                                                    invalid_elements.append(element)
                                                elif param.StorageType != DB.StorageType.String:
                                                    invalid_elements.append(element)
                                            
                                            # [SCRIPT:VALIDATION] Alert if invalid elements are found
                                            if invalid_elements:
                                                element_names = ', '.join([elem.Name for elem in invalid_elements])
                                                message = str_9(lan).format(parameter_name, element_names)
                                                forms.alert(message)
                                                sys.exit()
                                            
                                            # [SCRIPT:TRANSACTION] Start transaction
                                            transaction_name = 'Set Parameter Value'
                                            transaction = DB.Transaction(doc, transaction_name)
                                            transaction.Start()
                                            try:
                                                # [SCRIPT:APPLY_REPLACEMENT] Apply umlaut replacement
                                                for element in elements:
                                                    param = element.LookupParameter(parameter_name)
                                                    if param and param.StorageType == DB.StorageType.String:
                                                        current_value = param.AsString()
                                                        new_value = current_value \
                                                            .replace('Ä', 'Ae') \
                                                            .replace('ä', 'ae') \
                                                            .replace('Ü', 'Ue') \
                                                            .replace('ü', 'ue') \
                                                            .replace('Ö', 'Oe') \
                                                            .replace('ö', 'oe') \
                                                            .replace('ß', 'ss')
                                                        param.Set(new_value)
                                                transaction.Commit()

                                                # [SCRIPT:REPORT] Generate report
                                                c3=p_values(selection, parameter_name, doc) 
                                                self.c3 = c3
                                                self.columns = [str_16(lan), str_24(lan) , str_25(lan), str_17(lan), str_18(lan)]

                                                # [UI:RESULT_DIALOG] Show result dialog
                                                from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
                                                import sys
                                                title = str_10(lan)
                                                dialog = TaskDialog(title)
                                                dialog.MainContent = str_11(lan)
                                                dialog.TitleAutoPrefix = False
                                                dialog.AllowCancellation = True
                                                dialog.CommonButtons = TaskDialogCommonButtons.Ok
                                                dialog.DefaultButton = TaskDialogResult.None
                                                result = dialog.Show()
                                                if result == TaskDialogResult.Ok:
                                                    sys.exit()
                                                if result == TaskDialogResult.Cancel:
                                                    sys.exit()
                                            except Exception as ex:
                                                # [SCRIPT:ERROR_HANDLING] Rollback transaction on error
                                                transaction.RollBack()
                                                forms.alert(str_12(lan).format(ex))

                                        except StopIteration:
                                            pass
                                        except Exception:
                                            pass            
                                        except SystemExit:
                                            pass

                            # [SCRIPT:ACTIVE_DOCUMENT] Get active document
                            doc = DocumentManager.Instance.CurrentDBDocument
                            if 'form' not in globals():
                                pass
                            else:
                                form = SPECIAL_CHARACTER_EDITOR(doc)
                                form.ShowDialog()
                                
                    # [SCRIPT:RETURN_DATA] Return data for reporting
                    return form.columns, form.c1, form.c_names, form.c_pname , form.c2, form.c3 
                
                # [SCRIPT:PROCESS_RESULTS] Process results and create report tab
                headers, c1, c_names, c_pname, c2, c3 = parameter_editor_for_special_character()
                data = [
                    c1,
                    c_names,
                    c_pname,

                    c2,
                    c3
                ]
                editable = [False, False, False, False, False]
                if headers:
                    self.create_report_tab(headers, data, editable, title=button_text)  
                
                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                from structure.root import lan_path
                from UI.strings_parameter_value_editor_for_special_character import str_23
                lan = lan_path()
                MessageBox.Show(str(e),str_23(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Value of Parameter for Selected Elements] Parameter Value Deletion
        #
        # Handles deleting parameter values for selected elements:
        # - Deletes parameter values based on storage type
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:VALUE_OF_PARAMETER_FOR_SELECTED_ELEMENTS]
        elif button_text == tool_str_44(lan):
            """
            This script allows the user to delete the value of a specified parameter for selected elements in Revit.

            Workflow:
            1. Temporarily hides the Windows Form to process the logic.
            2. Imports necessary modules, including Revit API, pyRevit, and custom modules for handling UI elements and data processing.
            3. Checks if any elements are selected in the active Revit document. If no elements are selected, an alert is shown.
            4. Displays a custom Windows Form with input fields for the user to specify the name of the parameter whose value will be deleted.
            5. Verifies if the entered parameter exists for the selected elements. If any elements are missing the parameter, an alert is shown.
            6. Performs a transaction to delete the value of the specified parameter for each selected element based on the parameter’s storage type (e.g., string, integer, boolean, etc.).
            7. Generates a report detailing the elements affected, including the element IDs, names, parameter names, and both the original and current values.
            8. Restores the Windows Form after the operation completes.
            9. Handles exceptions and ensures that the form is shown again after the operation is finished, even if an error occurs during the process.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary libraries
                import clr
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitAPIUI')
                import Autodesk.Revit.DB as DB
                from Autodesk.Revit.DB import ElementId
                from pyrevit import forms, script
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.single import single_input
                from sajdmo.scripts.pset import c_name 
                from structure.root import wurl_path, delparametervalueforselected_icon, delete_sym, del_pvalue_back, del_pvalue_icon, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon
                from UI.strings_delete_value_of_parameter_for_selected_elements import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_h1, str_h2
                from UI.url import parsweb

                lan = lan_path()
                wurl= wurl_path()

                # [SCRIPT:VALIDATION] Check if any element is selected
                selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                if len(selection) == 0:
                    forms.alert(str_1(lan))
                else:
                    # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                    doc = __revit__.ActiveUIDocument.Document
                    selection = [doc.GetElement(element_id) for element_id in __revit__.ActiveUIDocument.Selection.GetElementIds()]
                    
                    # [UI:PARAMETER_FORM] Display parameter form
                    icon_path = del_pvalue_icon()
                    search_image_path = del_pvalue_back()
                    ok_icon_path = ok_icon()
                    cancel_icon_path = cancel_icon()
                    parameter_label = str_2(lan)
                    window_name = str_9(lan)
                    url = parsweb(wurl)
                    with forms.ProgressBar(title='', indeterminate=True):
                        parameter_name = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)

                        if parameter_name is None:
                            sys.exit()

                        # [SCRIPT:VALIDATION] Check parameter type
                        for element in selection:
                            paramT = element.LookupParameter(parameter_name)
                        if paramT.StorageType == DB.StorageType.Integer:
                            try:
                                # [SCRIPT:DATA_PREPARATION] Prepare data for reporting
                                element_param_values = {}
                                original_param_values = []
                                for element in selection:
                                    try:
                                        param = element.LookupParameter(parameter_name)
                                        if param:
                                            element_param_values[element.Id.IntegerValue] = param.AsValueString()
                                            param_value_original = element_param_values[element.Id.IntegerValue] = param.AsValueString()
                                            original_param_values.append(param_value_original)
                                    except Exception as e:
                                        sys.exit()
                                
                                # [SCRIPT:TRANSACTION] Start transaction
                                with DB.Transaction(doc, 'Delete Parameter') as trans:
                                    trans.Start()
                                    error_occurred = False  
                                    for element in selection:
                                        try:
                                            param = element.LookupParameter(parameter_name)
                                            if param:
                                                if param.StorageType == DB.StorageType.Integer:
                                                    param.Set(2)
                                                elif param.StorageType == DB.StorageType.ElementId:
                                                    param.Set(ElementId.InvalidElementId)
                                                elif param.StorageType == DB.StorageType.Boolean:
                                                    param.Set(False)
                                                elif param.StorageType == DB.StorageType.None:
                                                    pass
                                        except Exception as e:
                                            error_occurred = True  
                                            pass
                                    if error_occurred:
                                        forms.alert(str_3(lan))
                                        sys.exit()
                                    trans.Commit()
                                    
                                    # [SCRIPT:UPDATE] Update parameter values
                                    for element in selection:
                                        try:
                                            param = element.LookupParameter(parameter_name)
                                            if param:
                                                element_param_values[element.Id.IntegerValue] = param.AsValueString()
                                        except Exception as e:
                                            pass
                                
                                # [SCRIPT:DATA_PREPARATION] Prepare data for report
                                el = []
                                val = []
                                for element_id, param_value in element_param_values.items():
                                    el.append(element_id)
                                    val.append(param_value)
                                if len(el) == len(original_param_values) == len(val) == 0:
                                    sys.exit()
                                if len(el) == len(original_param_values) == len(val):
                                    output = script.get_output()
                                    table_data = []
                                    # [SCRIPT:ELEMENT_NAMES] Retrieve names of elements
                                    element_names = c_name(el, doc)  # Call the c_name function
            
                                    # [SCRIPT:TABLE_DATA] Update table data
                                    for element_id, element_name, original_value, current_value in zip(el, element_names, original_param_values, val):
                                        table_data.append([element_id, element_name, parameter_name, original_value, current_value])  

                                    headers = [str_5(lan), str_12(lan), str_13(lan), str_6(lan), str_7(lan)]
                                    data = list(zip(*table_data))
                                    editable = [False, False, False, False, False]
                                    self.create_report_tab(headers, data, editable, title=button_text)  
                     
                            except StopIteration:
                                pass
                                sys.exit()
                            except Exception:
                                pass
                                sys.exit()
                            except SystemExit:
                                pass
                                sys.exit()

                        else:
                            try:
                                # [SCRIPT:DATA_PREPARATION] Prepare data for reporting
                                element_param_values = {}
                                original_param_values = []
                                for element in selection:
                                    try:
                                        param = element.LookupParameter(parameter_name)
                                        if param:
                                            element_param_values[element.Id.IntegerValue] = param.AsValueString()
                                            param_value_original = element_param_values[element.Id.IntegerValue] = param.AsValueString()
                                            original_param_values.append(param_value_original)
                                    except Exception as e:
                                        sys.exit()
                                
                                # [SCRIPT:TRANSACTION] Start transaction
                                with DB.Transaction(doc, 'Delete Parameter') as trans:
                                    trans.Start()
                                    error_occurred = False  
                                    for element in selection:
                                        try:
                                            param = element.LookupParameter(parameter_name)
                                            if param:
                                                if param.StorageType == DB.StorageType.String:
                                                    param.Set('')
                                                elif param.StorageType == DB.StorageType.Integer:
                                                    param.Set(0)
                                                elif param.StorageType == DB.StorageType.Double:
                                                    param.Set(0.0)
                                                elif param.StorageType == DB.StorageType.ElementId:
                                                    param.Set(ElementId.InvalidElementId)
                                                elif param.StorageType == DB.StorageType.Boolean:
                                                    param.Set(False)
                                                elif param.StorageType == DB.StorageType.None:
                                                    pass
                                        except Exception as e:
                                            error_occurred = True  
                                            pass
                                    if error_occurred:
                                        forms.alert(str_3(lan))
                                        sys.exit()
                                    trans.Commit()
                                    
                                    # [SCRIPT:UPDATE] Update parameter values
                                    for element in selection:
                                        try:
                                            param = element.LookupParameter(parameter_name)
                                            if param:
                                                element_param_values[element.Id.IntegerValue] = param.AsValueString()
                                        except Exception as e:
                                            pass
                                
                                # [SCRIPT:DATA_PREPARATION] Prepare data for report
                                el = []
                                val = []
                                for element_id, param_value in element_param_values.items():
                                    el.append(element_id)
                                    val.append(param_value)
                                if len(el) == len(original_param_values) == len(val) == 0:
                                    sys.exit()
                                if len(el) == len(original_param_values) == len(val):
                                    output = script.get_output()
                                    table_data = []
                                    # [SCRIPT:ELEMENT_NAMES] Retrieve names of elements
                                    element_names = c_name(el, doc)  
            
                                    # [SCRIPT:TABLE_DATA] Update table data
                                    for element_id, element_name, original_value, current_value in zip(el, element_names, original_param_values, val):
                                        table_data.append([element_id, element_name, parameter_name, original_value, current_value])

                                    headers = [str_5(lan), str_12(lan), str_13(lan), str_6(lan), str_7(lan)]
                                    data = list(zip(*table_data))
                                    editable = [False, False, False, False, False]
                                    self.create_report_tab(headers, data, editable, title=button_text)
                            
                            except StopIteration:
                                pass
                                sys.exit()
                            except Exception:
                                pass
                                sys.exit()
                            except SystemExit:
                                pass
                                sys.exit()

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()
                
            except Exception as e:
                from structure.root import lan_path
                from UI.strings_delete_value_of_parameter_for_selected_elements import str_11
                lan=lan_path()
                MessageBox.Show(str(e),str_11(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()
            
        ###############################################################################
        # [SCRIPT:DOC:DATA PROCESSING:Desired Character in Value of Parameter for Selected Elements] Character Deletion in Parameter Values
        #
        # Handles deleting specific characters from parameter values:
        # - Deletes specified characters from parameter values
        # - Displays results in a report tab
        ###############################################################################
        
        # [SCRIPT:DESIRED_CHARACTER_IN_VALUE_OF_PARAMETER_FOR_SELECTED_ELEMENTS]
        elif button_text == tool_str_45(lan):
            """
            This script allows the user to delete a specified character from the value of a parameter for selected elements in Revit.

            Workflow:
            1. Temporarily hides the Windows Form to process the logic.
            2. Imports necessary modules, including Revit API, pyRevit, and custom modules for handling UI elements and data processing.
            3. Checks if any elements are selected in the active Revit document. If no elements are selected, an alert is shown.
            4. Displays a custom Windows Form with input fields where the user can specify the parameter name and the character to remove.
            5. Verifies if the entered parameter exists for the selected elements and if the character exists in the current parameter values. If there are any issues, appropriate alerts are shown.
            6. Performs a transaction to remove the specified character from the parameter value for each selected element (only if the parameter is of string type).
            7. Generates a report detailing the elements affected, including the element IDs, names, parameter names, the character removed, the original values, and the updated values.
            8. Restores the Windows Form after the operation completes.
            9. Handles exceptions and ensures that the form is shown again after the operation is finished, even if an error occurs during the process.
            """
            try:
                # [UI:HIDE_FORM] Hide the Windows Form
                self.Hide()

                # -*- coding: utf-8 -*-
                
                # [SCRIPT:IMPORTS] Import necessary libraries
                import clr
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitAPIUI')
                import Autodesk.Revit.DB as DB
                from pyrevit import forms, script
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.double import double_input_plusnote
                from sajdmo.forms.message import mes
                from structure.root import wurl_path, delete_sym, del_pval_character_icon, del_pval_character_back, lan_path, cuslogo_path, logo_path, cancel_icon, ok_icon
                from UI.strings_delete_desired_character_in_value_of_para import (str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, 
                str_16, str_17, str_18, str_19, str_20, str_h1, str_h2)
                from UI.url import parsweb
                from sajdmo.scripts.pset import c_name  

                lan = lan_path()
                wurl= wurl_path()

                # [SCRIPT:ACTIVE_DOCUMENT] Get active document and selection
                doc = __revit__.ActiveUIDocument.Document
                selection = __revit__.ActiveUIDocument.Selection.GetElementIds()
                #Check if there is any element
                if len(selection) == 0:
                    forms.alert(str_1(lan))
                else:
                    elements = [doc.GetElement(element_id) for element_id in selection]
                    icon_path = del_pval_character_icon()
                    search_image_path = del_pval_character_back()
                    ok_icon_path = ok_icon()
                    cancel_icon_path = cancel_icon()
                    parameter_label = str_2(lan)
                    value_label = str_3(lan)
                    window_name = str_13(lan)
                    note = str_8(lan)
                    url = parsweb(wurl)
                    with forms.ProgressBar(title='', indeterminate=True):
                        parameter_name, trash_character = double_input_plusnote(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, value_label, window_name, note, url)
                    if parameter_name is None:
                        forms.alert(str_9(lan)) 
                        sys.exit()
                    
                    # [SCRIPT:VALIDATE_ELEMENTS] Validate elements and parameters
                    invalid_elements = []
                    for element in elements:
                        param = element.LookupParameter(parameter_name)
                        if param is None:
                            invalid_elements.append(element)
                        elif param.StorageType != DB.StorageType.String:
                            invalid_elements.append(element)
                    if invalid_elements:
                        element_names = ', '.join([elem.Name for elem in invalid_elements])
                        message = str_10(lan).format(parameter_name, element_names)
                        forms.alert(message)
                        sys.exit()
                    
                    if trash_character is None: 
                        sys.exit()

                    # [SCRIPT:CHECK_CHARACTER] Check if character exists in parameter values
                    for element in elements:
                        param = element.LookupParameter(parameter_name)
                        if param and param.StorageType == DB.StorageType.String:
                            current_value = param.AsString()
                            if trash_character not in current_value:
                                alert_message = str_20(lan)
                                forms.alert(alert_message.format(trash_character, element.Name))
                                sys.exit()

                    try:
                        # [SCRIPT:TRANSACTION] Start transaction to delete character
                        before_values = [(element.Id, element.LookupParameter(parameter_name).AsString()) for element in elements]
                        for i in range(len(before_values)):
                            before_values[i] = [before_values[i][0]] + list(before_values[i][1:])  
                        if parameter_name and trash_character:
                            transaction_name = 'Set Parameter Value'
                            transaction = DB.Transaction(doc, transaction_name)
                            transaction.Start()
                            try:
                                for element in elements:
                                    param = element.LookupParameter(parameter_name)
                                    if param and param.StorageType == DB.StorageType.String:
                                        current_value = param.AsString()
                                        new_value = current_value.replace(trash_character, '')  
                                        param.Set(new_value)
                                transaction.Commit()
                                # [SCRIPT:DATA_PREPARATION] Prepare data for report
                                mes("",str_11(lan))
                                after_values = [(element.Id.ToString(), element.LookupParameter(parameter_name).AsString()) for element in elements]
                                int_ids = [element.Id.IntegerValue for element in elements]  
                                element_names = c_name(int_ids, doc)  
                                data = []
                                for before, after, name in zip(before_values, after_values, element_names): 
                                    row_data = [str(before[0]), name, parameter_name, trash_character, before[1], after[1]]  
                                    data.append(row_data)

                                # [SCRIPT:REPORT] Generate report
                                headers = [str_5(lan), str_17(lan), str_18(lan), str_19(lan), str_6(lan), str_7(lan)]  
                                data = list(zip(*data))
                                editable = [False, False, False, False, False, False]
                                self.create_report_tab(headers, data, editable, title=button_text)  

                                
                            except Exception as ex:
                                transaction.RollBack()
                                forms.alert(str_12(lan).format(ex))

                    except StopIteration:
                        pass
                        sys.exit()
                    except Exception:
                        pass
                        sys.exit()        
                    except SystemExit:
                        pass
                        sys.exit()

                # [UI:SHOW_FORM] Show the Windows Form again
                self.Show()

            except Exception as e:
                MessageBox.Show(str(e),str_16(lan))
                self.Show()
            except StopIteration:
                self.Show()
                pass
            except Exception:
                pass   
                self.Show()        
            except SystemExit:
                pass
                self.Show()

        else:
            from structure.root import lan_path
            from UI.strings_main import str_29, str_54
            lan = lan_path()
            MessageBox.Show(str_54(lan) + button_text, str_29(lan))  

    ###############################################################################
    # [APP:DOC:UI CONTROL] Icon Selection Handler
    #
    # Handles icon button selection states:
    # - Deselects all existing buttons
    # - Highlights clicked button
    # - Maintains visual selection feedback
    ###############################################################################

    # [APP:UI:ICON_SELECTION] Handles icon button selection states
    def on_icon_click(self, sender, event):
        """
        Deselects all buttons and selects the clicked button.
        """
        # [UI:DESELECT_ALL] Deselect all buttons
        for btn in self.icon_buttons:
            btn.BackColor = Color.LightGray
        # [UI:SELECT_CLICKED] Select the clicked button
        sender.BackColor = Color.LightBlue

    ###############################################################################
    # [APP:DOC:UI CONTROL] Keyboard Event Handler
    #
    # Handles keyboard input for form control:
    # - Monitors key press events
    # - Detects escape key press
    # - Manages form closure
    ###############################################################################

    # [APP:UI:KEYBOARD_HANDLER] Handles keyboard input for form control
    def on_key_down(self, sender, event):
        """
        Handles key press events to close the form when the Escape key is pressed.
        """
        # [UI:CHECK_ESCAPE] Check if the Escape key was pressed
        if event.KeyCode == Keys.Escape:  
            # [UI:CLOSE_FORM] Close the form
            self.Close()  

    ###############################################################################
    # [APP:DOC:EXTERNAL LINKS] BIM Pars Website Navigation
    #
    # Handles BIM Pars website access:
    # - Loads URL configuration
    # - Retrieves BIM Pars website URL
    # - Opens URL in default browser
    ###############################################################################

    # [APP:UI:EXTERNAL_LINK] Handles BIM Pars website access
    def open_bim_pars_url(self, sender, event):
        """
        Opens the URL for the BIM Pars website.
        """
        # [UI:LOAD_URLS] Load URL configuration
        self.load_general_urls()

        # [UI:GET_URL] Retrieve BIM Pars website URL
        url = self.general_urls["BIM _Pars_web"]  

        # [UI:OPEN_BROWSER] Open URL in default browser
        webbrowser.open(url)

    ###############################################################################
    # [APP:DOC:EXTERNAL LINKS] PyRevit Website Navigation
    #
    # Handles pyRevit website access:
    # - Loads URL configuration
    # - Retrieves pyRevit website URL
    # - Opens URL in default browser
    ###############################################################################

    # [APP:UI:EXTERNAL_LINK] Handles pyRevit website access
    def open_pyRevit_url(self, sender, event):
        """
        Opens the URL for the pyRevit website.
        """
        # [UI:LOAD_URLS] Load URL configuration
        self.load_general_urls()

        # [UI:GET_URL] Retrieve pyRevit website URL
        url = self.general_urls["pyRevit_web"] 

        # [UI:OPEN_BROWSER] Open URL in default browser
        webbrowser.open(url)

    ###############################################################################
    # [APP:DOC:UI CONTROL] Package Selection Prevention
    #
    # Handles preventing package node selection:
    # - Checks node identity
    # - Cancels invalid selections
    # - Maintains UI interaction constraints
    ###############################################################################

    # [APP:UI:SELECTION_PREVENTION] Handles preventing package node selection
    def prevent_package_selection(self, sender, e):
        """
        Prevents selection of the Package node.
        """
        # [UI:CHECK_NODE] Check if the node being selected is the Package node
        if e.Node.Text == str_22(lan):  
            # [UI:CANCEL_SELECTION] Cancel the selection
            e.Cancel = True

    ###############################################################################
    # [APP:DOC:SETTINGS MANAGEMENT] Settings Window Handler
    #
    # Handles application settings window functionality:
    # - Creates and displays settings form
    # - Manages language selection
    # - Controls display mode options
    # - Handles logo customization
    # - Processes license management
    # - Maintains UI state and user preferences
    ###############################################################################

    # [APP:UI:SETTINGS_WINDOW] Handles application settings window functionality
    def window_app_settings_click(self, sender, e):
        """
        Handles the click event for the application settings window.
        """
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            self.license_checked = False

            # [SCRIPT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('System.Windows.Forms')
            clr.AddReference('System.Drawing')
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitServices')
            import System.Windows.Forms as WinForms
            from System.Windows.Forms import Form, Label, ComboBox, ComboBoxStyle, Button, PictureBox, Cursors
            from System.Drawing import Point, Size, Font, FontStyle, Bitmap, Color, Icon, GraphicsUnit
            from System import Array
            from RevitServices.Persistence import DocumentManager
            from pyrevit import script, forms
            import webbrowser
            import getpass  
            from datetime import datetime  
            import shutil
            import os
            import sys
            sys.path.append(os.path.dirname(__file__))
            from structure.root import key_path, wurl_path, icosetup, backsetup, lan_path, mod_path, setting_back, logo_path, cuslogo_path, reset_icon
            from UI.lan import detect_language
            from UI.mod import check_mode
            from UI.url import parsweb
            from UI.strings_settings import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11, str_12, str_13, str_14, str_15, str_16, str_17, str_18, str_19, str_h1, str_h2
            from sajdmo.pars.api import check_key 

            # [UI:INITIALIZE_SETTINGS] Initialize settings and paths
            wurl= wurl_path()
            lan = lan_path()
            str1 = str_1(lan)
            str2 = str_2(lan)
            str3 = str_3(lan)
            str4 = str_4(lan)
            str5 = str_5(lan)
            str6 = str_6(lan)
            str7 = str_7(lan)
            str8 = str_8(lan)
            str9 = str_9(lan)
            str10 = str_10(lan)
            str11 = str_11(lan)

            # [UI:SETTINGS_FORM] Initialize the settings form
            class SETTINGS(Form):
                def __init__(self, doc):
                    """
                    Initializes the settings form window with the required components and UI elements. 
                    """
                    # [UI:FORM_SETUP] Set up form properties
                    self.Text = str_12(lan)
                    self.Width = 350
                    self.Height = 650
                    self.BackColor = Color.White
                    self.doc = doc
                    self.TopMost = True
                    self.CenterToScreen()
                    self.language_changed = False  
                    self.mode_changed = False  
                    
                    # [UI:SET_ICON] Set the form icon
                    icon = icosetup()
                    self.Icon = Icon(icon)

                    # [UI:CREATED_BY_LABEL] Add "BIM Pars" label
                    self.created_by_label = Label()
                    self.created_by_label.AutoSize = True
                    self.created_by_label.Text = "BIM Pars"
                    self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                    self.created_by_label.ForeColor = Color.Blue
                    self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold) 
                    self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                    self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)  
                    self.created_by_label.Cursor = Cursors.Hand  
                    self.created_by_label.Click += self.Label_Click
                    self.Controls.Add(self.created_by_label)

                    # [UI:BACKGROUND_IMAGE] Add background image
                    self.pictureBox = PictureBox()
                    self.pictureBox.Location = Point(-70, 360)
                    self.pictureBox.Size = Size(700, 700)    
                    background = backsetup()
                    image = Bitmap(background)
                    self.pictureBox.Image = image
                    self.pictureBox.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    # [UI:SETTINGS_IMAGE] Add settings image to the form
                    self.pictureBox1 = PictureBox()
                    self.pictureBox1.Location = Point(75, 10)
                    self.pictureBox1.Size = Size(200, 200)    
                    pic = setting_back()
                    image = Bitmap(pic)
                    self.pictureBox1.Image = image
                    self.pictureBox1.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)
                    self.Controls.Add(self.pictureBox1)

                    # [UI:PLACEHOLDER_IMAGE] Add placeholder image (not used)
                    self.pictureBox2 = PictureBox()
                    self.pictureBox2.Location = Point(50, 400)
                    self.pictureBox2.Size = Size(200, 200)    
                    self.pictureBox2.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    # [UI:DIVIDER_LINES] Add divider lines for visual separation
                    self.lineLabel = Label()
                    self.lineLabel.Location = Point(50, 400)
                    self.lineLabel.Size = Size(200, 1)
                    self.lineLabel.BackColor = Color.Gray
                    self.lineLabel.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    self.line2Label = Label()
                    self.line2Label.Location = Point(50,400)
                    self.line2Label.Size = Size(1, 200)
                    self.line2Label.BackColor = Color.Gray
                    self.line2Label.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    self.line3Label = Label()
                    self.line3Label.Location = Point(50, 600)
                    self.line3Label.Size = Size(200, 1)
                    self.line3Label.BackColor = Color.Gray
                    self.line3Label.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    self.line4Label = Label()
                    self.line4Label.Location = Point(250,400)
                    self.line4Label.Size = Size(1, 200)
                    self.line4Label.BackColor = Color.Gray
                    self.line4Label.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    # [UI:LANGUAGE_GROUPBOX] Create a GroupBox for language selection
                    self.languageGroupBox = GroupBox()
                    self.languageGroupBox.Text = str2
                    self.languageGroupBox.Size = Size(250, 50)  
                    self.languageGroupBox.Location = Point(40, 290)  
                    self.Controls.Add(self.languageGroupBox)

                    # [UI:LANGUAGE_COMBOBOX] Add language selection ComboBox
                    options = ["Deutsch", "English", "فارسی","Русский","Español","中文","한국어"]
                    self.comboBox = ComboBox()
                    self.comboBox.Width = 230
                    self.comboBox.Left = 10
                    self.comboBox.Top = 20
                    self.comboBox.DropDownStyle = ComboBoxStyle.DropDownList
                    self.comboBox.Items.AddRange(Array[object](options))
                    self.comboBox.SelectedIndexChanged += self.comboBox_selected_index_changed
                    self.comboBox.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    # [UI:SET_LANGUAGE] Set the default language based on the current setting
                    path = lan_path()
                    message =detect_language(path)
                    if message == "Deutsch":
                        self.comboBox.SelectedIndex = 0
                    elif message == "English":
                        self.comboBox.SelectedIndex = 1
                    elif message == "فارسی":
                        self.comboBox.SelectedIndex = 2
                    elif message == "Русский":
                        self.comboBox.SelectedIndex = 3
                    elif message == "Español":
                        self.comboBox.SelectedIndex = 4
                    elif message == "中文":
                        self.comboBox.SelectedIndex = 5
                    elif message == "한국어":
                        self.comboBox.SelectedIndex = 6
                    
                    # [UI:ADD_LANGUAGE_COMBOBOX] Add the ComboBox to the GroupBox
                    self.languageGroupBox.Controls.Add(self.comboBox)

                    # [UI:MODE_GROUPBOX] Create a GroupBox for mode selection
                    self.modeGroupBox = GroupBox()
                    self.modeGroupBox.Text = str1
                    self.modeGroupBox.Size = Size(250, 50) 
                    self.modeGroupBox.Location = Point(40, 230) 
                    self.Controls.Add(self.modeGroupBox)
                    self.modeGroupBox.Enabled = False

                    # [UI:MODE_COMBOBOX] Add mode selection ComboBox
                    options = [str4, str5]
                    self.comboBox2 = ComboBox()
                    self.comboBox2.Width = 230
                    self.comboBox2.Left = 10
                    self.comboBox2.Top = 20
                    self.comboBox2.DropDownStyle = ComboBoxStyle.DropDownList
                    self.comboBox2.Items.AddRange(Array[object](options))
                    self.comboBox2.SelectedIndexChanged += self.comboBox2_selected_index_changed
                    self.comboBox2.Anchor = (WinForms.AnchorStyles.Top | WinForms.AnchorStyles.Left)

                    # [UI:SET_MODE] Set the default mode based on the current setting
                    path = mod_path()
                    message =check_mode(path)
                    if message == "Cool Mode":
                        self.comboBox2.SelectedIndex = 0
                    else:
                        message == "Boring Mode"
                        self.comboBox2.SelectedIndex = 1

                    # [UI:ADD_MODE_COMBOBOX] Add the ComboBox to the GroupBox
                    self.modeGroupBox.Controls.Add(self.comboBox2)
                    
                    self.language_changed = False  
                    self.mode_changed = False  

                    # [UI:LOGO_GROUPBOX] Create a GroupBox for logo customization
                    self.logoGroupBox = GroupBox()
                    self.logoGroupBox.Text = str3
                    self.logoGroupBox.Size = Size(250, 60)  
                    self.logoGroupBox.Location = Point(40, 350) 
                    self.Controls.Add(self.logoGroupBox)

                    # [UI:DEFAULT_LOGO_BUTTON] Add button to reset to default logo
                    self.button = Button()
                    self.button.Text = str6
                    self.button.Width = 100
                    self.button.Height = 30
                    self.button.Left = 20
                    self.button.Top = 20
                    self.button.Click += self.defoult_button_clicked
                    self.logoGroupBox.Controls.Add(self.button)

                    # [UI:CUSTOM_LOGO_BUTTON] Add button to set a custom logo
                    self.button2 = Button()
                    self.button2.Text = str7
                    self.button2.Width = 100
                    self.button2.Height = 30
                    self.button2.Left = 130
                    self.button2.Top = 20
                    self.button2.Click += self.new_button_clicked
                    self.logoGroupBox.Controls.Add(self.button2)
                    
                    # [UI:LICENSE_GROUPBOX] Create a GroupBox for license management
                    self.keyGroupBox = GroupBox()
                    self.keyGroupBox.Text = str_13(lan)
                    self.keyGroupBox.Size = Size(250, 100)  
                    self.keyGroupBox.Location = Point(40, 420)  
                    self.Controls.Add(self.keyGroupBox)

                    # [UI:LICENSE_TEXTBOX] Add TextBox for license key input
                    self.licenseKeyTextBox = TextBox()
                    self.licenseKeyTextBox.Size = Size(230, 30)  
                    self.licenseKeyTextBox.Location = Point(10, 20)  
                    self.keyGroupBox.Controls.Add(self.licenseKeyTextBox)  

                    # [UI:SET_LICENSE_KEY] Set the current license key in the TextBox
                    path = key_path()
                    key_license =check_key(path)
                    self.licenseKeyTextBox.Text = key_license

                    # [UI:CHECK_LICENSE_BUTTON] Add button to check the license key
                    self.checkLicenseButton = Button()
                    self.checkLicenseButton.Text = str_14(lan)
                    self.checkLicenseButton.Size = Size(100, 30) 
                    self.checkLicenseButton.Location = Point(20, 60) 
                    self.checkLicenseButton.Click += self.check_license 

                    # [UI:SAVE_LICENSE_BUTTON] Add button to save the license key
                    self.saveLicenseButton = Button()
                    self.saveLicenseButton.Text = str_15(lan)
                    self.saveLicenseButton.Size = Size(210, 30) 
                    self.saveLicenseButton.Location = Point(20, 60)
                    self.saveLicenseButton.Click += self.save_license 
                    self.keyGroupBox.Controls.Add(self.saveLicenseButton)  

                # [UI:FORM_CLOSED] Handles the form closing and shows a confirmation if settings changed
                def OnClosed(self, e):
                    """
                    Handles the form closing and shows a confirmation if settings changed.
                    """
                    # [UI:SHOW_ALERT] Show alert only if the language or mode has been changed
                    if self.mode_changed or self.language_changed:
                        MessageBox.Show(str_19(lan), str_18(lan))
                    
                    # [UI:DISPOSE_FORM] Dispose the form
                    self.Dispose()

                # [UI:LABEL_CLICK] Opens the URL when the label is clicked
                def Label_Click(self, sender, event):
                    """
                    Opens the URL when the label is clicked.
                    """
                    # [UI:OPEN_URL] Open the BIM Pars website URL
                    url = parsweb(wurl)
                    webbrowser.open(url)

                # [UI:RESET_DEFAULT] Resets settings to default and closes the window
                def defoult_button_clicked(self, sender, event):
                    """
                    Resets settings to default and closes the window.
                    """
                    # [UI:SET_MODE] Reset mode to "Boring Mode"
                    self.comboBox2.SelectedIndex = 1
                    mode_path = mod_path()           
                    with open(mode_path, 'w') as file:
                        file.write("boring")

                    # [UI:SET_LANGUAGE] Reset language to "English"
                    self.comboBox.SelectedIndex = 1
                    lang_path = lan_path()           
                    with open(lang_path, 'w') as file:
                        file.write("english")

                        # [UI:REMOVE_CUSTOM_LOGO] Remove custom logo if it exists
                        try: 
                            file_path = cuslogo_path()
                            os.remove(file_path)
                            self.Close()            
                        except Exception as e:
                            # [UI:CLOSE_FORM] Close the form if logo removal fails
                            self.Close()

                # [UI:MODE_CHANGE] Updates the app mode based on dropdown selection
                def comboBox2_selected_index_changed(self, sender, e):
                    """
                    Updates the app mode based on dropdown selection.
                    """
                    selected_item = self.comboBox2.SelectedItem
                    if selected_item == str4:
                        # [UI:REMOVE_ELEMENTS] Remove visual elements for "Cool Mode"
                        self.Controls.Remove(self.pictureBox2)
                        self.Controls.Remove(self.lineLabel)
                        self.Controls.Remove(self.line2Label)
                        self.Controls.Remove(self.line3Label)
                        self.Controls.Remove(self.line4Label)
                        mode_path = mod_path()           
                        with open(mode_path, 'w') as file:
                            file.write("cool")
                    elif selected_item == str5:
                        # [UI:REMOVE_ELEMENTS] Remove visual elements for "Boring Mode"
                        if self.pictureBox in self.Controls:
                            self.Controls.Remove(self.pictureBox)
                            self.Controls.Remove(self.pictureBox2)
                            self.Controls.Remove(self.lineLabel)
                            self.Controls.Remove(self.line2Label)
                            self.Controls.Remove(self.line3Label)
                            self.Controls.Remove(self.line4Label)
                        mode_path = mod_path()           
                        with open(mode_path, 'w') as file:
                            file.write("boring")
                
                    # [UI:SET_MODE_CHANGED] Set the flag to True after the first change
                    self.mode_changed = True  

                # [UI:LANGUAGE_CHANGE] Updates the app language based on dropdown selection
                def comboBox_selected_index_changed(self, sender, e):
                    """
                    Updates the app language based on dropdown selection.
                    """
                    selected_item = self.comboBox.SelectedItem

                    # [UI:SET_LANGUAGE] Write the selected language to the file
                    if selected_item == "Deutsch":
                        lang_path = lan_path()           
                        with open(lang_path, 'w') as file:
                            file.write("deutsch")
                    elif selected_item == "English":
                        lang_path = lan_path()           
                        with open(lang_path, 'w') as file:
                            file.write("english")
                    elif selected_item == "فارسی":
                        lang_path = lan_path()           
                        with open(lang_path, 'w') as file:
                            file.write("farsi")
                    elif selected_item == "Русский":
                        lang_path = lan_path()           
                        with open(lang_path, 'w') as file:
                            file.write("russian")
                    elif selected_item == "Español":
                        lang_path = lan_path()           
                        with open(lang_path, 'w') as file:
                            file.write("spanish")
                    elif selected_item == "中文":
                        lang_path = lan_path()           
                        with open(lang_path, 'w') as file:
                            file.write("chinese")
                    elif selected_item == "한국어":
                        lang_path = lan_path()           
                        with open(lang_path, 'w') as file:
                            file.write("korean")

                    # [UI:SET_LANGUAGE_CHANGED] Set the flag to True after the first change
                    self.language_changed = True       

                # [UI:NEW_LOGO] Allows the user to select and set a new logo image 
                def new_button_clicked(self, sender, event):
                    """
                    Allows the user to select and set a new logo image.
                    """
                    try:
                        # [UI:REMOVE_ELEMENTS] Remove existing visual elements
                        self.Controls.Remove(self.pictureBox)
                        self.Controls.Remove(self.pictureBox2)
                        self.Controls.Remove(self.lineLabel)
                        self.Controls.Remove(self.line2Label)
                        self.Controls.Remove(self.line3Label)
                        self.Controls.Remove(self.line4Label)

                        # [UI:SELECT_LOGO] Allow the user to pick a new logo file
                        cuslogo_path_value = cuslogo_path()
                        source_file = forms.pick_file(file_ext='png')
                        if source_file is None:
                            forms.alert(str8)
                            sys.exit()
                        if source_file:
                            # [UI:SAVE_LOGO] Save the selected logo to the custom logo path
                            destination_directory = os.path.dirname(cuslogo_path_value)
                            if not os.path.exists(destination_directory):
                                os.makedirs(destination_directory)
                            shutil.copy(source_file, cuslogo_path_value)
                            forms.alert(str9)
                        else:
                            forms.alert(str10)
                    except StopIteration:
                        pass
                    except Exception:
                        pass            
                    except SystemExit:
                        pass
                    self.Close()
            
                # [UI:CHECK_LICENSE] Checks the license status
                def check_license(self, sender, event):
                    """
                    Checks the license status.
                    """
                    self.Hide()
                    pass
                    self.Show()

                # [UI:SAVE_LICENSE] Saves the license key
                def save_license(self, sender, event):
                    """
                    Saves the license key.
                    """
                    self.Hide()
                    path = key_path()  
                    license_key = self.licenseKeyTextBox.Text  

                    try:
                        # [UI:UPDATE_LICENSE] Update the license key in the JSON file
                        with open(path, 'r') as json_file:
                            data = json.load(json_file)
                        data["license_key"] = license_key
                        with open(path, 'w') as json_file:
                            json.dump(data, json_file, indent=4)  
                        MessageBox.Show(str_17(lan), str_16(lan))  
                    except:
                        pass 
                    self.Show()

            # [UI:INITIALIZE_FORM] Initialize and show the settings form
            doc = DocumentManager.Instance.CurrentDBDocument
            if 'form' not in globals():
                pass
            else:
                form = SETTINGS(doc)
                form.ShowDialog()
            
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()

            # [UI:CHECK_LICENSE_STATUS] Check license status only if it hasn't been checked yet
            if not self.license_checked:
                self.check_license_changed_status()
                self.license_checked = True  

        except Exception as e:
            pass
            self.Show()
        except StopIteration:
            pass
            self.Show()
        except Exception:
            pass   
            self.Show()        
        except SystemExit:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:UI FEEDBACK] Process Initialization
    #
    # Handles progress bar setup and process start:
    # - Resets and shows progress bar
    # - Initializes processing flags
    # - Starts progress timer
    # - Launches processing thread
    # - Maintains UI responsiveness
    ###############################################################################

    # [APP:UI:PROCESS_INIT] Handles progress bar setup and process start
    def start_process(self):
        """
        Initializes and shows the progress bar at the start of a process.
        """
        # [UI:RESET_PROGRESS] Reset the progress bar
        self.progress_bar.Value = 0  

        # [UI:SHOW_PROGRESS] Make the progress bar visible
        self.progress_bar.Visible = True 

        # [UI:SET_FLAGS] Initialize processing flags
        self.is_processing = True
        self.progress_steps = 0  

        # [UI:START_TIMER] Start the progress timer
        self.timer.Start()  

        # [UI:THREADED_ACTION] Run the actual action in a separate thread
        threading.Thread(target=self.perform_action).start()

    ###############################################################################
    # [APP:DOC:UI FEEDBACK] Progress Completion
    #
    # Handles progress bar completion and cleanup:
    # - Sets final progress state
    # - Updates processing flags
    # - Resets UI elements
    # - Prepares for future operations
    ###############################################################################

    # [APP:UI:PROCESS_FINISH] Hides the progress bar and indicates that the process is complete
    def finish_process(self):
        """
        Hides the progress bar and indicates that the process is complete.
        """
        # [UI:SET_FLAGS] Set processing flag to False
        self.is_processing = False

        # [UI:SET_PROGRESS] Set progress bar to 100%
        self.progress_bar.Value = 100  

        # [UI:RESET_PROGRESS] Reset the progress bar
        self.reset_progress_bar()  

    ###############################################################################
    # [APP:DOC:UI FEEDBACK] Progress Bar Update
    #
    # Handles progress bar visualization updates:
    # - Calculates progress percentage
    # - Updates progress bar value
    # - Maintains processing state check
    ###############################################################################

    # [APP:UI:PROGRESS_UPDATE] Handles progress bar visualization updates
    def update_progress(self, sender, event):
        """
        Updates the progress bar.
        """
        # [UI:CHECK_PROCESSING] Update progress bar only if processing is ongoing
        if self.is_processing:
            # [UI:CALCULATE_PROGRESS] Calculate and set progress bar value
            self.progress_bar.Value = self.progress_steps * (100 // 10)

    ###############################################################################
    # [APP:DOC:UI FEEDBACK] Progress Simulation
    #
    # Handles simulating progress for UI feedback:
    # - Defines total progress steps
    # - Simulates processing time
    # - Updates progress counter
    # - Handles process interruption
    # - Triggers completion handling
    ###############################################################################

    # [APP:UI:PROGRESS_SIMULATION] Handles simulating progress for UI feedback
    def perform_action(self):
        """
        Performs the action and updates the progress bar.
        """
        # [UI:SET_TOTAL_STEPS] Define total progress steps
        total_steps = 10  

        # [UI:SIMULATE_PROGRESS] Simulate processing time and update progress
        for step in range(total_steps):
            time.sleep(0.05)  
            self.progress_steps += 1  

            # [UI:CHECK_INTERRUPT] Break if processing is interrupted
            if not self.is_processing:
                break  

        # [UI:TRIGGER_FINISH] Trigger completion handling
        self.finish_process()  

    ###############################################################################
    # [APP:DOC:UI FEEDBACK] Progress Bar Reset
    #
    # Handles resetting progress bar state:
    # - Clears progress value
    # - Hides progress bar from view
    # - Prepares for next operation
    ###############################################################################

    # [APP:UI:PROGRESS_RESET] Handles resetting progress bar state
    def reset_progress_bar(self):
        """
        Resets the progress bar to its initial state.
        """
        # [UI:CLEAR_PROGRESS] Clear progress value
        self.progress_bar.Value = 0  

        # [UI:HIDE_PROGRESS] Hide progress bar from view
        self.progress_bar.Visible = False  

    ###############################################################################
    # [APP:DOC:CONNECTIVITY] Internet Connection Check
    #
    # Handles checking internet connectivity status:
    # - Tests connection to Google DNS server
    # - Updates UI status indicators
    # - Controls feature access based on connectivity
    # - Handles various connection error states
    # - Provides user feedback for connection issues
    ###############################################################################

    # [APP:NETWORK:CONNECTION_CHECK] Handles checking internet connectivity status
    def check_internet_connection(self):
        """
        Checks if the device is connected to the internet and updates the status label.
        """
        try:
            # [NETWORK:TEST_CONNECTION] Test connection to Google DNS server
            socket.create_connection(("8.8.8.8", 53), timeout=5)

            # [UI:UPDATE_STATUS] Update UI status indicators for online state
            self.update_status(str_bar_10(lan), online_app_icon()) 
            return True  
        except socket.error as e:
            # [NETWORK:HANDLE_ERROR] Handle specific socket errors
            if e.errno == 10065:
                MessageBox.Show(str_bar_12(lan))
            else:
                MessageBox.Show(str_bar_13(lan).format(e))  
                # [UI:DISABLE_FEATURES] Disable features if no connection
                self.tab1.Enabled = False  

            # [UI:UPDATE_STATUS] Update UI status indicators for offline state
            self.update_status(str_bar_11(lan), offline_app_icon())  
            return False  
        except Exception as e:
            # [NETWORK:HANDLE_GENERIC_ERROR] Handle generic connection errors
            MessageBox.Show(str_bar_14(lan).format(e))  
            self.tab1.Enabled = False  
            self.update_status(str_bar_11(lan), offline_app_icon())
            return False
            
    ###############################################################################
    # [APP:DOC:CONNECTIVITY] Status Display Update
    #
    # Handles updating the connection status visualization:
    # - Updates connection status text in UI
    # - Loads and displays status icons
    # - Manages display formatting
    # - Provides error handling for image loading
    ###############################################################################

    # [APP:UI:STATUS_UPDATE] Handles updating the connection status visualization
    def update_status(self, status_text, icon_path):
        """
        Updates the status label and icon based on the connection status.
        """
        # [UI:SET_STATUS_TEXT] Update connection status text in UI
        self.status_label.Text = str_bar_15(lan) + status_text  

        try:
            # [UI:LOAD_ICON] Load and display status icon
            icon_image = Image.FromFile(icon_path)  
            self.status_label.Image = icon_image  
        except Exception as e:
            # [UI:HANDLE_ICON_ERROR] Handle errors during icon loading
            from UI.strings_main import str_26
            MessageBox.Show(str(e),str_26(lan))

    ###############################################################################
    # [APP:DOC:LICENSE MANAGEMENT] Initial License Check
    #
    # Handles initial license validation on startup:
    # - Validates license key from storage
    # - Updates UI status indicators
    # - Controls initial feature access
    # - Prompts for license key if invalid
    # - Manages error states and fallback behavior
    ###############################################################################

    # [APP:LICENSE:INITIAL_CHECK] Handles initial license validation on startup
    def check_license_status(self):
        """
        Checks if the license is valid and updates the status label.
        """
        try:
            # [LICENSE:IMPORT] Import necessary modules for license check
            from structure.root import key_path, lan_path
            from sajdmo.pars.api import check_key 
            lan=lan_path()

            # [LICENSE:GET_KEY] Retrieve the license key from storage
            path = key_path()
            key_license =check_key(path)

            # [LICENSE:VALIDATE] Validate the license key
            valid_license = getInit(key_license)  
            if valid_license:
                # [UI:UPDATE_STATUS] Update UI for valid license
                self.update_license_status(str_bar_6(lan), valid_user_app_icon())
                self.tab1.Enabled = True 
            else:
                # [UI:UPDATE_STATUS] Update UI for invalid license
                self.tab1.Enabled = True  
                self.update_license_status(str_bar_7(lan), unvalid_user_app_icon()) 
                self.tab1.Enabled = False 
                
                # [UI:PROMPT_KEY] Prompt the user if they have a license key
                result = MessageBox.Show(str_bar_8(lan), str_bar_9(lan), MessageBoxButtons.YesNo)
                if result == DialogResult.Yes:
                    self.key_form_window()

        except Exception as e:
            # [LICENSE:HANDLE_ERROR] Handle errors during license check
            from UI.strings_main import str_26
            self.update_license_status(str_20(lan), user_app_icon())  

    ###############################################################################
    # [APP:DOC:LICENSE MANAGEMENT] License Validation
    #
    # Handles license validation and response:
    # - Checks license key validity
    # - Updates UI status indicators
    # - Controls feature access based on license state
    # - Shows license management form for invalid keys
    # - Provides user feedback and renewal options
    # - Manages error states and fallback behavior
    ###############################################################################

    # [APP:LICENSE:VALIDATION] Handles license validation and response
    def check_license_changed_status(self):
        """
        Checks if the license is valid and updates the status label.
        """
        from System.Windows.Forms import MessageBox
        try:
            # [LICENSE:IMPORT] Import necessary modules for license check
            from structure.root import key_path
            from sajdmo.pars.api import check_key 
            from structure.root import lan_path
            from UI.strings_main import str_bar_6, str_bar_7

            # [LICENSE:GET_KEY] Retrieve the license key from storage
            lan = lan_path()
            path = key_path()
            key_license =check_key(path)

            # [LICENSE:VALIDATE] Validate the license key
            valid_license = getInit(key_license) 
            if valid_license:
                # [UI:UPDATE_STATUS] Update UI for valid license
                self.update_license_status(str_bar_6(lan), valid_user_app_icon()) 
                self.tab1.Enabled = True 
            else:
                # [UI:UPDATE_STATUS] Update UI for invalid license
                self.tab1.Enabled = True  
                self.update_license_status(str_bar_7(lan), unvalid_user_app_icon()) 
                self.tab1.Enabled = False 

                # [UI:IMPORT_LIBRARIES] Import necessary libraries for license form
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                clr.AddReference('System')  
                import System
                import System.Windows.Forms as WinForms
                from System.Windows.Forms import Form, Button, Label, Cursors, PictureBox, MessageBox
                from System.Drawing import Icon, Point, Color, FontStyle, Size, Font, GraphicsUnit, ContentAlignment
                from RevitServices.Persistence import DocumentManager
                import os
                import sys
                import webbrowser
                import json
                sys.path.append(os.path.dirname(__file__))
                from structure.root import key_path, wurl_path, icosetup, backsetup, lan_path, mod_path, setting_back, logo_path, cuslogo_path, reset_icon, general_urls, lock_ico_icon, lock_gif_icon
                from UI.strings_license_key_page import str_1, str_2, str_3, str_4, str_5, str_6, str_7
                from UI.url import parsweb

                # [UI:INITIALIZE_FORM] Initialize the license validation form
                lan = lan_path()
                wurl= wurl_path()

                class LicenseForm(Form):
                    def __init__(self, doc):
                        """
                        Initializes the license validation form with UI components.
                        """
                        # [UI:FORM_SETUP] Set up form properties
                        self.Text = str_1(lan)
                        self.Width = 360
                        self.Height = 325  
                        self.BackColor = Color.White
                        self.doc = doc
                        self.CenterToScreen()
                        self.TopMost = True
                        self.Icon = Icon(lock_ico_icon())
                        self.load_urls()
                        
                        # [UI:CREATE_GROUPBOXES] Create and organize UI elements
                        self.CreateGroupBoxes()
                        
                        # [UI:FOOTER_LABEL] Add footer label with clickable link
                        self.created_by_label = Label()
                        self.created_by_label.AutoSize = True
                        self.created_by_label.Text = "BIM Pars"
                        self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                        self.created_by_label.ForeColor = Color.Blue
                        self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold)
                        self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                        self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)
                        self.created_by_label.Cursor = Cursors.Hand
                        self.created_by_label.Click += self.Label_Click
                        self.Controls.Add(self.created_by_label)

                    def CreateGroupBoxes(self):
                        """
                        Creates and organizes UI elements for displaying license status and links.
                        """
                        # [UI:GROUPBOX_1] Create Group Box 1 for explanation and links
                        self.group_box1 = WinForms.GroupBox()
                        self.group_box1.Size = Size(300, 170)
                        self.group_box1.Location = Point(20, 80)
                        self.Controls.Add(self.group_box1)

                        # [UI:EXPLANATION_LABEL] Add explanation text
                        self.explanation_label = Label()
                        self.explanation_label.AutoSize = False  
                        self.explanation_label.Size = Size(280, 80)  
                        self.explanation_label.Text = (str_2(lan))
                        self.explanation_label.Location = Point(10, 10)
                        self.explanation_label.TextAlign = ContentAlignment.TopLeft  
                        self.group_box1.Controls.Add(self.explanation_label)

                        # [UI:CREATE_ACCOUNT_LINK] Add "Create Account" link
                        self.create_account_link = Label()
                        self.create_account_link.AutoSize = True
                        self.create_account_link.Text = str_3(lan)
                        self.create_account_link.ForeColor = Color.Blue
                        self.create_account_link.Font = Font(self.create_account_link.Font, FontStyle.Underline)
                        self.create_account_link.Location = Point(10, 110)
                        self.create_account_link.Cursor = Cursors.Hand
                        self.create_account_link.Click += self.OnCreateAccountLinkClick
                        self.group_box1.Controls.Add(self.create_account_link)

                        # [UI:RENEW_KEY_LINK] Add "Renew Key" link
                        self.renew_key_link = Label()
                        self.renew_key_link.AutoSize = True
                        self.renew_key_link.Text = str_4(lan)
                        self.renew_key_link.ForeColor = Color.Blue
                        self.renew_key_link.Font = Font(self.renew_key_link.Font, FontStyle.Underline)
                        self.renew_key_link.Location = Point(10, 140)
                        self.renew_key_link.Cursor = Cursors.Hand
                        self.renew_key_link.Click += self.OnRenewKeyLinkClick
                        self.group_box1.Controls.Add(self.renew_key_link)

                        # [UI:PICTUREBOX] Add PictureBox for visual feedback
                        self.picture_box = PictureBox()
                        self.picture_box.Size = Size(50, 50)  
                        self.picture_box.Location = Point(140, 20)  
                        self.picture_box.Image = System.Drawing.Image.FromFile(lock_gif_icon())  
                        self.picture_box.SizeMode = WinForms.PictureBoxSizeMode.StretchImage  
                        self.Controls.Add(self.picture_box)

                    # [UI:LOAD_URLS] Loads URLs from a JSON file
                    def load_urls(self):
                        """
                        Loads URLs.
                        """
                        json_file_path = os.path.join(general_urls(), "bimpars_urls.json")  
                        try:
                            # [UI:READ_JSON] Read URLs from JSON file
                            with open(json_file_path, 'r') as file:
                                self.urls = json.load(file)
                        except IOError as e:
                            # [UI:HANDLE_ERROR] Show error message if file cannot be read
                            MessageBox.Show(str_6(lan), str_7(lan)) 

                    # [UI:CREATE_ACCOUNT] Opens the account creation page in a web browser
                    def OnCreateAccountLinkClick(self, sender, event):
                        """
                        Opens the account creation page in a web browser.
                        """
                        create_account_url = self.urls["BIM_Pars_Create_acount"] 
                        webbrowser.open(create_account_url)

                    # [UI:RENEW_KEY] Opens the license key renewal page in a web browser
                    def OnRenewKeyLinkClick(self, sender, event):
                        """
                        Opens the license key renewal page in a web browser.
                        """
                        renew_key_url = self.urls["BIM_Pars_renew_key"]  
                        webbrowser.open(renew_key_url)

                    # [UI:OPEN_WEBSITE] Opens the BIM Pars website in a web browser
                    def Label_Click(self, sender, event):
                        """
                        Opens the BIM Pars website in a web browser.
                        """
                        url = parsweb(wurl)
                        webbrowser.open(url)

                    # [UI:CLOSE_FORM] Closes the form when the window is closed
                    def OnClosed(self, e):
                        """
                        Closes the form when the window is closed.
                        """
                        self.Close()
                        
                # [UI:INITIALIZE_FORM] Initialize and show the license form
                doc = DocumentManager.Instance.CurrentDBDocument
                if 'form' not in globals():
                    pass
                else:
                    form = LicenseForm(doc)
                    form.ShowDialog()
                 
        except Exception as e:
            from structure.root import lan_path
            from UI.strings_main import str_26
            lan=lan_path()
            MessageBox.Show(str(e),str_26(lan))
            self.update_license_status(str_26(lan), user_app_icon())  

    ###############################################################################
    # [APP:DOC:LICENSE MANAGEMENT] Status Display Update
    #
    # Handles updating the license status visualization:
    # - Updates status text in UI
    # - Loads and displays status icons
    # - Manages display formatting
    # - Provides error handling for image loading
    ###############################################################################

    # [APP:UI:UPDATE_LICENSE_STATUS] Handles updating the license status visualization
    def update_license_status(self, status_text, icon_path):
        """
        Updates the license status label and icon.
        """
        # [UI:START_PROCESS] Start the progress bar
        self.start_process()
        
        # [UI:SET_STATUS_TEXT] Update the status text in the UI
        self.license_status_label.Text = str_bar_5(lan) + status_text  

        # [UI:LOAD_ICON] Load and set the icon image based on the license status
        try:
            icon_image = Image.FromFile(icon_path)  
            self.license_status_label.Image = icon_image  
        except Exception as e:
            from UI.strings_main import str_26
            MessageBox.Show(str(e),str_26(lan))

    ###############################################################################
    # [APP:DOC:SELECTION MANAGEMENT] Selection Loading
    #
    # Handles loading and selecting elements from XML files:
    # - Locates XML files for current model
    # - Validates and processes XML data
    # - Extracts element IDs for selection
    # - Sets Revit selection state
    # - Manages file cleanup options
    # - Provides user feedback and confirmation dialogs
    ###############################################################################

    # [APP:UI:SELECTION_LOADING] Handles loading and selecting elements from XML files
    def load_and_select_elements(self, sender, event):
        """
        Loads and selects elements in Revit based on an XML file. 
        The function checks for XML files corresponding to the current model, 
        parses the selected XML file to extract element IDs, 
        and sets those elements as selected in Revit. 
        It also handles user confirmation for deleting the XML file after loading.
        """
        # [UI:START_PROCESS] Start the progress bar
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('System.Windows.Forms')
            clr.AddReference('System.Drawing')
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitServices')
            clr.AddReference('System')
            import System.Windows.Forms as WinForms
            from System.Windows.Forms import Form, Button, Label, Cursors, PictureBox
            from System.Drawing import Icon, Point, Color, FontStyle, Size, Font, GraphicsUnit, Image
            from RevitServices.Persistence import DocumentManager
            from Autodesk.Revit.DB import ElementId
            from System.Collections.Generic import List
            from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
            from pyrevit import revit, forms, script, DB
            import os
            import sys
            sys.path.append(os.path.dirname(__file__))
            from structure.root import wurl_path, bank, lan_path
            from UI.strings_storage_selection import str_7, str_8, str_9, str_12, str_14, str_20
            from UI.url import parsweb

            # [UI:INITIALIZE_VARIABLES] Initialize variables
            lan = lan_path()
            wurl= wurl_path()

            # [SCRIPT:XML_PROCESSING] Import XML processing libraries
            import xml.etree.ElementTree as ET
            import getpass

            try:
                # [UI:GET_XML_FILES] Get XML files from the target folder
                target_folder = bank()  
                file_names = os.listdir(target_folder)  
                model_name = revit.doc.Title  
                files_with_model_name = [file_name for file_name in file_names if model_name in file_name]
                
                # [UI:CHECK_XML_FILES] Check for XML files with the model name
                xml_files_with_model_name = [file_name for file_name in files_with_model_name if file_name.endswith('.xml')]
                
                if len(xml_files_with_model_name) == 1:
                    selected_file = xml_files_with_model_name[0]
                    selected_file_path = os.path.join(target_folder, selected_file)
                elif len(xml_files_with_model_name) > 1:
                    # [UI:ALERT_MULTIPLE_FILES] Show alert if multiple files are found
                    forms.alert(str_7(lan))  
                    sys.exit()
                else:
                    # [UI:ALERT_NO_FILES] Show alert if no files are found
                    forms.alert(str_8(lan))  
                    sys.exit()

                # [UI:PARSE_XML] Parse the selected XML file
                tree = ET.parse(selected_file_path)
                root = tree.getroot()

                # [UI:EXTRACT_DATA] Extract data from XML
                element_ids = []
                note = ''
                model_path = ''
                current_user = getpass.getuser()
                
                for elem in root:
                    if elem.tag == "ModelPath":
                        model_path = elem.text
                    elif elem.tag == "User":
                        current_user = elem.text
                    elif elem.tag == "Elements":
                        ids_elem = elem.find("IDs")
                        if ids_elem is not None:
                            element_ids = ids_elem.text.split('+')

                # [UI:PROCESS_ELEMENT_IDS] Process element IDs
                element_id_objects = List[DB.ElementId]()
                for element_id_str in element_ids:
                    element_id = DB.ElementId(int(element_id_str))
                    element_id_objects.Add(element_id)

                # [UI:SET_SELECTION] Set the selection in Revit
                revit.uidoc.Selection.SetElementIds(element_id_objects)

                # [UI:SHOW_ELEMENT] Show the first selected element if available
                if element_id_objects.Count > 0:
                    first_element_id = element_id_objects[0]
                    revit.uidoc.ShowElements(first_element_id)

                # [UI:TASK_DIALOG] Task dialog for user confirmation
                title = str_12(lan)
                dialog = TaskDialog(title)
                dialog.MainInstruction = str_14(lan)
                dialog.TitleAutoPrefix = False
                dialog.AllowCancellation = True
                dialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No
                dialog.DefaultButton = TaskDialogResult.None
                result = dialog.Show()

                if result == TaskDialogResult.Cancel:
                    # [UI:ALERT_CANCEL] Show alert if user cancels
                    forms.alert(str_9(lan))
                    sys.exit()

                # [UI:HANDLE_DELETE] Handle delete option
                if result == TaskDialogResult.Yes:
                    os.remove(selected_file_path)  
                    forms.alert(str_20(lan))

            except StopIteration:
                pass
            except Exception as e:
                pass
            except SystemExit:
                pass
 
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
                
        except Exception as e:
            pass
            self.Show()
        except StopIteration:
            self.Show()
            pass
        except Exception:
            pass   
            self.Show()        
        except SystemExit:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:SELECTION MANAGEMENT] Selection Reduction
    #
    # Handles loading and reducing element selections from XML:
    # - Validates current element selection
    # - Locates and loads corresponding XML file
    # - Processes element IDs for removal
    # - Updates Revit selection set
    # - Manages file deletion options
    # - Provides user feedback and confirmation dialogs
    ###############################################################################

    # [APP:UI:SELECTION_REDUCTION] Handles loading and reducing element selections from XML
    def load_and_reduce_selected_elements(self, sender, event):
        """
        Loads and reduces the currently selected elements in Revit based on 
        an XML file. The function checks if any elements are selected, 
        retrieves the corresponding XML file, and removes specified elements 
        from the selection. It also handles user confirmation for deletion 
        and displays alerts for any errors that may occur during the process.
        """
        # [UI:START_PROCESS] Start the progress bar
        form.start_process()
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('System.Windows.Forms')
            clr.AddReference('System.Drawing')
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitServices')
            clr.AddReference('System')
            import System.Windows.Forms as WinForms
            from System.Windows.Forms import Form, Button, Label, Cursors, PictureBox
            from System.Drawing import Icon, Point, Color, FontStyle, Size, Font, GraphicsUnit, Image
            from RevitServices.Persistence import DocumentManager
            from Autodesk.Revit.DB import ElementId
            from System.Collections.Generic import List
            from Autodesk.Revit.UI import (TaskDialog, TaskDialogCommonButtons, TaskDialogResult)
            from pyrevit import revit, forms, script, DB
            import os
            import sys
            sys.path.append(os.path.dirname(__file__))
            from structure.root import wurl_path, bank, lan_path
            from UI.strings_storage_selection import str_7, str_8, str_9, str_12, str_13, str_14, str_20, str_22
            from UI.url import parsweb
            from UI.skin import skin_mode

            # [UI:INITIALIZE_VARIABLES] Initialize variables
            lan = lan_path()
            wurl= wurl_path()

            # [SCRIPT:XML_PROCESSING] Import XML processing libraries
            import xml.etree.ElementTree as ET
            import getpass

            try:
                # [UI:CHECK_SELECTION] Check if any elements are selected
                selected_elements = __revit__.ActiveUIDocument.Selection.GetElementIds()
                if len(selected_elements) == 0:
                    forms.alert(str_22(lan))
                    sys.exit()

                # [UI:GET_XML_FILES] Get XML files from the target folder
                target_folder = bank()
                file_names = os.listdir(target_folder)
                model_name = revit.doc.Title
                xml_files_with_model_name = [file_name for file_name in file_names if model_name in file_name and file_name.endswith('.xml')]
                
                if len(xml_files_with_model_name) == 1:
                    selected_file = xml_files_with_model_name[0]
                    selected_file_path = os.path.join(target_folder, selected_file)
                elif len(xml_files_with_model_name) > 1:
                    # [UI:ALERT_MULTIPLE_FILES] Show alert if multiple files are found
                    forms.alert(str_7(lan))
                    sys.exit()
                else:
                    # [UI:ALERT_NO_FILES] Show alert if no files are found
                    forms.alert(str_8(lan))
                    sys.exit()

                output = script.get_output()
                source_file = selected_file_path

                if source_file is None:
                    forms.alert(str_9(lan))
                    sys.exit()

                # [UI:PARSE_XML] Parse the selected XML file
                tree = ET.parse(source_file)
                root = tree.getroot()

                # [UI:EXTRACT_DATA] Extract data from XML
                element_ids = []
                model_path = ''
                current_user = getpass.getuser()

                for elem in root:
                    if elem.tag == "ModelPath":
                        model_path = elem.text
                    elif elem.tag == "User":
                        current_user = elem.text
                    elif elem.tag == "Elements":
                        ids_elem = elem.find("IDs")
                        if ids_elem is not None:
                            element_ids = ids_elem.text.split('+')

                # [UI:CONVERT_IDS] Convert element IDs to DB.ElementId
                converted_ids = [DB.ElementId(int(element_id_str)) for element_id_str in element_ids]

                # [UI:REMOVE_ELEMENTS] Remove selected elements from the active selection
                selected_elements = revit.get_selection()
                element_ids_to_remove_objects = converted_ids
                filtered_selection = [element for element in selected_elements if element.Id not in element_ids_to_remove_objects]
                updated_selection_ids = [element.Id for element in filtered_selection]
                revit.uidoc.Selection.SetElementIds(List[DB.ElementId](updated_selection_ids))

                # [UI:CHECK_REMAINING_ELEMENTS] Check if there are any elements left after removal
                if len(updated_selection_ids) == 0:
                    # [UI:TASK_DIALOG] Task dialog for user confirmation
                    title = str_12(lan)
                    dialog = TaskDialog(title)
                    dialog.MainInstruction = str_14(lan)
                    dialog.TitleAutoPrefix = False
                    dialog.AllowCancellation = True
                    dialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No
                    dialog.DefaultButton = TaskDialogResult.None
                    result = dialog.Show()

                    if result == TaskDialogResult.Cancel:
                        # [UI:ALERT_CANCEL] Show alert if user cancels
                        forms.alert(str_9(lan))
                        sys.exit()

                    # [UI:HANDLE_DELETE] Handle delete option
                    if result == TaskDialogResult.Yes:
                        os.remove(selected_file_path)  
                        forms.alert(str_20(lan))
                else:
                    # [UI:SHOW_ELEMENTS] Show remaining selected elements
                    revit.uidoc.ShowElements(List[DB.ElementId](updated_selection_ids))

                    # [UI:TASK_DIALOG] Task dialog for printing IDs
                    title = str_12(lan)
                    dialog = TaskDialog(title)
                    dialog.MainInstruction = str_13(lan)
                    dialog.MainContent = str_14(lan)
                    dialog.TitleAutoPrefix = False
                    dialog.AllowCancellation = True
                    dialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No
                    dialog.DefaultButton = TaskDialogResult.None
                    result = dialog.Show()

                    if result == TaskDialogResult.Cancel:
                        # [UI:ALERT_CANCEL] Show alert if user cancels
                        forms.alert(str_9(lan))
                        sys.exit()

                    # [UI:HANDLE_DELETE] Handle delete option again if needed
                    if result == TaskDialogResult.Yes:
                        os.remove(selected_file_path)  
                        forms.alert(str_20(lan))

            except StopIteration:
                pass
            except Exception as e:
                pass
            except SystemExit:
                pass 
                
            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
                
        except Exception as e:
            pass
            self.Show()
        except StopIteration:
            self.Show()
            pass
        except Exception:
            pass   
            self.Show()        
        except SystemExit:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:DATA IMPORT] XML Selection Import
    #
    # Handles importing and processing XML selection files:
    # - Prompts user for XML file selection
    # - Parses XML structure and extracts metadata
    # - Processes element IDs and creates selection set
    # - Creates clickable element links in output
    # - Displays imported data in report format
    # - Provides error handling and user feedback
    ###############################################################################

    # [APP:UI:XML_IMPORT] Handles importing and processing XML selection files
    def import_seletion_from_xml(self, sender, event):
        """
        Imports data from an XML file selected by the user. 
        The function prompts the user to pick an XML file, 
        parses the file to extract element IDs and metadata, 
        and sets the selected elements in Revit. 
        It also handles any errors that may occur during the process.
        """
        # [UI:START_PROCESS] Start the progress bar
        form.start_process()
        button_text = "XML Import selection"
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            from pyrevit import script
            import clr
            clr.AddReference('RevitAPIUI')
            import Autodesk.Revit.DB as DB
            from System.Collections.Generic import List
            from Autodesk.Revit.UI import TaskDialog
            import os
            import getpass
            from datetime import datetime
            import xml.etree.ElementTree as ET  
            from pyrevit import forms, revit
            from structure.root import lan_path 
            from UI.strings_import_selection import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_11, str_12
            
            lan = lan_path()
            output = script.get_output()

            try:
                # [UI:FILE_SELECTION] Prompt user for XML file selection
                source_file = forms.pick_file(file_ext='xml')
                if source_file is None:
                    # [UI:ALERT_NO_FILE] Display alert if no file is selected
                    forms.alert(str_1(lan))  
                    sys.exit()

                # [UI:PARSE_XML] Parse the XML file
                tree = ET.parse(source_file)
                root = tree.getroot()

                # [UI:EXTRACT_DATA] Extract data from XML
                header = root.find("Header")
                element_ids = [int(e.text) for e in root.findall("./Elements/Element/ID")]
                note = header.find("Comment").text if header.find("Comment") is not None else ""
                model_path = header.find("ModelPath").text if header.find("ModelPath") is not None else ""
                model_name = header.find("ModelName").text if header.find("ModelName") is not None else ""
                current_user = header.find("User").text if header.find("User") is not None else "Unknown User"

                # [UI:PROCESS_IDS] Process and link element IDs in output
                element_id_objects = List[DB.ElementId]()
                for element_id in element_ids:
                    element_id_obj = DB.ElementId(element_id)
                    element_id_objects.Add(element_id_obj)
                    output.linkify(element_id_obj)  

                # [UI:SET_SELECTION] Set the selection and show elements in Revit
                revit.uidoc.Selection.SetElementIds(element_id_objects)
                if element_id_objects.Count > 0:
                    revit.uidoc.ShowElements(element_id_objects[0])

                # [UI:DISPLAY_LINKS] Display links for each element
                for element_id in element_ids:
                    element_id_obj = DB.ElementId(element_id)
                    output.linkify(element_id_obj)

                # [UI:SHOW_ELEMENTS] Ensure first element is shown in Revit if elements are selected
                if element_id_objects.Count > 0:
                    revit.uidoc.ShowElements(element_id_objects[0])

            except Exception as e:
                # [UI:HANDLE_ERROR] Show task dialog with error message
                message = str_2(lan).format(model_name)
                TaskDialog.Show(str_3(lan), message)
                sys.exit()

            except StopIteration:
                pass
            except Exception:
                pass            
            except SystemExit:
                pass

            try:  
                # [UI:CREATE_REPORT] Create a report tab with imported data
                headers = [str_11(lan), str_12(lan)]
                data = [
                    [str_4(lan), str_5(lan), str_6(lan), str_7(lan)],
                    [str(model_path), str(model_name), str(current_user),str(note) ]
                ]
                editable = [False, False]
                self.create_report_tab(headers, data, editable, title=button_text)  
            except:
                pass
                
            # [UI:SHOW_FORM] Show the Windows Form againn
            self.Show()
                
        except Exception as e:
            pass
            self.Show()
        except StopIteration:
            self.Show()
            pass
        except Exception:
            pass   
            self.Show()        
        except SystemExit:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:DATA IMPORT] HTML File Viewer
    #
    # Handles importing and displaying HTML files:
    # - Prompts user for HTML file selection
    # - Validates file selection
    # - Opens file in pyRevit output window
    # - Sets custom title and icon for display
    # - Provides error handling and user feedback
    ###############################################################################

    # [APP:UI:HTML_IMPORT] Handles importing and displaying HTML files
    def import_seletion_from_html(self, sender, event):
        """
        Imports data from an HTML file selected by the user. 
        The function prompts the user to pick an HTML file, 
        and if a valid file is selected, it opens the file in the output window. 
        It also handles any errors that may occur during the process.
        """
        # [UI:START_PROCESS] Start the progress bar
        form.start_process()
        button_text = "HTML Import selection"
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            try:
                # [SCRIPT:IMPORTS] Import necessary libraries
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitServices')
                clr.AddReference('RevitAPIUI')
                from System.Windows.Forms import  Form, RadioButton, Button, PictureBox, Label, Cursors
                from System.Drawing import Point, Size, Bitmap, Color, Icon, Font, FontStyle, GraphicsUnit
                from RevitServices.Persistence import DocumentManager
                import Autodesk.Revit.DB as DB
                from System.Collections.Generic import List
                from Autodesk.Revit.UI import TaskDialog
                from pyrevit import forms, revit  
                import webbrowser             
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from structure.root import wurl_path, lan_path, import_icon
                from UI.strings_import_selection import str_1, str_10
                from UI.url import parsweb
                from pyrevit import script

                # [UI:INITIALIZE_VARIABLES] Initialize variables
                lan = lan_path()
                output = script.get_output()

                # [UI:FILE_SELECTION] Prompt user for HTML file selection
                source_file = forms.pick_file(file_ext='html')
                if source_file is None:
                    # [UI:ALERT_NO_FILE] Display alert if no file is selected
                    forms.alert(str_1(lan))
                    sys.exit()

                # [UI:OPEN_HTML] Open the selected HTML file in the output window
                if source_file:
                    output.set_title(str_10(lan))
                    output.set_icon(import_icon())
                    output.open_page(source_file)
                    
            except StopIteration:
                pass
            except Exception:
                pass            
            except SystemExit:
                pass
                
            # [UI:CLOSE_FORM] Close the Windows Form
            self.Close()
                
        except Exception as e:
            pass
            self.Close()
        except StopIteration:
            self.Show()
            pass
        except Exception:
            pass   
            self.Show()        
        except SystemExit:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:DATA EXPORT] XML Element Export
    #
    # Handles exporting selected Revit elements to XML format:
    # - Validates element selection
    # - Prompts for file name, location, and comments
    # - Extracts element IDs and metadata
    # - Creates structured XML with header information
    # - Formats output with proper indentation
    # - Provides progress feedback and error handling
    ###############################################################################

    # [APP:UI:XML_EXPORT] Handles exporting selected Revit elements to XML format
    def export_seletion_to_xml(self, sender, event):
        """
        Exports the currently selected elements in Revit to an XML file. 
        The function checks if any elements are selected, prompts the user 
        for a file name and location, and writes the element IDs along with 
        additional metadata to the XML file. It also handles any errors 
        that may occur during the process.
        """
        # [UI:START_PROCESS] Start the progress bar
        form.start_process()
        button_text = "XML Export selection"
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()

            # [SCRIPT:IMPORTS] Import necessary libraries
            import clr
            clr.AddReference('System.Windows.Forms')
            clr.AddReference('System.Drawing')
            clr.AddReference('System')
            clr.AddReference('RevitAPI')
            clr.AddReference('RevitAPIUI')
            clr.AddReference('RevitServices')
            from System.Windows.Forms import  Form, RadioButton, Button, PictureBox, Label, Cursors
            from System.Drawing import Point, Size, Bitmap, Color, Icon, Font, FontStyle, GraphicsUnit
            from RevitServices.Persistence import DocumentManager
            import Autodesk.Revit.DB as DB
            from Autodesk.Revit.DB import ElementId
            from System.Collections.Generic import List
            from pyrevit import revit, forms, script
            import webbrowser
            import csv
            import getpass
            from datetime import datetime  
            import os
            import sys
            sys.path.append(os.path.dirname(__file__))
            from sajdmo.forms.single import single_input
            from sajdmo.forms.text import text_2input
            from structure.root import wurl_path, export_icon, cooexport_back, borexport_back, export_back, lan_path, cancel_icon, ok_icon
            from UI.strings_export_selection import str_2, str_3, str_6, str_7, str_13

            #from UI.skin import skin_mode
            from UI.url import parsweb

            # [UI:INITIALIZE_VARIABLES] Initialize variables
            lan = lan_path()
            wurl= wurl_path()

            # [SCRIPT:XML_PROCESSING] Import XML processing libraries
            import xml.etree.ElementTree as ET
            import os
            import getpass
            from datetime import datetime
            
            # [UI:INDENT_XML] Recursive function to pretty-print the XML by adding indentation
            def indent_xml(elem, level=0):
                indent = "    "  
                i = "\n" + level * indent
                if len(elem):
                    if not elem.text or not elem.text.strip():
                        elem.text = i + indent
                    if not elem.tail or not elem.tail.strip():
                        elem.tail = i
                    for child in elem:
                        indent_xml(child, level + 1)
                    if not child.tail or not child.tail.strip():
                        child.tail = i
                else:
                    if level and (not elem.tail or not elem.tail.strip()):
                        elem.tail = i

            try:
                # [UI:CHECK_SELECTION] Check if there is any element selected
                doc = __revit__.ActiveUIDocument.Document
                selected_elements = __revit__.ActiveUIDocument.Selection.GetElementIds()
                if len(selected_elements) == 0:
                    # [UI:ALERT_NO_SELECTION] Show alert if no elements are selected
                    forms.alert(str_1(lan))
                    sys.exit()

                # [UI:PROCESS_IDS] Create a list to store the element IDs
                element_ids = List[ElementId]()
                for element_id in selected_elements:
                    element_ids.Add(element_id)
                integer_ids = [element_id.IntegerValue for element_id in element_ids]

                # [UI:SHOW_ELEMENTS] Focus on selected elements
                revit.uidoc.ShowElements(element_ids)

                # [UI:SAVE_FORM] Prompt user for file name and comment
                icon_path = export_icon()
                search_image_path = export_back()
                ok_icon_path = ok_icon()
                cancel_icon_path = cancel_icon()
                parameter_label = str_2(lan)
                parameter_label2 = str_6(lan)
                window_name = str_3(lan)
                url = parsweb(wurl)

                with forms.ProgressBar(title='', indeterminate=True):
                    comment, file_name = text_2input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, parameter_label2, window_name, url)

                if file_name is None:
                    sys.exit()

                # [UI:PICK_FOLDER] Prompt user for target folder
                target_folder = forms.pick_folder()
                if target_folder is None:
                    # [UI:ALERT_NO_FOLDER] Show alert if no folder is selected
                    forms.alert(str_7(lan))
                    sys.exit()

                # [UI:CREATE_XML] Create XML file
                file_path = os.path.join(target_folder, "{}.xml".format(file_name))

                # [UI:XML_STRUCTURE] Create XML structure
                root = ET.Element("RevitSelection")

                # [UI:HEADER_SECTION] Add header section to XML
                header = ET.SubElement(root, "Header")
                ET.SubElement(header, "Date").text = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                ET.SubElement(header, "User").text = getpass.getuser() or "Unknown User"
                ET.SubElement(header, "ModelPath").text = revit.doc.PathName
                ET.SubElement(header, "ModelName").text = revit.doc.Title
                ET.SubElement(header, "Comment").text = comment

                # [UI:ELEMENTS_SECTION] Add elements section to XML
                elements = ET.SubElement(root, "Elements")
                for element_id in integer_ids:
                    element = ET.SubElement(elements, "Element")
                    ET.SubElement(element, "ID").text = str(element_id)

                # [UI:INDENT_XML] Apply indentation to XML
                indent_xml(root)

                # [UI:WRITE_XML] Write indented XML to file
                tree = ET.ElementTree(root)
                tree.write(file_path, encoding='utf-8', xml_declaration=True)
                MessageBox.Show(str_13(lan))

            except StopIteration:
                pass
            except Exception as e:
                pass
            except SystemExit:
                pass

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
                
        except Exception as e:
            pass
            self.Show()
        except StopIteration:
            self.Show()
            pass
        except Exception:
            pass   
            self.Show()        
        except SystemExit:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:DATA EXPORT] CSV Element Export
    #
    # Handles exporting selected Revit elements to CSV format:
    # - Validates element selection
    # - Prompts for file name and location
    # - Extracts element IDs
    # - Writes data to CSV format
    # - Provides progress feedback and error handling
    ###############################################################################

    # [APP:UI:CSV_EXPORT] Handles exporting selected Revit elements to CSV format
    def export_seletion_to_csv(self, sender, event):
        """
        Exports the currently selected elements in Revit to a CSV file. 
        The function checks if any elements are selected, prompts the user 
        for a file name and location, and writes the element IDs to the CSV file. 
        It also handles any errors that may occur during the process.
        """
        # [UI:START_PROCESS] Start the progress bar
        form.start_process()
        button_text = "CSV Export selection"
        try:
            # [UI:HIDE_FORM] Hide the Windows Form
            self.Hide()
            try:
                # [SCRIPT:IMPORTS] Import necessary libraries
                import clr
                clr.AddReference('System.Windows.Forms')
                clr.AddReference('System.Drawing')
                clr.AddReference('System')
                clr.AddReference('RevitAPI')
                clr.AddReference('RevitAPIUI')
                clr.AddReference('RevitServices')
                from System.Windows.Forms import  Form, RadioButton, Button, PictureBox, Label, Cursors
                from System.Drawing import Point, Size, Bitmap, Color, Icon, Font, FontStyle, GraphicsUnit
                from RevitServices.Persistence import DocumentManager
                import Autodesk.Revit.DB as DB
                from Autodesk.Revit.DB import ElementId
                from System.Collections.Generic import List
                from pyrevit import revit, forms, script
                import webbrowser
                import csv
                import getpass
                from datetime import datetime  
                import os
                import sys
                sys.path.append(os.path.dirname(__file__))
                from sajdmo.forms.single import single_input
                from sajdmo.forms.text import text_2input
                from structure.root import wurl_path, export_icon, export_back, lan_path, cancel_icon, ok_icon
                from UI.strings_export_selection import str_1, str_6, str_7, str_13, str_14
                
                #from UI.skin import skin_mode
                from UI.url import parsweb

                # [UI:INITIALIZE_VARIABLES] Initialize variables
                lan = lan_path()
                wurl= wurl_path()

                # [UI:CHECK_SELECTION] Check if any element is selected
                doc = __revit__.ActiveUIDocument.Document
                selected_elements = __revit__.ActiveUIDocument.Selection.GetElementIds()
                if len(selected_elements) == 0:
                    # [UI:ALERT_NO_SELECTION] Show alert if no elements are selected
                    forms.alert(str_1(lan))
                    sys.exit()

                # [UI:GET_IDS] Get IDs of selected elements
                element_ids = List[ElementId]()
                for element_id in selected_elements:
                    element_ids.Add(element_id)
                integer_ids = [element_id.IntegerValue for element_id in element_ids]

                for element_id in selected_elements:
                    element = doc.GetElement(element_id)
                    clickable_link = script.get_output().linkify(element.Id)
                revit.uidoc.ShowElements(element_ids)

                # [UI:CSV_FORM] Prompt user for file name
                icon_path = export_icon()
                search_image_path = export_back()
                ok_icon_path = ok_icon()
                cancel_icon_path = cancel_icon()
                parameter_label = str_6(lan)
                window_name = str_14(lan)
                url = parsweb(wurl)
                with forms.ProgressBar(title='', indeterminate=True):
                    file_name  = single_input(icon_path, search_image_path, ok_icon_path, cancel_icon_path, parameter_label, window_name, url)
                if file_name is None:
                    # [UI:ALERT_NO_FILE] Show alert if no file name is provided
                    forms.alert(str_7(lan))
                    sys.exit()

                # [UI:PICK_FOLDER] Prompt user for target folder
                target_folder = forms.pick_folder()
                if target_folder is None:
                    # [UI:ALERT_NO_FOLDER] Show alert if no folder is selected
                    forms.alert(str_7(lan))
                    sys.exit()

                # [UI:EXPORT_CSV] Export data to CSV file
                if target_folder:
                    file_path = os.path.join(target_folder, file_name + '.csv')
                    output = script.get_output()
                    model_path = revit.doc.PathName
                    model_name = revit.doc.Title
                    current_user = getpass.getuser()
                with open(file_path, 'wb') as csvfile:
                    csv_writer = csv.writer(csvfile)
                    csv_writer.writerow(['ID'])  
                    for element_id in integer_ids:
                        csv_writer.writerow([element_id])
                    MessageBox.Show(str_13(lan))

            except StopIteration:
                pass
            except Exception:
                pass            
            except SystemExit:
                pass

            # [UI:SHOW_FORM] Show the Windows Form again
            self.Show()
                
        except Exception as e:
            pass
            self.Show()
        except StopIteration:
            self.Show()
            pass
        except Exception:
            pass   
            self.Show()        
        except SystemExit:
            pass
            self.Show()

    ###############################################################################
    # [APP:DOC:UI INTERACTION] Selection Change Monitoring
    #
    # Timer-based selection monitoring system that:
    # - Periodically checks for changes in Revit element selection
    # - Updates selection count tracking
    # - Triggers button state updates when selection changes
    ###############################################################################

    # [APP:UI:SELECTION_MONITORING] Timer-based selection monitoring system
    def check_initial_selection(self):
        """
        Checks the current selection in Revit during initialization 
        to ensure buttons are enabled or disabled correctly based on 
        the selected elements.
        """
        # [UI:GET_SELECTION] Get the current selection in Revit
        uidoc = __revit__.ActiveUIDocument
        doc = uidoc.Document
        selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]

        # [UI:UPDATE_COUNT] Update selection count tracking
        self.last_selection_count = len(selection)

        # [UI:UPDATE_BUTTONS] Trigger button state updates
        self.update_button_states(len(selection))

    ###############################################################################
    # [APP:DOC:UI INTERACTION] Selection Change Monitoring
    #
    # Timer-based selection monitoring system that:
    # - Periodically checks for changes in Revit element selection
    # - Updates selection count tracking
    # - Triggers button state updates when selection changes
    ###############################################################################

    # [APP:UI:TIMER_SETUP] Initializes and starts a timer for selection monitoring
    def setup_timer(self):
        """
        Initializes and starts a timer that checks the selection in Revit 
        every 500 milliseconds. The timer triggers an event to update 
        button states based on the current selection.
        """
        # [UI:CREATE_TIMER] Create a timer with a 500ms interval
        self.timer2 = Timer()
        self.timer2.Interval = 500  #  500 milliseconds (0.5 seconds)

        # [UI:BIND_EVENT] Bind the timer tick event to the handler
        self.timer2.Tick += self.on_timer_tick  

        # [UI:START_TIMER] Start the timer
        self.timer2.Start()  

    ###############################################################################
    # [APP:DOC:UI INTERACTION] Selection Change Monitoring
    #
    # Timer-based selection monitoring system that:
    # - Periodically checks for changes in Revit element selection
    # - Updates selection count tracking
    # - Triggers button state updates when selection changes
    ###############################################################################

    # [APP:UI:TIMER_TICK] Handles timer tick events for selection monitoring
    def on_timer_tick(self, sender, event):
        """
        Checks if the selection in Revit has changed and updates the button states 
        accordingly. If the selection count differs from the last recorded count, 
        it updates the last selection count and refreshes the button states.
        """
        # [UI:GET_SELECTION] Get the current selection in Revit
        uidoc = __revit__.ActiveUIDocument
        doc = uidoc.Document
        selection = [doc.GetElement(elId) for elId in uidoc.Selection.GetElementIds()]

        # [UI:CHECK_CHANGE] Check if the selection count has changed
        if len(selection) != self.last_selection_count:
            # [UI:UPDATE_COUNT] Update the last selection count
            self.last_selection_count = len(selection)

            # [UI:UPDATE_BUTTONS] Refresh button states based on the new selection count
            self.update_button_states(len(selection))

    ###############################################################################
    # [APP:DOC:UI INTERACTION] Button State Management
    #
    # Controls the enabled/disabled states of UI elements based on selection:
    # - Updates selection count display
    # - Manages toolstrip button states
    # - Controls icon panel button availability
    # - Handles conditional button activation based on selection count
    ###############################################################################

    # [APP:UI:BUTTON_STATE_MANAGEMENT] Controls the enabled/disabled states of UI elements
    def update_button_states(self, selection_count):
        """
        Updates the enabled state of buttons based on the current selection count.
        Enables or disables tool strip buttons and icon panel buttons 
        depending on the number of selected elements.
        """
        # [UI:UPDATE_COUNT] Update the selection count display
        self.selection_count_label.Text = str(self.last_selection_count)

        # [UI:INITIALIZE_LANGUAGE] Initialize language settings
        from structure.root import lan_path
        lan = lan_path()

        # [UI:TOOL_STRIP2] Update tool strip button states
        for item in self.tool_strip2.Items:
            if isinstance(item, ToolStripButton):
                if item.ToolTipText == tip_15(lan):
                    # [UI:ENABLE_IF_NO_SELECTION] Enable if no elements are selected
                    item.Enabled = (selection_count == 0)
                elif item.ToolTipText in [tip_16(lan), tip_17(lan), 
                                        tip_18(lan), tip_19(lan), 
                                        tip_20(lan), tip_21(lan), 
                                        tip_22(lan)]:
                    # [UI:ENABLE_IF_SELECTED] Enable if elements are selected
                    item.Enabled = (selection_count > 0)
        
        # [UI:TOOL_STRIP] Update tool strip button states
        for item in self.tool_strip.Items:
            if isinstance(item, ToolStripButton):
                if item.ToolTipText in [tip_7(lan), tip_9(lan)]:
                    # [UI:ENABLE_IF_SELECTED] Enable if elements are selected
                    item.Enabled = (selection_count > 0)
            elif isinstance(item, ToolStripDropDownButton):
                if item.ToolTipText == tip_12(lan):
                    # [UI:ENABLE_IF_SELECTED] Enable if elements are selected
                    item.Enabled = (selection_count > 0)

        # [UI:ICON_PANEL] Update icon panel button states
        for control in self.icon_panel.Controls:
            if isinstance(control, Button):
                if control.Text in [tool_str_29(lan), tool_str_27(lan), 
                                tool_str_28(lan)]:
                    # [UI:ENABLE_IF_SINGLE_SELECTION] Enable if exactly one element is selected
                    control.Enabled = (selection_count == 1)
                elif control.Text in [tool_str_1(lan), tool_str_2(lan), tool_str_45(lan), 
                tool_str_44(lan), tool_str_43(lan), tool_str_42(lan), tool_str_37(lan), 
                tool_str_38(lan), tool_str_39(lan), tool_str_41(lan), tool_str_36(lan), 
                tool_str_34(lan), tool_str_16(lan), tool_str_17(lan), tool_str_18(lan), 
                tool_str_19(lan)]:
                    # [UI:ENABLE_IF_ONE_OR_MORE] Enable if one or more elements are selected
                    control.Enabled = (selection_count >= 1)

    ###############################################################################
    # [APP:DOC:LICENSE MANAGEMENT] License Key Form
    #
    # Handles the display and management of the license key input form, including:
    # - User interface for license key entry
    # - Account creation and key renewal options
    # - License key validation and storage
    # - Form layout and controls
    ###############################################################################

    # [APP:UI:LICENSE_FORM] Handles the display and management of the license key input form
    def key_form_window(self):
        """
        Displays a form for users to enter and submit their license key. 
        The form includes options for creating an account and renewing a key, 
        along with a text box for inputting the license key.
        """
        # [UI:INITIALIZE] Reset license check status
        self.license_checked = False

        # [SCRIPT:IMPORTS] Import necessary libraries
        import clr
        clr.AddReference('System.Windows.Forms')
        clr.AddReference('System.Drawing')
        clr.AddReference('RevitAPI')
        clr.AddReference('RevitServices')
        clr.AddReference('System')  
        import System
        import System.Windows.Forms as WinForms
        from System.Windows.Forms import Form, Button, Label, Cursors, PictureBox, MessageBox
        from System.Drawing import Icon, Point, Color, FontStyle, Size, Font, GraphicsUnit, ContentAlignment
        from RevitServices.Persistence import DocumentManager
        import os
        import sys
        import webbrowser
        import json
        sys.path.append(os.path.dirname(__file__))
        from structure.root import key_path, wurl_path, general_urls, add_key_icon, lock_ico_icon
        from UI.strings_license_key_page import str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8
        from UI.url import parsweb

        # [UI:INITIALIZE_VARIABLES] Initialize language and URL settings
        lan = lan_path()
        wurl= wurl_path()

        class LicenseForm(Form):
            def __init__(self, doc):
                """
                Initializes the license key form with UI components.
                """
                # [UI:FORM_SETUP] Set up form properties
                self.Text = str_1(lan)
                self.Width = 360
                self.Height = 400  
                self.BackColor = Color.White
                self.doc = doc
                self.CenterToScreen()
                self.Icon = Icon(lock_ico_icon())
                self.load_urls()
                self.CreateGroupBoxes()
                
                # [UI:CREATED_BY_LABEL] Add "BIM Pars" label
                self.created_by_label = Label()
                self.created_by_label.AutoSize = True
                self.created_by_label.Text = "BIM Pars"
                self.created_by_label.Location = Point(self.Width - 80, self.Height - 65)
                self.created_by_label.ForeColor = Color.Blue
                self.created_by_label.Font = Font(self.created_by_label.Font, FontStyle.Bold)
                self.created_by_label.Anchor = (WinForms.AnchorStyles.Bottom | WinForms.AnchorStyles.Right)
                self.created_by_label.Font = Font(self.created_by_label.Font.FontFamily, self.created_by_label.Font.Size, FontStyle.Underline, GraphicsUnit.Point)
                self.created_by_label.Cursor = Cursors.Hand
                self.created_by_label.Click += self.Label_Click
                self.Controls.Add(self.created_by_label)

            # [UI:CREATE_GROUP_BOXES] Creates and organizes UI elements for key input and links
            def CreateGroupBoxes(self):
                """
                Creates and organizes UI elements for key input and links.
                """
                # [UI:GROUP_BOX1] Create the first group box for instructions and links
                self.group_box1 = WinForms.GroupBox()
                self.group_box1.Size = Size(300, 190)
                self.group_box1.Location = Point(20, 20)
                self.Controls.Add(self.group_box1)

                # [UI:EXPLANATION_LABEL] Add explanation label for license key
                self.explanation_label = Label()
                self.explanation_label.AutoSize = False  
                self.explanation_label.Size = Size(280, 80)  
                self.explanation_label.Text = (
                    str_2(lan)
                )
                self.explanation_label.Location = Point(10, 20)
                self.explanation_label.TextAlign = ContentAlignment.TopLeft  
                self.group_box1.Controls.Add(self.explanation_label)

                # [UI:CREATE_ACCOUNT_LINK] Add link for account creation
                self.create_account_link = Label()
                self.create_account_link.AutoSize = True
                self.create_account_link.Text = str_3(lan)
                self.create_account_link.ForeColor = Color.Blue
                self.create_account_link.Font = Font(self.create_account_link.Font, FontStyle.Underline)
                self.create_account_link.Location = Point(10, 110)
                self.create_account_link.Cursor = Cursors.Hand
                self.create_account_link.Click += self.OnCreateAccountLinkClick
                self.group_box1.Controls.Add(self.create_account_link)

                # [UI:RENEW_KEY_LINK] Add link for key renewal
                self.renew_key_link = Label()
                self.renew_key_link.AutoSize = True
                self.renew_key_link.Text = str_4(lan)
                self.renew_key_link.ForeColor = Color.Blue
                self.renew_key_link.Font = Font(self.renew_key_link.Font, FontStyle.Underline)
                self.renew_key_link.Location = Point(10, 140)
                self.renew_key_link.Cursor = Cursors.Hand
                self.renew_key_link.Click += self.OnRenewKeyLinkClick
                self.group_box1.Controls.Add(self.renew_key_link)

                # [UI:GROUP_BOX2] Create the second group box for key input
                self.group_box2 = WinForms.GroupBox()
                self.group_box2.Size = Size(300, 90)
                self.group_box2.Location = Point(20, 220)
                self.Controls.Add(self.group_box2)

                # [UI:PICTURE_BOX] Add icon for key input
                self.picture_box = PictureBox()
                self.picture_box.Size = Size(40, 40)  
                self.picture_box.Location = Point(10, 10)  
                self.picture_box.Image = System.Drawing.Image.FromFile(add_key_icon())  
                self.picture_box.SizeMode = WinForms.PictureBoxSizeMode.StretchImage  
                self.group_box2.Controls.Add(self.picture_box)

                # [UI:TEXT_BOX] Add text box for license key input
                self.text_box = WinForms.TextBox()
                self.text_box.Size = Size(220, 25)
                self.text_box.Location = Point(65, 20)
                self.group_box2.Controls.Add(self.text_box)

                # [UI:SUBMIT_BUTTON] Add submit button for key validation
                self.submit_button = Button()
                self.submit_button.Text = str_8(lan)
                self.submit_button.Size = Size(75, 25)
                self.submit_button.Location = Point(210, 50)
                self.submit_button.Click += self.OnSubmitButtonClick
                self.group_box2.Controls.Add(self.submit_button)

            # [UI:LOAD_URLS] Loads URLs from a JSON file
            def load_urls(self):
                """
                Loads URLs.
                """
                json_file_path = os.path.join(general_urls(), "bimpars_urls.json")  
                try:
                    with open(json_file_path, 'r') as file:
                        self.urls = json.load(file)
                except IOError as e:
                    MessageBox.Show(str_6(lan), str_7(lan))  

            # [UI:CREATE_ACCOUNT_LINK_CLICK] Opens the account creation page
            def OnCreateAccountLinkClick(self, sender, event):
                """
                Opens the account creation page in a web browser.
                """
                create_account_url = self.urls["BIM_Pars_Create_acount"]  
                webbrowser.open(create_account_url)

            # [UI:RENEW_KEY_LINK_CLICK] Opens the license key renewal page
            def OnRenewKeyLinkClick(self, sender, event):
                """
                Opens the license key renewal page in a web browser.
                """
                renew_key_url = self.urls["BIM_Pars_renew_key"]  
                webbrowser.open(renew_key_url)

            # [UI:SUBMIT_BUTTON_CLICK] Saves the entered license key
            def OnSubmitButtonClick(self, sender, event):
                """
                Saves the entered license key.
                """
                path = key_path()  
                license_key = self.text_box.Text  
                try:
                    with open(path, 'r') as json_file:
                        data = json.load(json_file)
                        data["license_key"] = license_key
                        with open(path, 'w') as json_file:
                            json.dump(data, json_file, indent=4)  
                            MessageBox.Show(str_5(lan), str_1(lan))  
                            self.Close()
                except:
                    pass 

            # [UI:LABEL_CLICK] Opens the BIM Pars website
            def Label_Click(self, sender, event):
                """
                Opens the BIM Pars website in a web browser.
                """
                url = parsweb(wurl)
                webbrowser.open(url)

            # [UI:ON_CLOSED] Closes the form when the window is closed
            def OnClosed(self, e):
                """
                Closes the form when the window is closed.
                """
                self.Close()
                   
        # [UI:TRIGGER] Show the license form and check license status
        doc = DocumentManager.Instance.CurrentDBDocument
        if 'form' in globals():
            pass
        else:
            form = LicenseForm(doc)
            form.ShowDialog()
        if not self.license_checked:
            self.check_license_status()
            self.license_checked = True  

# [RUN_BIMPARS]
form = BIMPARS_APP()
Application.Run(form)
